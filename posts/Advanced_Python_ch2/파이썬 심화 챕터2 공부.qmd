---
title: "파이썬 심화 챕터2"
author: "SeongTaek"
date: "2023-03-27"
categories: [Code,Advanced_Python,Jupyter]
image: "jup_image.jpg"
---

```{python}
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7cf7e4c7",
   "metadata": {},
   "source": [
    "# Numpy 기본 문법"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84910434",
   "metadata": {},
   "source": [
    "###### 수치 할당"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e9d87395",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "a = 5; b = 6; c = 7\n",
    "c"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e7fe6ed",
   "metadata": {},
   "source": [
    "###### 변수, 논리연산자"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0427d767",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3, 4]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# append() : 값 추가\n",
    "a = [1,2,3]\n",
    "b=a\n",
    "a.append(4)\n",
    "b"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fcb22b32",
   "metadata": {},
   "source": [
    "###### 타입 확인"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ffac6bed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(int, str)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = 5; b = 'foo'\n",
    "type(a), type(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "618cde6a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a is <class 'float'>, b is <class 'int'>\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "2.25"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# format() : print{} 안에 내용 추가 (순서대로 0,1,2..)\n",
    "# float : 소수\n",
    "a = 4.5; b = 2\n",
    "print('a is {0}, b is {1}'.format(type(a), type(b)))\n",
    "a/b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4fd4c83c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# isinstance() : 타입 맞는지 확인\n",
    "a = 5\n",
    "isinstance(a, int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e40c797d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(True, True)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 여러 타입 중 하나라도 맞으면 True\n",
    "a = 5; b = 4.5\n",
    "isinstance(a, (int, float, str)), isinstance(b, (int, float))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2578cff",
   "metadata": {},
   "source": [
    "###### 속성, 메서드"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c4c3e5d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = 'foo'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "882fa2b3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'FOO'"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# upper() : 소문자 → 대문자\n",
    "a.upper()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b99dce5d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function str.split(sep=None, maxsplit=-1)>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# getattr(객체, 속성) : 객체의 속성에 접근해줌\n",
    "getattr(a, 'split')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff8c3063",
   "metadata": {},
   "source": [
    "###### Duck typing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "26acbb5b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 덕 타이핑: \"특정 기능을 지원하는가만 중요하다\"는 의미를 전달할 때 사용하는 표현\n",
    "# = 이터러블 객체\n",
    "def isiterable(obj):\n",
    "    try:\n",
    "        iter(obj)\n",
    "        return True\n",
    "    except TypeError: # 이터러블 하지 않은 값\n",
    "        return False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3b09a43c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "isiterable('a string')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "19833d05",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "isiterable([1,2,3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "bc0c4de9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 정수는 이터러블 하지 않음\n",
    "isiterable(5) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee6344ab",
   "metadata": {},
   "source": [
    "###### Import\n",
    "some_module.py\n",
    "\n",
    "Pi = 3.14159\n",
    "\n",
    "def f(x): return x + 2\n",
    "\n",
    "def g(a,b):return a+b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "90ec8934",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# some_module : 임의적으로 만든 py 파일\n",
    "import some_module\n",
    "result = some_module.f(5)\n",
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f92d6a62",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.14159"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pi = some_module.PI\n",
    "pi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "4e50cc23",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8.14159"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 모듈 중 몇개만 import\n",
    "from some_module import f,g,PI\n",
    "result = g(5,PI)\n",
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "c23db6dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5.14159, 9.14159)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# as 로 이름 간략하게 바꿔서도 사용 가능\n",
    "import some_module as sm\n",
    "from some_module import PI as pi, g as gf\n",
    "r1 = sm.f(pi)\n",
    "r2 = gf(6, pi)\n",
    "r1, r2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a06dc37",
   "metadata": {},
   "source": [
    "###### 이항 연산, 비교"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b2fc458f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-2, 33.5, False)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "5 - 7, 12 + 21.5, 5 <= 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a6e71f99",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(True, True)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = [1,2,3]\n",
    "b = a\n",
    "c = list(a)\n",
    "a is b, a is not c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "a99cc38b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a == c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "cdad623a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = None\n",
    "a is None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "b9c8da99",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['foo', 2, (3, 4)]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a_list = ['foo', 2, [4,5]]\n",
    "a_list[2] = (3,4)\n",
    "a_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "f095d88c",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'tuple' object does not support item assignment",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[23], line 3\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m# 잘못된 예시 (수치형을 범주형으로 바꾸려한 경우)\u001b[39;00m\n\u001b[0;32m      2\u001b[0m a_tuple \u001b[38;5;241m=\u001b[39m (\u001b[38;5;241m3\u001b[39m, \u001b[38;5;241m5\u001b[39m, (\u001b[38;5;241m4\u001b[39m,\u001b[38;5;241m5\u001b[39m))\n\u001b[1;32m----> 3\u001b[0m a_tuple[\u001b[38;5;241m1\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mfour\u001b[39m\u001b[38;5;124m'\u001b[39m\n",
      "\u001b[1;31mTypeError\u001b[0m: 'tuple' object does not support item assignment"
     ]
    }
   ],
   "source": [
    "# 잘못된 예시 (수치형을 범주형으로 바꾸려한 경우)\n",
    "a_tuple = (3, 5, (4,5))\n",
    "a_tuple[1] = 'four'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5ddd0319",
   "metadata": {},
   "outputs": [],
   "source": [
    "ival = 17239871\n",
    "ival ** 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "969e187b",
   "metadata": {},
   "outputs": [],
   "source": [
    "fval = 7.243\n",
    "fval2 = 6.78e-5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "04c8d950",
   "metadata": {},
   "outputs": [],
   "source": [
    "# // : 몫 (% : 나머지)\n",
    "3/2, type(3/2), 3//2, type(3//2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "08c12dbd",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = 'one way of writing a string'\n",
    "b = 'another way'\n",
    "a,b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c63b1ec5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 따옴표 3개 : 여러 줄을 한 줄로 출력\n",
    "c = '''\n",
    "This is a longer string that\n",
    "spans multiple lines\n",
    "'''\n",
    "c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8cc734d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 띄어진 줄 개수\n",
    "c.count('\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "32e2614e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 잘못된 예시 (문자 바꾸려한 경우)\n",
    "a = 'this is a string'\n",
    "a[10] = 'f'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5f958958",
   "metadata": {},
   "outputs": [],
   "source": [
    "# replace 이용해 변경\n",
    "b = a.replace('string', 'longer string')\n",
    "a,b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "35b61175",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 수치형 → 범주형 변경\n",
    "a = 5.6\n",
    "s = str(a)\n",
    "print(s),\n",
    "type(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "84195e99",
   "metadata": {},
   "outputs": [],
   "source": [
    "# list 이용해 문자 하나씩 출력\n",
    "s = 'python'\n",
    "list(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fd8fca99",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 3전 까지 출력, 3부터 출력\n",
    "s[:3], s[3:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "24dc2a56",
   "metadata": {},
   "outputs": [],
   "source": [
    "# \\n로 줄 띄우기\n",
    "print('12\\n34')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ec55f062",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 이상한 예시\n",
    "s = '12\\\\34'\n",
    "print(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "53e5b666",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 범주형도 더해진다\n",
    "a = 'this is the first half'\n",
    "b = 'and this is the second half'\n",
    "a + b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7b99d66f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# {0:.2f} : 소수점 둘째 자리로 반올림\n",
    "# {1:s} : 두번째 인수의 형식을 범주형으로 저장\n",
    "# {2:d} : 세번째 인수의 형식을 정확한 정수로 저장\n",
    "template = '{0:.2f} {1:s} are worth US${2:d}'\n",
    "template"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2886a03d",
   "metadata": {},
   "outputs": [],
   "source": [
    "template.format(4.5560, 'Argentine Pesos', 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0aeff8ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "template.format(1263.23, 'won', 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "359ee8d8",
   "metadata": {},
   "source": [
    "###### Booleans\n",
    "불리언 타입 - True, False 두가지 값"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cc82c91c",
   "metadata": {},
   "outputs": [],
   "source": [
    "True and True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cfd0eb41",
   "metadata": {},
   "outputs": [],
   "source": [
    "False or True"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50ccc442",
   "metadata": {},
   "source": [
    "###### Type casting\n",
    "원하는 타입으로 해석"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7caf97b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "s = '3.14159'\n",
    "fval = float(s)\n",
    "type(fval)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "50382a42",
   "metadata": {},
   "outputs": [],
   "source": [
    "int(fval)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4e2626a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "bool(fval)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b2572a80",
   "metadata": {},
   "outputs": [],
   "source": [
    "# bool : 비어있는 값, 0 → False\n",
    "bool(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5bf538de",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = None\n",
    "a is None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0b39e492",
   "metadata": {},
   "outputs": [],
   "source": [
    "def add_and_maybe_multiply(a, b, c=None):\n",
    "    result = a + b\n",
    "    if c is not None:\n",
    "        result = result * c\n",
    "    return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c8387a3c",
   "metadata": {},
   "outputs": [],
   "source": [
    "add_and_maybe_multiply(5,3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ad2fcc3b",
   "metadata": {},
   "outputs": [],
   "source": [
    "add_and_maybe_multiply(5,3,10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "772979b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "type(None)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0fe375d3",
   "metadata": {},
   "source": [
    "###### 날짜, 시간 값"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ecdf34be",
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import datetime, date, time\n",
    "dt = datetime(2011, 10, 29, 20, 30, 21)\n",
    "dt\n",
    "# 년, 월, 일, 시, 분, 초"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "be451cf9",
   "metadata": {},
   "outputs": [],
   "source": [
    "dt.day"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f12acb2a",
   "metadata": {},
   "outputs": [],
   "source": [
    "dt.minute"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7d7e265f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 년, 월, 일\n",
    "dt.date()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1e637354",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 시, 분, 초\n",
    "dt.time()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "07f2aec5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# strftime : 날짜 문자열을 날짜 객체로 만들 때\n",
    "dt.strftime('%m/%d/%Y %H:%M'), dt.strftime('%Y/%m/%d %H:%M')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3925df9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# strptime : 날짜 객체열을 날짜 문자열로 출력 할 때 \n",
    "datetime.strptime('20091031', '%Y%m%d')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "38265435",
   "metadata": {},
   "outputs": [],
   "source": [
    "dt.replace(minute=0, second=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3618c9f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 날짜 끼리 연산 가능\n",
    "dt2 = datetime(2011, 11, 15, 22, 30)\n",
    "delta = dt2 - dt\n",
    "delta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6f90082c",
   "metadata": {},
   "outputs": [],
   "source": [
    "type(delta)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b49b7c0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "dt\n",
    "dt + delta"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1dd0853",
   "metadata": {},
   "source": [
    "###### Control Flow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "39292ccc",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = -5\n",
    "\n",
    "if x < 0:\n",
    "    print('It is negative')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "93646dc4",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = 8\n",
    "if x < 0:\n",
    "    print('It is negative')\n",
    "elif x == 0:\n",
    "    print('Equal to zero')\n",
    "elif 0 < x < 5:\n",
    "    print('positive but smaller than 5')\n",
    "else:\n",
    "    print('positive and larger than or equal to 5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "67680ec4",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = 5; b = 7; c = 8; d = 4\n",
    "if a < b or c > d:\n",
    "    print('Made it')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a38ea7bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "4>3>2>1, 3>5 or 2>1, 3>5>2>1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48f0d348",
   "metadata": {},
   "source": [
    "###### for loops 루프문"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e1f09e0d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 잘못된 예시 (+= 는 int, NoneType 지원 안함)\n",
    "sequence = [1,2,None,4,None,5]\n",
    "total = 0\n",
    "\n",
    "for value in sequence:\n",
    "    total += value\n",
    "    # total = total + value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3eb79515",
   "metadata": {},
   "outputs": [],
   "source": [
    "sequence = [1,2,None,4,None,5]\n",
    "total = 10\n",
    "\n",
    "for value in sequence:\n",
    "    if value is None:\n",
    "        continue\n",
    "    total += value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "14e08087",
   "metadata": {},
   "outputs": [],
   "source": [
    "total"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bd82326f",
   "metadata": {},
   "outputs": [],
   "source": [
    "sequence = [1,2,0,4,6,5,2,1]\n",
    "total_until_5 = 0\n",
    "for value in sequence:\n",
    "    if value == 5:\n",
    "        break\n",
    "    total_until_5 += value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1e9f6385",
   "metadata": {},
   "outputs": [],
   "source": [
    "total_until_5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "19ac60d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "list(range(4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "979c2b64",
   "metadata": {},
   "outputs": [],
   "source": [
    "# j가 i 보다 커지기 전까지 조합\n",
    "for i in range(4):\n",
    "    for j in range(4):\n",
    "        if j > i:\n",
    "            break\n",
    "        print((j,i))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cac186dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 전체 조합 출력\n",
    "for i in range(4):\n",
    "    for j in range(4):\n",
    "        print((i,j))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "786a36b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "for a, b, c in [[1,2,3],[4,5,6],[7,8,9]]:\n",
    "    print(a,b,c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9f731246",
   "metadata": {},
   "outputs": [],
   "source": [
    "for a in [[1,2,3],[4,5,6],[7,8,9]]:\n",
    "    print(a)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a23c95a",
   "metadata": {},
   "source": [
    "###### while loops"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "38a5a399",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = 256\n",
    "total = 0\n",
    "\n",
    "while x > 0:\n",
    "    if total >500:\n",
    "        break\n",
    "    total += x\n",
    "    x = x // 2\n",
    "    print(total,x)\n",
    "total, x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "244a3bbb",
   "metadata": {},
   "outputs": [],
   "source": [
    "total,x"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77d08154",
   "metadata": {},
   "source": [
    "###### pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ca0b4165",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = 7\n",
    "\n",
    "if x < 0:\n",
    "    print('negative!')\n",
    "elif x == 0:\n",
    "    pass\n",
    "else:\n",
    "    print('positive!')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1acda466",
   "metadata": {},
   "source": [
    "###### range"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "71ca1c7f",
   "metadata": {},
   "outputs": [],
   "source": [
    "range(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f87a0d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "list(range(10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0f4b69cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "list(range(0, 20, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "92aa4f76",
   "metadata": {},
   "outputs": [],
   "source": [
    "list(range(5, 0, -1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f007f2ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "sum = 0\n",
    "for i in range(100000):\n",
    "    if i % 3 == 0 or i % 5 == 0:\n",
    "        sum += i\n",
    "\n",
    "sum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "82a1ac5f",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = 5\n",
    "b = 'Non-negative' if x >= 0 else 'Negative'\n",
    "b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "794e5015",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = 5\n",
    "\n",
    "a = 100 if x>=0 else -100\n",
    "a"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
```
