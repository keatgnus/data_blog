{
  "hash": "29bf64b13d62f13f420a5b2237514ac1",
  "result": {
    "markdown": "---\ntitle: \"Data_Visualize CH5\"\nauthor: \"Seongtaek\"\ndate: \"2023-04-06\"\ncategories: [code, data_visualize, rstudio]\nimage: \"ggplot.jpg\"\ntoc: true\ntoc-depth: 3\nnumber-sections: true\n---\n\n\n<table align=\"bottom\">\n  <td>\n    <a target=\"_blank\" href=\"figure-3.10.html\"><img\n    src = r_logo.png />HTML파일로 보기</a>\n  </td>\n</table>\n\nFigure 3.10\n\n\n\n\n\n## 데이터 시각화 실습 : 원형 그래프 Figure 3.10\n\n### 패키지 불러오기\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\n#> \n#> Attaching package: 'dplyr'\n#> The following objects are masked from 'package:stats':\n#> \n#>     filter, lag\n#> The following objects are masked from 'package:base':\n#> \n#>     intersect, setdiff, setequal, union\n```\n:::\n\n\n### 데이터 불러오기, 파악\n- ncdc_normals.csv (날짜별 온도 등 데이터셋)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nncdc_normals <- read.csv('C:/Users/seong taek/Desktop/3-1 DataVisualize/data_visualize/ncdc_normals.csv')\n\n### 차원 파악\nncdc_normals %>% dim()\n#> [1] 2745366       6\n\n### 앞부분 훑어보기\nncdc_normals %>% head()\n#>    station_id month day temperature flag       date\n#> 1 AQW00061705     1   1        82.4    C 0000-01-01\n#> 2 AQW00061705     1   2        82.4    C 0000-01-02\n#> 3 AQW00061705     1   3        82.4    C 0000-01-03\n#> 4 AQW00061705     1   4        82.4    C 0000-01-04\n#> 5 AQW00061705     1   5        82.4    C 0000-01-05\n#> 6 AQW00061705     1   6        82.4    C 0000-01-06\n\n### 통계 요약 정보\nncdc_normals %>% summary()\n#>   station_id            month             day         temperature    \n#>  Length:2745366     Min.   : 1.000   Min.   : 1.00   Min.   :-21.80  \n#>  Class :character   1st Qu.: 4.000   1st Qu.: 8.00   1st Qu.: 39.70  \n#>  Mode  :character   Median : 7.000   Median :16.00   Median : 54.60  \n#>                     Mean   : 6.514   Mean   :15.76   Mean   : 53.17  \n#>                     3rd Qu.:10.000   3rd Qu.:23.00   3rd Qu.: 68.10  \n#>                     Max.   :12.000   Max.   :31.00   Max.   :103.20  \n#>      flag               date          \n#>  Length:2745366     Length:2745366    \n#>  Class :character   Class :character  \n#>  Mode  :character   Mode  :character  \n#>                                       \n#>                                       \n#> \n\n### 각 컬럼 클래스(타입) 확인\nncdc_normals %>% sapply(class)\n#>  station_id       month         day temperature        flag        date \n#> \"character\"   \"integer\"   \"integer\"   \"numeric\" \"character\" \"character\"\n\n### 각 컬럼 자료형 확인\nncdc_normals %>% sapply(typeof)\n#>  station_id       month         day temperature        flag        date \n#> \"character\"   \"integer\"   \"integer\"    \"double\" \"character\" \"character\"\n```\n:::\n\n\n### 전처리\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### staion id와 location 지정 선택한 d.f 만들기\nstation_loc <- data.frame(station_id = c(\"USW00014819\",\"USC00042319\",\"USW00093107\",\"USW00012918\"),\n                          location = c(\"Chicago\",\"Death Valley\",\"San Diego\",\"Houston\"))\n\nstation_loc %>% head()\n#>    station_id     location\n#> 1 USW00014819      Chicago\n#> 2 USC00042319 Death Valley\n#> 3 USW00093107    San Diego\n#> 4 USW00012918      Houston\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n### station_id로 ncdc_normals와 station_loc 두 컬럼을 `inner_join`\ntemps_long <- ncdc_normals %>% inner_join(station_loc, by=\"station_id\")\ntemps_long %>% head()\n#>    station_id month day temperature flag       date     location\n#> 1 USC00042319     1   1        51.0    S 0000-01-01 Death Valley\n#> 2 USC00042319     1   2        51.2    S 0000-01-02 Death Valley\n#> 3 USC00042319     1   3        51.3    S 0000-01-03 Death Valley\n#> 4 USC00042319     1   4        51.4    S 0000-01-04 Death Valley\n#> 5 USC00042319     1   5        51.6    S 0000-01-05 Death Valley\n#> 6 USC00042319     1   6        51.7    S 0000-01-06 Death Valley\ntemps_long %>% sapply(class)\n#>  station_id       month         day temperature        flag        date \n#> \"character\"   \"integer\"   \"integer\"   \"numeric\" \"character\" \"character\" \n#>    location \n#> \"character\"\n\n### temps_long의 `date`의 타입을 Cha → Date로 변환\ntemps_long$date <- temps_long$date %>% as.Date('%Y-%m-%d')\ntemps_long %>% sapply(class)\n#>  station_id       month         day temperature        flag        date \n#> \"character\"   \"integer\"   \"integer\"   \"numeric\" \"character\"      \"Date\" \n#>    location \n#> \"character\"\n```\n:::\n\n\n### x축 눈금 설정\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndate_s <- '0000-01-01' %>% as.Date('%Y-%m-%d')\ndate_e <- '0001-01-01' %>% as.Date('%Y-%m-%d')\nbreak_date <- seq.Date(date_s, date_e, by = '3 month')\ndate_lab <- format(break_date, '%B')\n```\n:::\n\n\n### figure 3.10\n- 사용 데이터셋 : temps_long\n- x = date, y = temperature\n- color : location별\n- geom_line\n  - 선 굵기 : 1.2\n- scale_x_date\n  - 이름 : 'month'\n  - 간격 : break_date (3개월)\n  - 간격 라벨 (1월 ~ 1월)\n- scale_y_continuous\n  - 이름 : 'temperature'\n  - 범위 : 0 ~ 105\n- coord_polar\n  - 사용 각도 변수 : x축\n  - 시작 각도 : 180도\n  - 반시계 방향\n- 테마 : 밝게\n- 플롯 영역의 테두리(border) 제거\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(temps_long, aes(x = date, y = temperature, color = location)) +\n  geom_line(linewidth = 1.2) +\n  scale_x_date(name='month',\n                breaks =break_date,\n                labels= date_lab) +\n  scale_y_continuous(name = 'temperature',\n                     limits = c(0, 105)) +\n  coord_polar(theta = 'x',start = pi, direction = -1) + # 6시 위치에서 반시계 방향 (0,1이면 12시 위치에서 시계방향)\n  theme_light() +\n  theme(panel.border = element_blank())\n```\n\n::: {.cell-output-display}\n![](figure-3.10_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## 예제\n- 2022년 기상청 자료 Figure 3.10\n\n### 데이터 불러오기, 파악\n- OBS_ASOS_DD_20230322080932.csv (2022년 기상청 자료)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_2022 <- read.csv('C:/Users/seong taek/Desktop/3-1 DataVisualize/data_visualize/OBS_ASOS_DD_20230322080932.csv', fileEncoding = 'cp949')\n\n### 차원 파악\ndata_2022 %>% dim()\n#> [1] 2555    6\n\n### 앞부분 훑어보기\ndata_2022 %>% head()\n#>   지점 지점명       일시 평균기온..C. 최저기온..C. 최고기온..C.\n#> 1  108   서울 2022-01-01         -4.3        -10.2          2.3\n#> 2  108   서울 2022-01-02         -1.3         -5.2          3.0\n#> 3  108   서울 2022-01-03         -1.9         -8.0          2.5\n#> 4  108   서울 2022-01-04         -2.5         -5.6          1.0\n#> 5  108   서울 2022-01-05         -2.8         -7.8          1.9\n#> 6  108   서울 2022-01-06         -2.2         -5.9          3.3\n\n### 통계 요약 정보\ndata_2022 %>% summary()\n#>       지점          지점명              일시            평균기온..C.   \n#>  Min.   :108.0   Length:2555        Length:2555        Min.   :-11.80  \n#>  1st Qu.:133.0   Class :character   Class :character   1st Qu.:  8.20  \n#>  Median :185.0   Mode  :character   Mode  :character   Median : 16.40  \n#>  Mean   :175.1                                         Mean   : 15.27  \n#>  3rd Qu.:189.0                                         3rd Qu.: 23.00  \n#>  Max.   :239.0                                         Max.   : 32.20  \n#>                                                        NA's   :2       \n#>   최저기온..C.      최고기온..C.  \n#>  Min.   :-13.800   Min.   :-8.60  \n#>  1st Qu.:  4.225   1st Qu.:12.30  \n#>  Median : 12.600   Median :20.75  \n#>  Mean   : 11.626   Mean   :19.49  \n#>  3rd Qu.: 19.800   3rd Qu.:27.20  \n#>  Max.   : 28.900   Max.   :37.50  \n#>  NA's   :1         NA's   :1\n\n### 컬럼 클래스(타입) 확인\ndata_2022 %>% sapply(class)\n#>         지점       지점명         일시 평균기온..C. 최저기온..C. 최고기온..C. \n#>    \"integer\"  \"character\"  \"character\"    \"numeric\"    \"numeric\"    \"numeric\"\n\n### 컬럼 자료형 확인\ndata_2022 %>% sapply(typeof)\n#>         지점       지점명         일시 평균기온..C. 최저기온..C. 최고기온..C. \n#>    \"integer\"  \"character\"  \"character\"     \"double\"     \"double\"     \"double\"\n\n### 결측값 있는지 확인\nsum(is.na(data_2022))\n#> [1] 4\n\n### 결측값 제거\ndata_2022 <- data_2022 %>% na.omit()\n```\n:::\n\n### 전처리\n\n\n::: {.cell}\n\n```{.r .cell-code}\n###  `일시`를 character → date형식으로 변환\ndata_2022$일시 <- data_2022$일시 %>% as.Date('%Y-%m-%d')\n\ndata_2022 %>% sapply(class)\n#>         지점       지점명         일시 평균기온..C. 최저기온..C. 최고기온..C. \n#>    \"integer\"  \"character\"       \"Date\"    \"numeric\"    \"numeric\"    \"numeric\"\n\n### 대전, 서울, 세종, 제주 지역만 추출\ndata_2022 <- data_2022 %>% filter(data_2022$지점명 %in% c('대전','서울','세종','제주'))\n\ndata_2022$지점명 %>% unique()\n#> [1] \"서울\" \"대전\" \"제주\" \"세종\"\n```\n:::\n\n###  x축에 표시할 눈금\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_2022$일시 %>% head()\n#> [1] \"2022-01-01\" \"2022-01-02\" \"2022-01-03\" \"2022-01-04\" \"2022-01-05\"\n#> [6] \"2022-01-06\"\n\ndata_2022$일시 %>% tail()\n#> [1] \"2022-12-26\" \"2022-12-27\" \"2022-12-28\" \"2022-12-29\" \"2022-12-30\"\n#> [6] \"2022-12-31\"\n\ndate_s <- '2022-01-01' %>% as.Date('%Y-%m-%d')\ndate_e <- '2023-01-01' %>% as.Date('%Y-%m-%d')\n\nbreak_date <- seq.Date(date_s, date_e, by='2 month')\nbreak_date\n#> [1] \"2022-01-01\" \"2022-03-01\" \"2022-05-01\" \"2022-07-01\" \"2022-09-01\"\n#> [6] \"2022-11-01\" \"2023-01-01\"\n\n# 월만 문자 값으로 뽑아내기\ndate_lab <- format(break_date, '%B')\ndate_lab\n#> [1] \"1월\"  \"3월\"  \"5월\"  \"7월\"  \"9월\"  \"11월\" \"1월\"\n```\n:::\n\n### figure 3.10\n- 사용 데이터셋 : data_2022\n- x=일시, y=평균기온..C.\n- color : 지점명별\n- geom_line\n  - 선 굵기 : 1.2\n- scale_x_date\n  - 이름 : '월'\n  - 간격 : break_date (2개월)\n  - 간격 라벨 (1월 ~ 1월)\n- scale_y_continuous\n  - 이름 : '평균기온'\n  - 범위 : -20 ~ 35\n- coord_polar\n  - 사용 각도 변수 : x축\n  - 시작 각도 : 180도\n  - 반시계 방향\n- 테마 : 밝게\n- 플롯 영역의 테두리(border) 제거\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data_2022, aes(x=일시, y=평균기온..C., color=지점명)) +\n  geom_line(linewidth = 1.2) +\n  scale_x_date(name='월',\n                breaks =break_date,\n                labels= date_lab) +\n  scale_y_continuous(name = '평균기온',\n                     limits = c(-20, 35)) +\n  coord_polar(theta = 'x',start = pi, direction = -1) + # 6시 위치에서 반시계 방향 0,1이면 12시 위치에서 시계방향\n  theme_light() +\n  theme(panel.border = element_blank())\n```\n\n::: {.cell-output-display}\n![](figure-3.10_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "figure-3.10_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}