{
  "hash": "32e691155eb12db63caad92351d4e62a",
  "result": {
    "markdown": "---\ntitle: \"Opendata_Analysis CH2\"\nauthor: \"Seongtaek\"\ndate: \"2023-04-15\"\ncategories: [code, opendata_analysis, rstudio]\nimage: \"data_transformation.png\"\ntoc: true\ntoc-depth: 4\nnumber-sections: true\n---\n\n\n<table align=\"bottom\">\n  <td>\n    <a target=\"_blank\" href=\"data_transformation_html.html\"><img\n    src = r_logo.png />HTML파일로 보기</a>\n  </td>\n</table>\n\nData Transformaion\n\n## 오픈데이터 분석 실습 : Data Transformation\n\n### 패키지 불러오기\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(nycflights13)\n```\n:::\n\n\n### 간단한 데이터셋 파악\n- nycflights13\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### 도움말\n#?flights\n\n### 요약\nflights %>% str()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [336,776 × 19] (S3: tbl_df/tbl/data.frame)\n $ year          : int [1:336776] 2013 2013 2013 2013 2013 2013 2013 2013 2013 2013 ...\n $ month         : int [1:336776] 1 1 1 1 1 1 1 1 1 1 ...\n $ day           : int [1:336776] 1 1 1 1 1 1 1 1 1 1 ...\n $ dep_time      : int [1:336776] 517 533 542 544 554 554 555 557 557 558 ...\n $ sched_dep_time: int [1:336776] 515 529 540 545 600 558 600 600 600 600 ...\n $ dep_delay     : num [1:336776] 2 4 2 -1 -6 -4 -5 -3 -3 -2 ...\n $ arr_time      : int [1:336776] 830 850 923 1004 812 740 913 709 838 753 ...\n $ sched_arr_time: int [1:336776] 819 830 850 1022 837 728 854 723 846 745 ...\n $ arr_delay     : num [1:336776] 11 20 33 -18 -25 12 19 -14 -8 8 ...\n $ carrier       : chr [1:336776] \"UA\" \"UA\" \"AA\" \"B6\" ...\n $ flight        : int [1:336776] 1545 1714 1141 725 461 1696 507 5708 79 301 ...\n $ tailnum       : chr [1:336776] \"N14228\" \"N24211\" \"N619AA\" \"N804JB\" ...\n $ origin        : chr [1:336776] \"EWR\" \"LGA\" \"JFK\" \"JFK\" ...\n $ dest          : chr [1:336776] \"IAH\" \"IAH\" \"MIA\" \"BQN\" ...\n $ air_time      : num [1:336776] 227 227 160 183 116 150 158 53 140 138 ...\n $ distance      : num [1:336776] 1400 1416 1089 1576 762 ...\n $ hour          : num [1:336776] 5 5 5 5 6 5 6 6 6 6 ...\n $ minute        : num [1:336776] 15 29 40 45 0 58 0 0 0 0 ...\n $ time_hour     : POSIXct[1:336776], format: \"2013-01-01 05:00:00\" \"2013-01-01 05:00:00\" ...\n```\n:::\n\n```{.r .cell-code}\n### 컬럼 이름\nflights %>% colnames()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"year\"           \"month\"          \"day\"            \"dep_time\"      \n [5] \"sched_dep_time\" \"dep_delay\"      \"arr_time\"       \"sched_arr_time\"\n [9] \"arr_delay\"      \"carrier\"        \"flight\"         \"tailnum\"       \n[13] \"origin\"         \"dest\"           \"air_time\"       \"distance\"      \n[17] \"hour\"           \"minute\"         \"time_hour\"     \n```\n:::\n:::\n\n## dplyr 기초\n\n### filter\n- 조건 필터링\n\n::: {.cell}\n\n```{.r .cell-code}\n### table - 빈도수 파악\nflights$month %>% table()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n.\n    1     2     3     4     5     6     7     8     9    10    11    12 \n27004 24951 28834 28330 28796 28243 29425 29327 27574 28889 27268 28135 \n```\n:::\n\n```{.r .cell-code}\n### 월별 필터링\nflights %>%\n  filter(month==12 | month==11)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 55,403 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013    11     1        5       2359       6     352     345       7 B6     \n 2  2013    11     1       35       2250     105     123    2356      87 B6     \n 3  2013    11     1      455        500      -5     641     651     -10 US     \n 4  2013    11     1      539        545      -6     856     827      29 UA     \n 5  2013    11     1      542        545      -3     831     855     -24 AA     \n 6  2013    11     1      549        600     -11     912     923     -11 UA     \n 7  2013    11     1      550        600     -10     705     659       6 US     \n 8  2013    11     1      554        600      -6     659     701      -2 US     \n 9  2013    11     1      554        600      -6     826     827      -1 DL     \n10  2013    11     1      554        600      -6     749     751      -2 DL     \n# … with 55,393 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n\n```{.r .cell-code}\n### 월별 필터링 - %in% 사용\nflights %>% \n  filter(month %in% c(11,12))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 55,403 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013    11     1        5       2359       6     352     345       7 B6     \n 2  2013    11     1       35       2250     105     123    2356      87 B6     \n 3  2013    11     1      455        500      -5     641     651     -10 US     \n 4  2013    11     1      539        545      -6     856     827      29 UA     \n 5  2013    11     1      542        545      -3     831     855     -24 AA     \n 6  2013    11     1      549        600     -11     912     923     -11 UA     \n 7  2013    11     1      550        600     -10     705     659       6 US     \n 8  2013    11     1      554        600      -6     659     701      -2 US     \n 9  2013    11     1      554        600      -6     826     827      -1 DL     \n10  2013    11     1      554        600      -6     749     751      -2 DL     \n# … with 55,393 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n:::\n\n\n### missing values\n- 결측값 NA\n\n::: {.cell}\n\n```{.r .cell-code}\n### 결측값은 연산 불가능\nNA\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nNA > 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\n10 == NA\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nNA + 19\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nNA / 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\n### 결측값 개수\nflights$dep_time %>%\n  is.na() %>% \n  sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8255\n```\n:::\n\n```{.r .cell-code}\n### 결측값 있는 df 생성\ndf <- data.frame(x = c(1, NA, 3))\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   x\n1  1\n2 NA\n3  3\n```\n:::\n\n```{.r .cell-code}\n### 타입 확인\ndf %>% class()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.frame\"\n```\n:::\n\n```{.r .cell-code}\n### tibble : tidyverse의 df 클래스\ntibble_df <- tibble(x = c(1, NA, 3))\ntibble_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 1\n      x\n  <dbl>\n1     1\n2    NA\n3     3\n```\n:::\n\n```{.r .cell-code}\ntibble_df %>% filter(x > 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n      x\n  <dbl>\n1     3\n```\n:::\n\n```{.r .cell-code}\ntibble_df %>% filter(is.na(x) | x>1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 1\n      x\n  <dbl>\n1    NA\n2     3\n```\n:::\n:::\n\n\n### arrange\n- 정렬\n\n::: {.cell}\n\n```{.r .cell-code}\n### 오름차순 정렬\nflights %>% arrange(dep_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1    13        1       2249      72     108    2357      71 B6     \n 2  2013     1    31        1       2100     181     124    2225     179 WN     \n 3  2013    11    13        1       2359       2     442     440       2 B6     \n 4  2013    12    16        1       2359       2     447     437      10 B6     \n 5  2013    12    20        1       2359       2     430     440     -10 B6     \n 6  2013    12    26        1       2359       2     437     440      -3 B6     \n 7  2013    12    30        1       2359       2     441     437       4 B6     \n 8  2013     2    11        1       2100     181     111    2225     166 WN     \n 9  2013     2    24        1       2245      76     121    2354      87 B6     \n10  2013     3     8        1       2355       6     431     440      -9 B6     \n# … with 336,766 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n\n```{.r .cell-code}\n### 결측값은 가장 하단 배치\ndf <- tibble(x = c(5,2,NA))\narrange(df, x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 1\n      x\n  <dbl>\n1     2\n2     5\n3    NA\n```\n:::\n\n```{.r .cell-code}\narrange(df, -x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 1\n      x\n  <dbl>\n1     5\n2     2\n3    NA\n```\n:::\n:::\n\n\n### select\n- 컬럼 선택\n\n::: {.cell}\n\n```{.r .cell-code}\n### 컬럼 선택 (순서 지정 가능)\nflights %>% select(year, month, day)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 3\n    year month   day\n   <int> <int> <int>\n 1  2013     1     1\n 2  2013     1     1\n 3  2013     1     1\n 4  2013     1     1\n 5  2013     1     1\n 6  2013     1     1\n 7  2013     1     1\n 8  2013     1     1\n 9  2013     1     1\n10  2013     1     1\n# … with 336,766 more rows\n```\n:::\n\n```{.r .cell-code}\nflights %>% select(year:day)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 3\n    year month   day\n   <int> <int> <int>\n 1  2013     1     1\n 2  2013     1     1\n 3  2013     1     1\n 4  2013     1     1\n 5  2013     1     1\n 6  2013     1     1\n 7  2013     1     1\n 8  2013     1     1\n 9  2013     1     1\n10  2013     1     1\n# … with 336,766 more rows\n```\n:::\n\n```{.r .cell-code}\n### 컬럼 제외\nflights %>% select(-(year:day))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 16\n   dep_t…¹ sched…² dep_d…³ arr_t…⁴ sched…⁵ arr_d…⁶ carrier flight tailnum origin\n     <int>   <int>   <dbl>   <int>   <int>   <dbl> <chr>    <int> <chr>   <chr> \n 1     517     515       2     830     819      11 UA        1545 N14228  EWR   \n 2     533     529       4     850     830      20 UA        1714 N24211  LGA   \n 3     542     540       2     923     850      33 AA        1141 N619AA  JFK   \n 4     544     545      -1    1004    1022     -18 B6         725 N804JB  JFK   \n 5     554     600      -6     812     837     -25 DL         461 N668DN  LGA   \n 6     554     558      -4     740     728      12 UA        1696 N39463  EWR   \n 7     555     600      -5     913     854      19 B6         507 N516JB  EWR   \n 8     557     600      -3     709     723     -14 EV        5708 N829AS  LGA   \n 9     557     600      -3     838     846      -8 B6          79 N593JB  JFK   \n10     558     600      -2     753     745       8 AA         301 N3ALAA  LGA   \n# … with 336,766 more rows, 6 more variables: dest <chr>, air_time <dbl>,\n#   distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>, and abbreviated\n#   variable names ¹​dep_time, ²​sched_dep_time, ³​dep_delay, ⁴​arr_time,\n#   ⁵​sched_arr_time, ⁶​arr_delay\n```\n:::\n\n```{.r .cell-code}\n### 시작 문자열 지정\nflights %>% select(starts_with('dep'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 2\n   dep_time dep_delay\n      <int>     <dbl>\n 1      517         2\n 2      533         4\n 3      542         2\n 4      544        -1\n 5      554        -6\n 6      554        -4\n 7      555        -5\n 8      557        -3\n 9      557        -3\n10      558        -2\n# … with 336,766 more rows\n```\n:::\n\n```{.r .cell-code}\n### 끝 문자열 지정\nflights %>% select(ends_with(\"time\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 5\n   dep_time sched_dep_time arr_time sched_arr_time air_time\n      <int>          <int>    <int>          <int>    <dbl>\n 1      517            515      830            819      227\n 2      533            529      850            830      227\n 3      542            540      923            850      160\n 4      544            545     1004           1022      183\n 5      554            600      812            837      116\n 6      554            558      740            728      150\n 7      555            600      913            854      158\n 8      557            600      709            723       53\n 9      557            600      838            846      140\n10      558            600      753            745      138\n# … with 336,766 more rows\n```\n:::\n\n```{.r .cell-code}\n### 포함 문자열 지정\nflights %>% select(contains(\"time\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 6\n   dep_time sched_dep_time arr_time sched_arr_time air_time time_hour          \n      <int>          <int>    <int>          <int>    <dbl> <dttm>             \n 1      517            515      830            819      227 2013-01-01 05:00:00\n 2      533            529      850            830      227 2013-01-01 05:00:00\n 3      542            540      923            850      160 2013-01-01 05:00:00\n 4      544            545     1004           1022      183 2013-01-01 05:00:00\n 5      554            600      812            837      116 2013-01-01 06:00:00\n 6      554            558      740            728      150 2013-01-01 05:00:00\n 7      555            600      913            854      158 2013-01-01 06:00:00\n 8      557            600      709            723       53 2013-01-01 06:00:00\n 9      557            600      838            846      140 2013-01-01 06:00:00\n10      558            600      753            745      138 2013-01-01 06:00:00\n# … with 336,766 more rows\n```\n:::\n\n```{.r .cell-code}\n### 컬럼 이름 변경 new = old\nflights %>% rename(tail_num = tailnum)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      517        515       2     830     819      11 UA     \n 2  2013     1     1      533        529       4     850     830      20 UA     \n 3  2013     1     1      542        540       2     923     850      33 AA     \n 4  2013     1     1      544        545      -1    1004    1022     -18 B6     \n 5  2013     1     1      554        600      -6     812     837     -25 DL     \n 6  2013     1     1      554        558      -4     740     728      12 UA     \n 7  2013     1     1      555        600      -5     913     854      19 B6     \n 8  2013     1     1      557        600      -3     709     723     -14 EV     \n 9  2013     1     1      557        600      -3     838     846      -8 B6     \n10  2013     1     1      558        600      -2     753     745       8 AA     \n# … with 336,766 more rows, 9 more variables: flight <int>, tail_num <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n\n```{.r .cell-code}\n### 순서 배치 + 나머지\nflights %>% select(time_hour, air_time, everything())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 19\n   time_hour           air_t…¹  year month   day dep_t…² sched…³ dep_d…⁴ arr_t…⁵\n   <dttm>                <dbl> <int> <int> <int>   <int>   <int>   <dbl>   <int>\n 1 2013-01-01 05:00:00     227  2013     1     1     517     515       2     830\n 2 2013-01-01 05:00:00     227  2013     1     1     533     529       4     850\n 3 2013-01-01 05:00:00     160  2013     1     1     542     540       2     923\n 4 2013-01-01 05:00:00     183  2013     1     1     544     545      -1    1004\n 5 2013-01-01 06:00:00     116  2013     1     1     554     600      -6     812\n 6 2013-01-01 05:00:00     150  2013     1     1     554     558      -4     740\n 7 2013-01-01 06:00:00     158  2013     1     1     555     600      -5     913\n 8 2013-01-01 06:00:00      53  2013     1     1     557     600      -3     709\n 9 2013-01-01 06:00:00     140  2013     1     1     557     600      -3     838\n10 2013-01-01 06:00:00     138  2013     1     1     558     600      -2     753\n# … with 336,766 more rows, 10 more variables: sched_arr_time <int>,\n#   arr_delay <dbl>, carrier <chr>, flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, distance <dbl>, hour <dbl>, minute <dbl>, and abbreviated\n#   variable names ¹​air_time, ²​dep_time, ³​sched_dep_time, ⁴​dep_delay, ⁵​arr_time\n```\n:::\n:::\n\n\n### mutate\n- 새로운 컬럼 생성\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% mutate(\n  gain = dep_delay - arr_delay,\n  hours = air_time / 60,\n  gain_per_hour = gain / hours\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 22\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      517        515       2     830     819      11 UA     \n 2  2013     1     1      533        529       4     850     830      20 UA     \n 3  2013     1     1      542        540       2     923     850      33 AA     \n 4  2013     1     1      544        545      -1    1004    1022     -18 B6     \n 5  2013     1     1      554        600      -6     812     837     -25 DL     \n 6  2013     1     1      554        558      -4     740     728      12 UA     \n 7  2013     1     1      555        600      -5     913     854      19 B6     \n 8  2013     1     1      557        600      -3     709     723     -14 EV     \n 9  2013     1     1      557        600      -3     838     846      -8 B6     \n10  2013     1     1      558        600      -2     753     745       8 AA     \n# … with 336,766 more rows, 12 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, gain <dbl>, hours <dbl>,\n#   gain_per_hour <dbl>, and abbreviated variable names ¹​sched_dep_time,\n#   ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n\n```{.r .cell-code}\n### transmute : mutate와 다르게 반환된 값만 출력 \nflights %>% transmute(\n  gain = dep_delay - arr_delay,\n  hours = air_time / 60,\n  gain_per_hour = gain / hours\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 3\n    gain hours gain_per_hour\n   <dbl> <dbl>         <dbl>\n 1    -9 3.78          -2.38\n 2   -16 3.78          -4.23\n 3   -31 2.67         -11.6 \n 4    17 3.05           5.57\n 5    19 1.93           9.83\n 6   -16 2.5           -6.4 \n 7   -24 2.63          -9.11\n 8    11 0.883         12.5 \n 9     5 2.33           2.14\n10   -10 2.3           -4.35\n# … with 336,766 more rows\n```\n:::\n:::\n\n\n### 유용한 기능\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### 몫\n5 %/% 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\n### 나머지\n5 %% 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\n### 그룹화 + 집계값 요약\nflights %>% \n  group_by(year, month, day) %>% \n  summarise(mean = mean(dep_delay))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'year', 'month'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 365 × 4\n# Groups:   year, month [12]\n    year month   day  mean\n   <int> <int> <int> <dbl>\n 1  2013     1     1    NA\n 2  2013     1     2    NA\n 3  2013     1     3    NA\n 4  2013     1     4    NA\n 5  2013     1     5    NA\n 6  2013     1     6    NA\n 7  2013     1     7    NA\n 8  2013     1     8    NA\n 9  2013     1     9    NA\n10  2013     1    10    NA\n# … with 355 more rows\n```\n:::\n\n```{.r .cell-code}\n### 그룹화 + 집계값 요약 + NA 제거\nflights %>% \n  group_by(year, month, day) %>% \n  summarise(mean = mean(dep_delay, na.rm = T))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'year', 'month'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 365 × 4\n# Groups:   year, month [12]\n    year month   day  mean\n   <int> <int> <int> <dbl>\n 1  2013     1     1 11.5 \n 2  2013     1     2 13.9 \n 3  2013     1     3 11.0 \n 4  2013     1     4  8.95\n 5  2013     1     5  5.73\n 6  2013     1     6  7.15\n 7  2013     1     7  5.42\n 8  2013     1     8  2.55\n 9  2013     1     9  2.28\n10  2013     1    10  2.84\n# … with 355 more rows\n```\n:::\n\n```{.r .cell-code}\n### !is.na : 결측값 아닌 값들만 출력\nflights %>% \n  filter(!is.na(dep_delay), !is.na(arr_delay))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 327,346 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      517        515       2     830     819      11 UA     \n 2  2013     1     1      533        529       4     850     830      20 UA     \n 3  2013     1     1      542        540       2     923     850      33 AA     \n 4  2013     1     1      544        545      -1    1004    1022     -18 B6     \n 5  2013     1     1      554        600      -6     812     837     -25 DL     \n 6  2013     1     1      554        558      -4     740     728      12 UA     \n 7  2013     1     1      555        600      -5     913     854      19 B6     \n 8  2013     1     1      557        600      -3     709     723     -14 EV     \n 9  2013     1     1      557        600      -3     838     846      -8 B6     \n10  2013     1     1      558        600      -2     753     745       8 AA     \n# … with 327,336 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n\n```{.r .cell-code}\n### 그룹화 해제 후 집계값 요약\ngroup <- flights %>%\n  group_by(year, month, day)\n\ngroup %>% \n  ungroup() %>% \n  summarise(flights = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  flights\n    <int>\n1  336776\n```\n:::\n:::\n\n\n### rank, slice\n- 행의 범위 지정\n\n::: {.cell}\n\n```{.r .cell-code}\n### 년/월/일자별 top10 'arr_delay' 출력\n\n### rank 사용\nflights %>% \n  group_by(year,month,day) %>% \n  filter(rank(desc(arr_delay)) < 11) %>% \n  select(year,month,day, arr_delay)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3,691 × 4\n# Groups:   year, month, day [365]\n    year month   day arr_delay\n   <int> <int> <int>     <dbl>\n 1  2013     1     1       851\n 2  2013     1     1       338\n 3  2013     1     1       263\n 4  2013     1     1       166\n 5  2013     1     1       174\n 6  2013     1     1       222\n 7  2013     1     1       250\n 8  2013     1     1       246\n 9  2013     1     1       191\n10  2013     1     1       456\n# … with 3,681 more rows\n```\n:::\n\n```{.r .cell-code}\n### slice 사용\nflights %>% \n  group_by(year,month,day) %>% \n  slice_max(arr_delay,n=10) %>% \n  select(year,month,day, arr_delay)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3,697 × 4\n# Groups:   year, month, day [365]\n    year month   day arr_delay\n   <int> <int> <int>     <dbl>\n 1  2013     1     1       851\n 2  2013     1     1       456\n 3  2013     1     1       338\n 4  2013     1     1       263\n 5  2013     1     1       250\n 6  2013     1     1       246\n 7  2013     1     1       222\n 8  2013     1     1       191\n 9  2013     1     1       174\n10  2013     1     1       166\n# … with 3,687 more rows\n```\n:::\n\n```{.r .cell-code}\n### 순위 책정\nflights %>% \n  select(year,month,day,arr_delay) %>% \n  arrange(year,month,day,desc(arr_delay)) %>% \n  group_by(year,month,day) %>% \n  mutate(rank = rank(desc(arr_delay)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 5\n# Groups:   year, month, day [365]\n    year month   day arr_delay  rank\n   <int> <int> <int>     <dbl> <dbl>\n 1  2013     1     1       851     1\n 2  2013     1     1       456     2\n 3  2013     1     1       338     3\n 4  2013     1     1       263     4\n 5  2013     1     1       250     5\n 6  2013     1     1       246     6\n 7  2013     1     1       222     7\n 8  2013     1     1       191     8\n 9  2013     1     1       174     9\n10  2013     1     1       166    10\n# … with 336,766 more rows\n```\n:::\n:::\n\n\n\n## Quiz 1\n- 1. 월별 비행기 개수를 구하시오\n- 2. dest(도착공항)별로 비행기가 10000대 이상 착륙한 공항으로 도착한 비행정보만 추출\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### 1\nflights %>%\n  group_by(month) %>% \n  summarise(fly_count = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 2\n   month fly_count\n   <int>     <int>\n 1     1     27004\n 2     2     24951\n 3     3     28834\n 4     4     28330\n 5     5     28796\n 6     6     28243\n 7     7     29425\n 8     8     29327\n 9     9     27574\n10    10     28889\n11    11     27268\n12    12     28135\n```\n:::\n\n```{.r .cell-code}\n### 2\nair <- flights %>% \n  group_by(dest) %>%\n  filter(n() >= 10000)\n\nair %>% nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 131440\n```\n:::\n\n```{.r .cell-code}\ntable(air$dest)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  ATL   BOS   CLT   FLL   LAX   MCO   MIA   ORD   SFO \n17215 15508 14064 12055 16174 14082 11728 17283 13331 \n```\n:::\n:::\n\n\n## Quiz 2\n다음은 미국 NBA 농구리그의 농구선수별 게임당 경기통계(stats)이다. \n\n- Pos: 농구에서 선수의 포지션\n- Age: 나이\n- Tm: 팀이름\n- 3P: 3점슛 성공횟수\n- 3PA: 3점슛 시도횟수\n- 3P%: 3점 성공률\n- PTS: 평균득점\n\n일 때 다음 물음에 답하시오.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstats <-  read_csv(\"C:/Users/seong taek/Desktop/3-1 Opendata_Analysis/opendata/nba2021_per_game.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 497 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): Player, Pos, Tm\ndbl (26): Age, G, GS, MP, FG, FGA, FG%, 3P, 3PA, 3P%, 2P, 2PA, 2P%, eFG%, FT...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nstats\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 497 × 29\n   Player      Pos     Age Tm        G    GS    MP    FG   FGA `FG%`  `3P` `3PA`\n   <chr>       <chr> <dbl> <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 Precious A… PF       21 MIA      28     2  14.6   2.6   4.4 0.59    0     0  \n 2 Jaylen Ada… PG       24 MIL       6     0   2.8   0.2   1.3 0.125   0     0.3\n 3 Steven Ada… C        27 NOP      27    27  28.1   3.5   5.8 0.603   0     0  \n 4 Bam Adebayo C        23 MIA      26    26  33.6   7.4  12.9 0.573   0.1   0.2\n 5 LaMarcus A… C        35 SAS      18    18  26.7   5.9  12.5 0.476   1.3   3.7\n 6 Ty-Shon Al… SG       22 PHO       3     0   2.7   0     1   0       0     0.3\n 7 Nickeil Al… SG       22 NOP      23     3  19.2   3.3   8.2 0.41    1     3.8\n 8 Grayson Al… SG       25 MEM      19     8  23.9   3.2   7.4 0.429   2.3   5.3\n 9 Jarrett Al… C        22 TOT      28    10  26.2   4.4   6.8 0.642   0     0.1\n10 Jarrett Al… C        22 BRK      12     5  26.7   3.7   5.4 0.677   0     0  \n# … with 487 more rows, and 17 more variables: `3P%` <dbl>, `2P` <dbl>,\n#   `2PA` <dbl>, `2P%` <dbl>, `eFG%` <dbl>, FT <dbl>, FTA <dbl>, `FT%` <dbl>,\n#   ORB <dbl>, DRB <dbl>, TRB <dbl>, AST <dbl>, STL <dbl>, BLK <dbl>,\n#   TOV <dbl>, PF <dbl>, PTS <dbl>\n```\n:::\n:::\n\n\n### 1. 위의 dataframe을 가지고 group 별 통계값을 계산하시오.\n- NBA 농구팀별(Tm)로 가장 평균득점(PTS)이 높은 사람과 낮은 사람을 추출하는 코드를 작성하시오.\n- 또한, 팀별로 평균득점 최대값과 최소값의 차이를 `gap`이라는 컬럼을 새로 만들어 나타내시오.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstats %>% \n  group_by(Tm) %>% \n  summarise(max_score = max(PTS),\n         min_score = min(PTS),\n         gap = max_score - min_score,\n         max_player = Player[which.max(PTS)],\n         min_player = Player[which.min(PTS)])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 31 × 6\n   Tm    max_score min_score   gap max_player     min_player       \n   <chr>     <dbl>     <dbl> <dbl> <chr>          <chr>            \n 1 ATL        26.5       1.8  24.7 Trae Young     Bruno Fernando   \n 2 BOS        25.9       2.4  23.5 Jaylen Brown   Tremont Waters   \n 3 BRK        29         0    29   Kevin Durant   Noah Vonleh      \n 4 CHI        28.5       1.5  27   Zach LaVine    Luke Kornet      \n 5 CHO        22.3       1    21.3 Gordon Hayward Vernon Carey Jr. \n 6 CLE        22.8       1.2  21.6 Collin Sexton  Marques Bolden   \n 7 DAL        29.1       1    28.1 Luka Dončić    Tyrell Terry     \n 8 DEN        27.4       0.6  26.8 Nikola Jokić   Vlatko Čančar    \n 9 DET        23.8       0    23.8 Jerami Grant   Deividas Sirvydis\n10 GSW        30         1.5  28.5 Stephen Curry  Nico Mannion     \n# … with 21 more rows\n```\n:::\n:::\n\n\n### 2. 각 포지션별로(Pos) 평균나이 대비 해당 선수의 나이가 몇배 높거나 낮은지 비율을 계산하시오 \n- 예를들어 PG 포지션의 평균나이는 27세이고, Chris Paul의 나이는 35세이므로, 비율은 35/27이 된다. \n- 모든 선수에 대해 이 비율을 `age_ratio_by_position`이라는 새로운 컬럼으로 저장하는 코드를 작성하시오.\n- 단 , 포지션 별로 비율이 가장 높은 한명만 추출\n\n::: {.cell}\n\n```{.r .cell-code}\nstats %>% \n  group_by(Pos) %>% \n  mutate(mean_age = mean(Age),\n         age_ratio_by_position = Age/mean_age) %>% \n  select(Player, Pos, Age, mean_age, age_ratio_by_position) %>% \n  arrange(-age_ratio_by_position) %>% \n  slice_max(age_ratio_by_position, n=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 5\n# Groups:   Pos [9]\n  Player          Pos     Age mean_age age_ratio_by_position\n  <chr>           <chr> <dbl>    <dbl>                 <dbl>\n1 Marc Gasol      C        36     26.1                  1.38\n2 Noah Vonleh     F        25     24                    1.04\n3 Norvel Pelle    F-C      27     27                    1   \n4 Derrick Rose    G        32     27                    1.19\n5 Carmelo Anthony PF       36     25.9                  1.39\n6 LeBron James    PG       36     25.6                  1.41\n7 Andre Iguodala  SF       37     25.4                  1.46\n8 Rodions Kurucs  SF-PF    22     22                    1   \n9 J.J. Redick     SG       36     25.3                  1.43\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}