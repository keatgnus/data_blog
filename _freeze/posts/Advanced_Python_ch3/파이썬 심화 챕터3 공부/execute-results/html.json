{
  "hash": "3ee381d263a6668ea4f9a2c837112896",
  "result": {
    "markdown": "---\ntitle: \"advanced_python CH3\"\nauthor: \"Seongtaek\"\ndate: \"2023-05-28\"\ncategories: [code, advanced_python, jupyter]\nimage: \"jup_image.jpg\"\ntoc: true\n---\n\n<table align=\"bottom\">\n  <td>\n    <a target=\"_blank\" href=\"http://localhost:8888/notebooks/3-1%20Python_Hard/%ED%8C%8C%EC%9D%B4%EC%8D%AC%20%EC%8B%AC%ED%99%94%20%EC%B1%95%ED%84%B03%20%EA%B3%B5%EB%B6%80.ipynb#\"><img\n    src = small_jup_image.jpg />Jupyter에서 실행하기</a>\n  </td>\n</table>\n\nBasic Grammar 2\n\n## Advanced Python CH3\n\n\n## Tuple\n\n불변한 데이터 타입, 변경 삭제 불가\n\n\n```python\ntup = 4,5,6\ntup\n```\n\n\n\n\n    (4, 5, 6)\n\n\n\n\n```python\nnested_tup = (4,5,6),(7,8)\nnested_tup\n```\n\n\n\n\n    ((4, 5, 6), (7, 8))\n\n\n\n\n```python\ntuple([4,0,2])\n```\n\n\n\n\n    (4, 0, 2)\n\n\n\n\n```python\ntup = tuple('study')\ntup\n```\n\n\n\n\n    ('s', 't', 'u', 'd', 'y')\n\n\n\n\n```python\ntup[0]\n```\n\n\n\n\n    's'\n\n\n\n\n```python\n### 잘못된 예시 : 변경 불가\n\ntup = tuple(['foo', [1,2], True])\ntup[2] = False\n```\n\n\n    ---------------------------------------------------------------------------\n\n    TypeError                                 Traceback (most recent call last)\n\n    Cell In[10], line 4\n          1 ### 잘못된 예시 : 변경 불가\n          3 tup = tuple(['foo', [1,2], True])\n    ----> 4 tup[2] = False\n    \n\n    TypeError: 'tuple' object does not support item assignment\n\n\n\n```python\ntup[1].append(3)\ntup\n```\n\n\n\n\n    ('foo', [1, 2, 3], True)\n\n\n\n\n```python\n(4, None, 'foo') + (6, 0) + ('bar',)\n```\n\n\n\n\n    (4, None, 'foo', 6, 0, 'bar')\n\n\n\n\n```python\n('foo','bar') * 4\n```\n\n\n\n\n    ('foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar')\n\n\n\n## Unpacking tuples \n\ntuple의 각 요소들을 변수에  할당\n\n\n```python\ntup = (4,5,6)\na,b,c = tup\nb\n```\n\n\n\n\n    5\n\n\n\n\n```python\ntup = 4,5,(6,7)\na,b,(c,d) = tup\na,b,c\n```\n\n\n\n\n    (4, 5, 6)\n\n\n\n\n```python\ntmp = a\na = b\nb = tmp\n\na, b =1,2\na\n```\n\n\n\n\n    1\n\n\n\n\n```python\nb,a = a,b\na\n```\n\n\n\n\n    2\n\n\n\n\n```python\nb\n```\n\n\n\n\n    1\n\n\n\n\n```python\nseq = [(1,2,3), (4,5,6), (7,8,9)]\nfor a,b,c in seq:\n    print('a={0}, b={1}, c={2}'.format(a,b,c))\n```\n\n    a=1, b=2, c=3\n    a=4, b=5, c=6\n    a=7, b=8, c=9\n    \n\n\n```python\nseq2 = [(4,4,4), (7,7,7), (9,9,9)]\nfor z,y,x in seq2:\n    print(\"z={0}, y={1}, x={2}\".format(z,y,x))\n```\n\n    z=4, y=4, x=4\n    z=7, y=7, x=7\n    z=9, y=9, x=9\n    \n\n\n```python\nfor a in seq:\n    print(a)\n```\n\n    (1, 2, 3)\n    (4, 5, 6)\n    (7, 8, 9)\n    \n\n\n```python\nfor c in seq2:\n    print(c)\n```\n\n    (4, 4, 4)\n    (7, 7, 7)\n    (9, 9, 9)\n    \n\n\n```python\n# * 마크 : * 부터 출력X\n\nvalues = 1,2,3,4,5\na,b, * rest = values\na,b\n```\n\n\n\n\n    (1, 2)\n\n\n\n\n```python\nrest\n```\n\n\n\n\n    [3, 4, 5]\n\n\n\n\n```python\na,b, *_ = values\n_\n```\n\n\n\n\n    [3, 4, 5]\n\n\n\n\n```python\nvalues2 = 9,9,0,1,1,5\nz,x, * hi = values2\nprint(z,x)\nprint(hi)\n```\n\n    9 9\n    [0, 1, 1, 5]\n    \n\n## Tuple methods\n\n\n```python\na = (1,2,2,2,3,4,2)\na.count(2)\n```\n\n\n\n\n    4\n\n\n\n### Quiz 1\n\n숫자 2가 몇개 있는지 세는 코드를 loop문 이용해 만들기\n\n\n```python\ncount = 0\nfor i in a:\n    if i ==2:\n        count +=1\nprint(count)\n```\n\n    4\n    \n\n## List\n\n\n```python\na_list = list([2,3,7,None])\ntup = ('foo','bar','baz')\nb_list = list(tup)\na_list, b_list\n```\n\n\n\n\n    ([2, 3, 7, None], ['foo', 'bar', 'baz'])\n\n\n\n\n```python\nb_list[1] = 'peekaboo'\nb_list\n```\n\n\n\n\n    ['foo', 'peekaboo', 'baz']\n\n\n\n\n```python\ngen = range(10)\ngen\nlist(gen)\n```\n\n\n\n\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n## Adding & Removing elements\n\n\n```python\nb_list.append('dwarf')\nb_list\n```\n\n\n\n\n    ['foo', 'peekaboo', 'baz', 'dwarf']\n\n\n\n\n```python\n# 자리 지정 추가\n\nb_list.insert(1, 'red')\nb_list\n```\n\n\n\n\n    ['foo', 'red', 'peekaboo', 'baz', 'dwarf']\n\n\n\n\n```python\n# pop : 제거\n\nb_list.pop(2)\nb_list\n```\n\n\n\n\n    ['foo', 'red', 'baz', 'dwarf']\n\n\n\n\n```python\n# 추가\n\nb_list.append('foo')\nb_list\n```\n\n\n\n\n    ['foo', 'red', 'baz', 'dwarf', 'foo']\n\n\n\n\n```python\n# 제거 : 앞에서부터 순서대로 삭제\n\nb_list.remove('foo')\nb_list\n```\n\n\n\n\n    ['red', 'baz', 'dwarf', 'foo']\n\n\n\n\n```python\n'dwarf' in b_list, 'dwarf' not in b_list\n```\n\n\n\n\n    (True, False)\n\n\n\n## Concatenating and combining lists\n\n\n```python\n[4, None, 'foo'] + [7,8,(2,3)]\n```\n\n\n\n\n    [4, None, 'foo', 7, 8, (2, 3)]\n\n\n\n\n```python\n# extend : 콘캣 함수\n\nx = [4, None,'foo']\nx.extend([7,8,(2,3)])\nx\n```\n\n\n\n\n    [4, None, 'foo', 7, 8, (2, 3)]\n\n\n\n## Sorting\n\n\n```python\n# 오름 차순\n\na = [7,2,5,1,3]\na.sort()\na\n```\n\n\n\n\n    [1, 2, 3, 5, 7]\n\n\n\n\n```python\n# key : 조건 ex) key=len 길이 순서\n# 길이 같으면 원래 순서 유지\n\nb = ['saw','small','He','foxes','six']\nb.sort(key=len)\nb\n```\n\n\n\n\n    ['He', 'saw', 'six', 'small', 'foxes']\n\n\n\n## Binary search and maintaining a sorted list\n\n\n```python\n# bisect : 특정 값이 들어갈 위치 탐색\n\nimport bisect\nc = [1,2,2,2,3,4,7]\nbisect.bisect(c,2), bisect.bisect(c,5)\n```\n\n\n\n\n    (4, 6)\n\n\n\n\n```python\n# insort : 특정 값이 들어갈 위치에 삽입\n\nbisect.insort(c,6)\nc\n```\n\n\n\n\n    [1, 2, 2, 2, 3, 4, 6, 7]\n\n\n\n## Slicing\n\n\n```python\nseq = [7,2,3,7,5,6,0,1]\nseq\n```\n\n\n\n\n    [7, 2, 3, 7, 5, 6, 0, 1]\n\n\n\n\n```python\n# 3번째 부터 4번째 전까지 (3번째) 선택 + 변경\n\nseq[3:4] = [6,3]\nseq\n```\n\n\n\n\n    [7, 2, 3, 6, 3, 5, 6, 0, 1]\n\n\n\n\n```python\n# 5번째 전까지 출력\n\nseq[:5]\n```\n\n\n\n\n    [7, 2, 3, 6, 3]\n\n\n\n\n```python\n# 3번째 부터 출력\n\nseq[3:]\n```\n\n\n\n\n    [6, 3, 5, 6, 0, 1]\n\n\n\n\n```python\n# 뒤에서 4개 출력\n\nseq[-4:]\n```\n\n\n\n\n    [5, 6, 0, 1]\n\n\n\n\n```python\n# 뒤에서 끝 2개 제외 6개 출력\n\nseq[-6:-2]\n```\n\n\n\n\n    [6, 3, 5, 6]\n\n\n\n\n```python\n# 앞에서부터 간격 2로 출력\n\nseq[::2]\n```\n\n\n\n\n    [7, 3, 3, 6, 1]\n\n\n\n\n```python\n# 뒤에서부터 간격 1로 출력\n\nseq[::-1]\n```\n\n\n\n\n    [1, 0, 6, 5, 3, 6, 3, 2, 7]\n\n\n\n### Quiz 2\n- 1,0,6,5 출력\n\n\n```python\nseq\n```\n\n\n\n\n    [7, 2, 3, 6, 3, 5, 6, 0, 1]\n\n\n\n\n```python\nseq[-4:][::-1]\n```\n\n\n\n\n    [1, 0, 6, 5]\n\n\n\n\n```python\nseq[:4:-1]\n```\n\n\n\n\n    [1, 0, 6, 5]\n\n\n\n## do something with value\n\n\n```python\n# enumerate() : 인덱스, 값 순회\n\nsome_list = ['foo','bar','baz']\nmapping = {}\nfor i, v in enumerate(some_list):\n    mapping[v] = i\nmapping\n```\n\n\n\n\n    {'foo': 0, 'bar': 1, 'baz': 2}\n\n\n\n\n```python\ns = ['asd', 'zxc','qwe']\nm = {}\nfor a,b in enumerate(s):\n    m[b] = a\nm   \n```\n\n\n\n\n    {'asd': 0, 'zxc': 1, 'qwe': 2}\n\n\n\n\n```python\n# sorted() : 작은것, 순서대로 정렬\n\nsorted([7,1,2,6,0,3,2]), sorted('horse race')\n```\n\n\n\n\n    ([0, 1, 2, 2, 3, 6, 7], [' ', 'a', 'c', 'e', 'e', 'h', 'o', 'r', 'r', 's'])\n\n\n\n\n```python\n# zip() : 순서쌍으로 묶기\n\nseq1 = ['foo','bar','baz']\nseq2 = ['one','two','three']\nzipped = zip(seq1, seq2)\nlist(zipped)\n```\n\n\n\n\n    [('foo', 'one'), ('bar', 'two'), ('baz', 'three')]\n\n\n\n\n```python\n# 개수 안 맞으면 최소 개수 출력\n\nseq3 = [False, True]\nlist(zip(seq1, seq2, seq3))\n```\n\n\n\n\n    [('foo', 'one', False), ('bar', 'two', True)]\n\n\n\n\n```python\n# enumerate() + zip() 활용\n\nfor i, (a,b) in enumerate(zip(seq1, seq2)):\n    print('{0}: {1}, {2}'.format(i,a,b))\n```\n\n    0: foo, one\n    1: bar, two\n    2: baz, three\n    \n\n\n```python\nfor a,(b,c,d) in enumerate(zip(seq1,seq2,seq3)):\n    print(\"{0}: {1}, {2}\".format(a,b,c,d))\n```\n\n    0: foo, one\n    1: bar, two\n    \n\n\n```python\n# reversed() : 거꾸로\n\nlist(reversed(range(10)))\n```\n\n\n\n\n    [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n\n\n\n## dict\n\n\n```python\n# key 값 : 'a','b', value 값 : 'some value',[1, 2, 3, 4]\n\nempty_dict = {}\nd1 = {'a' : 'some value', 'b' : [1,2,3,4]}\nd1\n```\n\n\n\n\n    {'a': 'some value', 'b': [1, 2, 3, 4]}\n\n\n\n\n```python\n# 딕셔너리에 새로운 key-value 쌍 추가\n\nd1['an integer'] = 7\nd1\n```\n\n\n\n\n    {'a': 'some value', 'b': [1, 2, 3, 4], 'an integer': 7}\n\n\n\n\n```python\n# key에 대한 value값 반환\n\nd1['b']\n```\n\n\n\n\n    [1, 2, 3, 4]\n\n\n\n\n```python\nd1['an integer']\n```\n\n\n\n\n    7\n\n\n\n\n```python\n'b' in d1\n```\n\n\n\n\n    True\n\n\n\n\n```python\nd1[5] = 'some value'\nd1\n```\n\n\n\n\n    {'a': 'some value', 'b': [1, 2, 3, 4], 'an integer': 7, 5: 'some value'}\n\n\n\n\n```python\nd1['dummy'] = 'another value'\nd1\n```\n\n\n\n\n    {'a': 'some value',\n     'b': [1, 2, 3, 4],\n     'an integer': 7,\n     5: 'some value',\n     'dummy': 'another value'}\n\n\n\n\n```python\n# del : 순서쌍 삭제\n\ndel d1[5]\nd1\n```\n\n\n\n\n    {'a': 'some value',\n     'b': [1, 2, 3, 4],\n     'an integer': 7,\n     'dummy': 'another value'}\n\n\n\n\n```python\n# dummy 순서쌍 삭제후, ret에 value값 할당\n\nret = d1.pop('dummy')\nret\n```\n\n\n\n\n    'another value'\n\n\n\n\n```python\nd1\n```\n\n\n\n\n    {'a': 'some value', 'b': [1, 2, 3, 4], 7: 'an integer'}\n\n\n\n\n```python\n# key값, value값 확인\n\nlist(d1.keys()), list(d1.values())\n```\n\n\n\n\n    (['a', 'b', 'an integer'], ['some value', [1, 2, 3, 4], 7])\n\n\n\n\n```python\nd1.update({'b' : 'foo', 'c' : 12})\nd1\n```\n\n\n\n\n    {'a': 'some value', 'b': 'foo', 'an integer': 7, 'c': 12}\n\n\n\n## Creating dicts from sequences\n\n\n```python\n# dict + zip\n\nmapping = dict(zip(range(5), reversed(range(5))))\nmapping\n```\n\n\n\n\n    {0: 4, 1: 3, 2: 2, 3: 1, 4: 0}\n\n\n\n## Default values\n\n\n```python\nwords = ['apple','bat','bar','atom','book']\nby_letter = {}\nfor word in words:\n    letter = word[0]\n    if letter not in by_letter:\n        by_letter[letter] = [word]\n    else:\n        by_letter[letter].append(word)\nby_letter\n```\n\n\n\n\n    {'a': ['apple', 'atom'], 'b': ['bat', 'bar', 'book']}\n\n\n\n## Valid dict key types\n\n\n```python\n# 해시값 반환\n\nhash('string'), hash((1,2,(2,3)))\n```\n\n\n\n\n    (-5910375871019062728, -9209053662355515447)\n\n\n\n\n```python\n# list형식은 변경 가능한 객체이므로 해시값 X\n\nhash((1,2,[2,3]))\n```\n\n\n    ---------------------------------------------------------------------------\n\n    TypeError                                 Traceback (most recent call last)\n\n    Cell In[178], line 3\n          1 # list형식은 변경 가능한 객체이므로 해시값 X\n    ----> 3 hash((1,2,[2,3]))\n    \n\n    TypeError: unhashable type: 'list'\n\n\n\n```python\nd = {}\nd[tuple([1,2,3])] = 5\nd\n```\n\n\n\n\n    {(1, 2, 3): 5}\n\n\n\n## set\n\n\n```python\n# 중복값 없이 나열\n\nset([2,2,2,1,3,3])\n```\n\n\n\n\n    {1, 2, 3}\n\n\n\n\n```python\n# 중괄호로 가능\n\n{2,2,2,1,3,3}\n```\n\n\n\n\n    {1, 2, 3}\n\n\n\n\n```python\n{11,22,11,22}\n```\n\n\n\n\n    {11, 22}\n\n\n\n\n```python\na = {1,2,3,4,5}\nb = {3,4,5,6,7,8}\n```\n\n\n```python\n# union(), | : 합집합 \n\na.union(b), a | b\n```\n\n\n\n\n    ({1, 2, 3, 4, 5, 6, 7, 8}, {1, 2, 3, 4, 5, 6, 7, 8})\n\n\n\n\n```python\n# intersection, & : 교집합 \n\na.intersection(b), a & b\n```\n\n\n\n\n    ({3, 4, 5}, {3, 4, 5})\n\n\n\n\n```python\nc = a.copy()\nc |= b\nc\n```\n\n\n\n\n    {1, 2, 3, 4, 5, 6, 7, 8}\n\n\n\n\n```python\nd = a.copy()\nd &= b      # d에 값 다시 할당\nd\n```\n\n\n\n\n    {3, 4, 5}\n\n\n\n\n```python\nmy_data = [1,2,3,4]\nmy_set = {tuple(my_data)}\nmy_set\n```\n\n\n\n\n    {(1, 2, 3, 4)}\n\n\n\n\n```python\n# 부분집합, 상위집합\na_set = {1,2,3,4,5}\n{1,2,3}.issubset(a_set), a_set.issuperset({1,2,3})\n```\n\n\n\n\n    (True, True)\n\n\n\n\n```python\n{1,2,3} == {3,2,1}\n```\n\n\n\n\n    True\n\n\n\n## List, Set, Dict Comprehensions\n\n\n```python\nstrings = ['a','as','bat','car','dove','python']\n[x.upper() for x in strings if len(x) >2]\n```\n\n\n\n\n    ['BAT', 'CAR', 'DOVE', 'PYTHON']\n\n\n\n\n```python\nunique_lengths = {len(x) for x in strings}\nunique_lengths\n```\n\n\n\n\n    {1, 2, 3, 4, 6}\n\n\n\n\n```python\nset(map(len, strings))\n```\n\n\n\n\n    {1, 2, 3, 4, 6}\n\n\n\n### Quiz 3\n- 각 객체가 몇번째에 있는지 출력\n\n\n```python\nloc_mapping = {val : index for index, val in enumerate(strings)}\nloc_mapping\n```\n\n\n\n\n    {'a': 0, 'as': 1, 'bat': 2, 'car': 3, 'dove': 4, 'python': 5}\n\n\n\n\n```python\n### 루프문 써서 만들기\n\nloc_mapping = {}\nfor index, val in enumerate(strings):\n    loc_mapping[val] = index\n\nloc_mapping\n```\n\n\n\n\n    {'a': 0, 'as': 1, 'bat': 2, 'car': 3, 'dove': 4, 'python': 5}\n\n\n\n### Quiz 4\n\n\n```python\ndef multiply_by_two(x):\n    return x * 2\n\nmy_list = [1,2,3,4,5]\nresult = list(map(multiply_by_two, my_list))\n\nprint(result)\n```\n\n    [2, 4, 6, 8, 10]\n    \n\n\n```python\n### lambda로 간결히 사용\n\nmy_list = [1,2,3,4,5]\nresult = list(map(lambda x: x*2, my_list))\nprint(result)\n```\n\n    [2, 4, 6, 8, 10]\n    \n\n\n```python\nresult2 = list(map(lambda x: x*3,a))\nresult2\n```\n\n\n\n\n    [3, 6, 9, 12, 15]\n\n\n\n\n## Nested list comprehensions\n\n\n```python\nall_data = [['John','Emily','Michael','Mary','Steven'],\n           ['Maria','Juan','Javier','Natalia','Pilar']]\n```\n\n\n```python\n### e가 한개 이상인것 추출\nnames_of_interest = []\n\nfor names in all_data:\n    enough_es = [name for name in names if name .count('e')>=1]\n    names_of_interest.extend(enough_es)\n\nnames_of_interest\n```\n\n\n\n\n    ['Michael', 'Steven', 'Javier']\n\n\n\n\n```python\nresult = [name for names in all_data for name in names\n          if name.count('e') >= 2]\nresult\n```\n\n\n\n\n    ['Steven']\n\n\n\n\n```python\nsome_tuples = [(1,2,3),(4,5,6),(7,8,9)]\nflattened = [x for tup in some_tuples for x in tup]\nflattened\n```\n\n\n\n\n    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n\n```python\nfruits = ['사과','바나나','수박','딸기']\nfor i in range(len(fruits)):\n    print(i,fruits[i])\n```\n\n    0 사과\n    1 바나나\n    2 수박\n    3 딸기\n    \n\n\n```python\nfor i, fruit in enumerate(fruits):\n    print(i,fruit)\n```\n\n    0 사과\n    1 바나나\n    2 수박\n    3 딸기\n    \n\n\n```python\n\n[[x for x in tup] for tup in some_tuples]\n```\n\n\n\n\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n\n\n\n\n## Functions\n\n\n```python\na = None\n\ndef bind_a_variable():\n    global a\n    a = []\n    \nbind_a_variable()\n\nprint(a)\n```\n\n    []\n    \n\n\n```python\nfunc()\n```\n\n\n```python\ndef func():\n    a = []\n    for i in range(5):\n        a.append(i)\n        \na\n```\n\n\n\n\n    []\n\n\n\n\n```python\na = []\ndef func():\n    for i in range(5):\n        a.append(i)\n        \na\n```\n\n\n\n\n    []\n\n\n\n\n```python\ndef f():\n    a=5\n    b=6\n    c=7\n    return {'a' : a, 'b' : b, 'c' : c}\n```\n\n## Functions are object\n\n\n```python\nstates = ['    Alabama ','Georgia!','Georgia','georgia','FlOrIda',\n         'sounth   carolina##', 'West virginia?']\nstates\n```\n\n\n\n\n    ['    Alabama ',\n     'Georgia!',\n     'Georgia',\n     'georgia',\n     'FlOrIda',\n     'sounth   carolina##',\n     'West virginia?']\n\n\n\n\n```python\nimport re\n\ndef clean_strings(strings):\n    result = []\n    for value in strings:\n        value = value.strip()            # 앞뒤 공백 제거\n        value = re.sub('[!#?]','',value) # !,#,? → 공백 대체\n        value = value.title()            # 문자열을 제목 형태로 (첫 대문자, 나머지 소문자) \n        result.append(value)             # 정리된 문자열 value를 result 리스트에 추가\n    return result\n\nclean_strings(states)\n```\n\n\n\n\n    ['Alabama',\n     'Georgia',\n     'Georgia',\n     'Georgia',\n     'Florida',\n     'Sounth   Carolina',\n     'West Virginia']\n\n\n\n\n```python\ndef remove_punctuation(value):\n    return re.sub('[!#?]','',value)\n\nclean_ops = [str.strip, remove_punctuation, str.title]\n\ndef clean_strings(strings, ops):\n    result = []\n    for value in strings:\n        for function in ops:\n            value = function(value)\n        result.append(value)\n    return result\n```\n\n\n```python\nclean_strings(states, clean_ops)\n```\n\n\n\n\n    ['Alabama',\n     'Georgia',\n     'Georgia',\n     'Georgia',\n     'Florida',\n     'Sounth   Carolina',\n     'West Virginia']\n\n\n\n\n```python\nfor x in map(remove_punctuation, states):\n    print(x)\n```\n\n        Alabama \n    Georgia\n    Georgia\n    georgia\n    FlOrIda\n    sounth   carolina\n    West virginia\n    \n\n\n```python\n### 첫 대문자, 나머지 소문자\n'good man'.capitalize()\n```\n\n\n\n\n    'Good man'\n\n\n\n\n```python\n### 각 단어 첫 대문자\n'good man'.title()\n```\n\n\n\n\n    'Good Man'\n\n\n\n## Anonymous (Lambda) Functions\n\n\n```python\ndef apply_to_list(some_list, f):\n    return [f(x) for x in some_list]\n\nints = [4,0,1,5,6]\n\napply_to_list(ints, lambda x: x*2)\n```\n\n\n\n\n    [8, 0, 2, 10, 12]\n\n\n\n\n```python\nstrings = ['foo','card','bar','aaaa','abab']\nstrings\n```\n\n\n\n\n    ['foo', 'card', 'bar', 'aaaa', 'abab']\n\n\n\n\n```python\nstrings.sort(key=lambda x: len(set(x)))\nstrings\n```\n\n\n\n\n    ['aaaa', 'foo', 'abab', 'bar', 'card']\n\n\n\n\n```python\nlist(map(lambda x: x+10, [1,2,3,4,5,6]))\n```\n\n\n\n\n    [11, 12, 13, 14, 15, 16]\n\n\n\n## Generators\n\n\n```python\nsome_dict = {'a':1, 'b':2, 'c':3}\nfor key in some_dict:\n    print(key)\n```\n\n    a\n    b\n    c\n    \n\n\n```python\ndict_iterator = iter(some_dict)\ndict_iterator\n```\n\n\n\n\n    <dict_keyiterator at 0x22ea41bfe50>\n\n\n\n\n```python\nlist(dict_iterator)\n```\n\n\n\n\n    ['a', 'b', 'c']\n\n\n\n\n```python\ndef squares(n=10):\n    print('Generating squares from 1 to {0}'.format(n**2))\n    for i in range(1, n+1):\n        yield i**2\n```\n\n\n```python\ngen = squares()\ngen\n```\n\n\n\n\n    <generator object squares at 0x0000022EA41D5AC0>\n\n\n\n\n```python\nfor x in gen:\n    print(x, end='')\n```\n\n    Generating squares from 1 to 100\n    149162536496481100\n\n## Generator expressions\n\n\n```python\ngen = (x **2 for x in range(100))\ngen\n```\n\n\n\n\n    <generator object <genexpr> at 0x0000022EA41D5EB0>\n\n\n\n\n```python\nsum(x**2 for x in range(100))\ndict((i, i**2) for i in range(5))\n```\n\n\n\n\n    {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}\n\n\n\n## itertools module\n\n\n```python\nimport itertools\nfirst_letter = lambda x: x[0]\nnames = ['Alan','Adam','Wes','Will','Albert','Steven']\nfor letter, names in itertools.groupby(names, first_letter):\n    print(letter, list(names))\n```\n\n    A ['Alan', 'Adam']\n    W ['Wes', 'Will']\n    A ['Albert']\n    S ['Steven']\n    \n\n## Errors & Exception Handling\n\n\n```python\nfloat('1.2345')\n```\n\n\n\n\n    1.2345\n\n\n\n\n```python\nfloat('something')\n```\n\n\n    ---------------------------------------------------------------------------\n\n    ValueError                                Traceback (most recent call last)\n\n    Cell In[125], line 1\n    ----> 1 float('something')\n    \n\n    ValueError: could not convert string to float: 'something'\n\n\n\n```python\ndef attempt_float(x):\n    try:\n        return float(x)\n    except:\n        return x\n```\n\n\n```python\nattempt_float('1.2345')\n```\n\n\n\n\n    1.2345\n\n\n\n\n```python\nattempt_float('something')\n```\n\n\n\n\n    'something'\n\n\n\n\n```python\nfloat((1,2))\n```\n\n\n    ---------------------------------------------------------------------------\n\n    TypeError                                 Traceback (most recent call last)\n\n    Cell In[129], line 1\n    ----> 1 float((1,2))\n    \n\n    TypeError: float() argument must be a string or a number, not 'tuple'\n\n\n\n```python\ndef attempt_float(x):\n    try:\n        return float(x)\n    except (TypeError, ValueError):\n        return x\n```\n\n\n```python\nattempt_float('1.2345')\n```\n\n\n\n\n    1.2345\n\n",
    "supporting": [
      "파이썬 심화 챕터3 공부_files"
    ],
    "filters": [],
    "includes": {}
  }
}