[
  {
    "objectID": "posts/Data_Visualize_mytown/기말고사 제출.html",
    "href": "posts/Data_Visualize_mytown/기말고사 제출.html",
    "title": "Data_Visualize_mytown",
    "section": "",
    "text": "HTML파일로 보기\nVisualizing My Neighborhood"
  },
  {
    "objectID": "posts/Data_Visualize_mytown/기말고사 제출.html#광주-지역정보-시각화",
    "href": "posts/Data_Visualize_mytown/기말고사 제출.html#광주-지역정보-시각화",
    "title": "Data_Visualize_mytown",
    "section": "1 광주 지역정보 시각화",
    "text": "1 광주 지역정보 시각화\n\n1.1 패키지\n\n#install.packages(\"ggtext\")\nlibrary(dplyr)\nlibrary(ggtext)\nlibrary(tmap)\nlibrary(rgdal)\nlibrary(sf)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(viridis)\nlibrary(dplyr)\n\n\n\n1.2 데이터 불러오기\n\ngwang_ju <- readOGR(\"C:/Users/seong taek/Desktop/3-1 DataVisualize/data_visualize/LSMD_ADM_SECT_UMD_29.shp\",encoding = \"euc-kr\")\n#> OGR data source with driver: ESRI Shapefile \n#> Source: \"C:\\Users\\seong taek\\Desktop\\3-1 DataVisualize\\data_visualize\\LSMD_ADM_SECT_UMD_29.shp\", layer: \"LSMD_ADM_SECT_UMD_29\"\n#> with 203 features\n#> It has 5 fields\ngwang_ju <- gwang_ju %>% st_as_sf()\ngwang_ju %>% head()\n#> Simple feature collection with 6 features and 5 fields\n#> Geometry type: MULTIPOLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: 922908.9 ymin: 1685904 xmax: 937583.2 ymax: 1691397\n#> Projected CRS: Korea 2000 / Unified CS\n#>     EMD_CD EMD_NM SGG_OID COL_ADM_SE  GID                       geometry\n#> 0 29200202 오선동    3233      29200 3247 MULTIPOLYGON (((934856 1689...\n#> 1 29200178 동림동    3232      29200 3248 MULTIPOLYGON (((925403.5 16...\n#> 2 29200177 양산동    3231      29200 3249 MULTIPOLYGON (((925032.9 16...\n#> 3 29200176 덕림동    1605      29200 3250 MULTIPOLYGON (((925606 1686...\n#> 4 29200175 동호동    1604      29200 3251 MULTIPOLYGON (((925167 1688...\n#> 5 29200174 명도동    3228      29200 3252 MULTIPOLYGON (((925936.6 16...\n\ngwang_ju_data <- read.csv('C:/Users/seong taek/Desktop/3-1 DataVisualize/data_visualize/소상공인시장진흥공단_상가(상권)정보_광주_202303.csv')\ngwang_ju_data %>% head()\n#>           상가업소번호                           상호명 지점명\n#> 1 MA0101202210A0085370                           수헤어       \n#> 2 MA0101202210A0040614                           몰카페       \n#> 3 MA0101202210A0081304                   명품고로케NO.1       \n#> 4 MA0101202210A0051646                       엄마손팥죽       \n#> 5 MA010120220805431082 여유드림24시무인셀프빨래방소태점       \n#> 6 MA010120220805431357                         위고키친       \n#>   상권업종대분류코드 상권업종대분류명 상권업종중분류코드 상권업종중분류명\n#> 1                 S2       수리·개인               S207       이용·미용\n#> 2                 I2             음식               I212        비알코올 \n#> 3                 I2             음식               I210        기타 간이\n#> 4                 I2             음식               I201             한식\n#> 5                 S2       수리·개인               S209             세탁\n#> 6                 I2             음식               I201             한식\n#>   상권업종소분류코드 상권업종소분류명 표준산업분류코드\n#> 1             S20701           미용실           S96112\n#> 2             I21201             카페           I56221\n#> 3             I21001          빵/도넛           I56191\n#> 4             I20101      백반/한정식           I56194\n#> 5             S20902      셀프 빨래방           S96912\n#> 6             I20101      백반/한정식           I56111\n#>               표준산업분류명 시도코드     시도명 시군구코드 시군구명 행정동코드\n#> 1                두발 미용업       29 광주광역시      29170     북구   29170590\n#> 2                커피 전문점       29 광주광역시      29200   광산구   29200620\n#> 3                   제과점업       29 광주광역시      29200   광산구   29200565\n#> 4 김밥 및 기타 간이 음식점업       29 광주광역시      29155     남구   29155705\n#> 5              가정용 세탁업       29 광주광역시      29110     동구   29110730\n#> 6         한식 일반 음식점업       29 광주광역시      29170     북구   29170530\n#>   행정동명 법정동코드 법정동명     지번코드 대지구분코드 대지구분명 지번본번지\n#> 1   용봉동 2917010700   용봉동 2.917011e+18            1       대지        405\n#> 2   비아동 2920011300   도천동 2.920011e+18            1       대지        380\n#> 3   어룡동 2920010800   소촌동 2.920011e+18            1       대지        287\n#> 4   진월동 2915510800   진월동 2.915511e+18            1       대지        369\n#> 5  지원1동 2911011900   소태동 2.911012e+18            1       대지        617\n#> 6  중흥3동 2917010100   중흥동 2.917010e+18            1       대지        271\n#>   지번부번지                       지번주소   도로명코드\n#> 1         NA     광주광역시 북구 용봉동 405 291703162020\n#> 2          2 광주광역시 광산구 도천동 380-2 292003163014\n#> 3          5 광주광역시 광산구 소촌동 287-5 292004289285\n#> 4          2   광주광역시 남구 진월동 369-2 291553161002\n#> 5          3   광주광역시 동구 소태동 617-3 291103159017\n#> 6         22  광주광역시 북구 중흥동 271-22 291704286364\n#>                           도로명 건물본번지 건물부번지 건물관리번호\n#> 1         광주광역시 북구 반룡로         57         NA 2.917011e+24\n#> 2       광주광역시 광산구 사암로        790         NA 2.920011e+24\n#> 3 광주광역시 광산구 소촌로86번길         11         NA 2.920011e+24\n#> 4         광주광역시 남구 금당로         47         NA 2.915511e+24\n#> 5         광주광역시 동구 학소로         73         NA 2.911012e+24\n#> 6   광주광역시 북구 서방로31번길          5         NA 2.917010e+24\n#>                   건물명                        도로명주소 구우편번호\n#> 1 용봉동유창하이리빙맨션         광주광역시 북구 반룡로 57     500843\n#> 2                             광주광역시 광산구 사암로 790     506300\n#> 3                        광주광역시 광산구 소촌로86번길 11     506802\n#> 4               철물전기         광주광역시 남구 금당로 47     503842\n#> 5                                광주광역시 동구 학소로 73     501828\n#> 6                           광주광역시 북구 서방로31번길 5     500873\n#>   신우편번호 동정보 층정보 호정보     경도     위도\n#> 1      61182     NA      1     NA 126.9044 35.17869\n#> 2      62244     NA            NA 126.8187 35.21305\n#> 3      62385     NA      1     NA 126.7942 35.15232\n#> 4      61735     NA      1     NA 126.8957 35.12114\n#> 5      61500     NA      1     NA 126.9341 35.12629\n#> 6      61190     NA      1     NA 126.9165 35.17342\n\n\n\n1.3 광주지역 ‘구’ 분류\n\ngwang_ju %>% ggplot(aes(fill = COL_ADM_SE)) +\n  geom_sf() +\n  theme_minimal() +\n  labs(title = \"광주\") +\n  scale_fill_discrete(name = \"구\",\n                      labels = c(\"동구\",\"서구\",\"남구\",\"북구\",\"광산구\"))\n\n\n\n\n\n\n1.4 광주지역 ‘동’ 분류\n\ngwang_ju_dong <- gwang_ju %>% \n  ggplot(aes(fill=EMD_NM))+\n  geom_sf()+\n  geom_sf_text(mapping = aes(label = EMD_NM))+\n  labs(title = \"광주\")+\n  theme_minimal()+\n  scale_fill_discrete(name = \"동\") \n  \ngwang_ju_dong %>% ggplotly()\n\n\n\n\n\n\n\n1.5 광주광역시 북구 문흥동\n\nmy_dong <- gwang_ju %>%\n  filter(EMD_NM == \"문흥동\") %>%\n  ggplot(aes(fill=EMD_NM)) +\n  geom_sf() +\n  geom_sf_text(mapping = aes(label = EMD_NM)) +\n  labs(title = \"광주광역시 북구 문흥동\") +\n  theme_minimal() +\n  scale_fill_discrete(name = \"동\")\n\nmy_dong %>% ggplotly()\n\n\n\n\n\n\n\n1.6 전처리\n\n각종 편의시설\n\n\nlibrary(RColorBrewer)\n# 문흥동 데이터만 추출\ngwang_ju_data_mydong <- gwang_ju_data %>% \n  filter(gwang_ju_data$법정동명 == \"문흥동\") %>% \n   st_as_sf(coords = c(\"경도\", \"위도\"))\n\nst_crs(gwang_ju_data_mydong) <- 4737\n\n# 문흥동 지도\ngwang_ju_mydong <- gwang_ju %>% \n  filter(gwang_ju$EMD_NM == \"문흥동\")\n\n# 문흥동에 있는 상권업종소분류명 추출\nexisting_categories <- unique(gwang_ju_data_mydong$상권업종소분류명)\nexisting_categories %>% head()\n#> [1] \"편의점\"             \"미용실\"             \"독서실/스터디 카페\"\n#> [4] \"부동산 중개/대리업\" \"곱창 전골/구이\"     \"백반/한정식\"\n\n# viridis 색상 팔레트 사용 (146개의 색상)\ncolors <- magma(length(existing_categories))\n\n# 상권업종소분류명과 색상을 매칭하는 데이터프레임 생성\ncolor_mapping <- data.frame(상권업종소분류명 = existing_categories,\n                            색상 = colors)\n\ncolor_mapping %>% head()\n#>     상권업종소분류명      색상\n#> 1             편의점 #000004FF\n#> 2             미용실 #010106FF\n#> 3 독서실/스터디 카페 #020109FF\n#> 4 부동산 중개/대리업 #02020CFF\n#> 5     곱창 전골/구이 #03030FFF\n#> 6        백반/한정식 #040414FF\n\n\n\n1.7 동네 편의시설 시각화\n\nmy_dong2 <- ggplot() +\n  geom_sf(data = gwang_ju_mydong, fill = 'grey90') +\n  geom_sf(data = gwang_ju_data_mydong, aes(color = 상권업종소분류명), size = 1.5) +\n  scale_color_manual(values = color_mapping$색상,\n                     breaks = color_mapping$상권업종소분류명,\n                     labels = color_mapping$상권업종소분류명,\n                     drop = TRUE) +\n  theme_minimal() +\n  labs(title = \"문흥동 내 편의시설\")\n\nmy_dong2 %>% ggplotly()"
  },
  {
    "objectID": "posts/Data_Visualize_mytown/기말고사 제출.html#tmap-시각화",
    "href": "posts/Data_Visualize_mytown/기말고사 제출.html#tmap-시각화",
    "title": "Data_Visualize_mytown",
    "section": "2 tmap 시각화",
    "text": "2 tmap 시각화\n\nOpenStreetMap\n\n\ntmap_mode(\"view\")\n#> tmap mode set to interactive viewing\n\ntmap_options(check.and.fix = TRUE)\n\ntm_shape(gwang_ju_mydong[\"EMD_NM\"])+\n  tm_polygons(col=\"white\",alpha = 0.3)+\n  tm_shape(gwang_ju_data_mydong[\"상권업종소분류명\"])+\n  tm_symbols(shape = 2, col = \"royalblue\", size = 0.8, alpha = 0.5)\n#> Symbol shapes other than circles or icons are not supported in view mode."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nData_Visualize_mytown\n\n\n\n\n\n\n\ncode\n\n\ndata_visualization\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nJun 15, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nadvanced_python CH3\n\n\n\n\n\n\n\ncode\n\n\nadvanced_python\n\n\njupyter\n\n\n\n\n\n\n\n\n\n\n\nMay 28, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nadvanced_python CH4\n\n\n\n\n\n\n\ncode\n\n\nadvanced_python\n\n\njupyter\n\n\n\n\n\n\n\n\n\n\n\nMay 28, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Mining CH3\n\n\n\n\n\n\n\ncode\n\n\ndata_mining\n\n\njupyter\n\n\n\n\n\n\n\n\n\n\n\nApr 27, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nSpatial_Info_Analysis CH2\n\n\n\n\n\n\n\ncode\n\n\nSpatial_Info_Analysis\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 22, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nSpatial_Info_Analysis CH1\n\n\n\n\n\n\n\ncode\n\n\nSpatial_Info_Analysis\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 20, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nOpendata_Analysis CH3\n\n\n\n\n\n\n\ncode\n\n\nopendata_analysis\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 16, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nOpendata_Analysis CH4\n\n\n\n\n\n\n\ncode\n\n\nopendata_analysis\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 16, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nOpendata_Analysis CH5\n\n\n\n\n\n\n\ncode\n\n\nopendata_analysis\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 16, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nOpendata_Analysis CH2\n\n\n\n\n\n\n\ncode\n\n\nopendata_analysis\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 15, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nOpendata_Analysis CH1\n\n\n\n\n\n\n\ncode\n\n\nopendata_analysis\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 14, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Visualization CH7\n\n\n\n\n\n\n\ncode\n\n\ndata_visualization\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 13, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Visualization CH6\n\n\n\n\n\n\n\ncode\n\n\ndata_visualization\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 12, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Visualization CH5\n\n\n\n\n\n\n\ncode\n\n\ndata_visualization\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 6, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Visualization CH4\n\n\n\n\n\n\n\ncode\n\n\ndata_visualization\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 5, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Mining CH1\n\n\n\n\n\n\n\ncode\n\n\ndata_mining\n\n\njupyter\n\n\n\n\n\n\n\n\n\n\n\nApr 4, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Mining CH2\n\n\n\n\n\n\n\ncode\n\n\ndata_mining\n\n\njupyter\n\n\n\n\n\n\n\n\n\n\n\nApr 4, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Visualization CH3\n\n\n\n\n\n\n\ncode\n\n\ndata_visualization\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 4, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Visualization CH2\n\n\n\n\n\n\n\ncode\n\n\ndata_visualization\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nMar 30, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Visualization CH1\n\n\n\n\n\n\n\ncode\n\n\ndata_visualization\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nMar 29, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nadvanced_python CH2\n\n\n\n\n\n\n\ncode\n\n\nadvanced_python\n\n\njupyter\n\n\n\n\n\n\n\n\n\n\n\nMar 28, 2023\n\n\nSeongtaek\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Data_Visualize_Ch7/figure 4.4 ,  figure 4.6.html",
    "href": "posts/Data_Visualize_Ch7/figure 4.4 ,  figure 4.6.html",
    "title": "Data_Visualization CH7",
    "section": "",
    "text": "HTML파일로 보기\nFigure 4.4, Figure 4.6"
  },
  {
    "objectID": "posts/Data_Visualize_Ch7/figure 4.4 ,  figure 4.6.html#데이터-시각화-실습-지역-정보-시각화-figure-4.4-4.6",
    "href": "posts/Data_Visualize_Ch7/figure 4.4 ,  figure 4.6.html#데이터-시각화-실습-지역-정보-시각화-figure-4.4-4.6",
    "title": "Data_Visualization CH7",
    "section": "1 데이터 시각화 실습 : 지역 정보 시각화 Figure 4.4, 4.6",
    "text": "1 데이터 시각화 실습 : 지역 정보 시각화 Figure 4.4, 4.6\n\n1.1 패키지 불러오기\n\n#install.packages(\"geojsonsf\")\nlibrary(geojsonsf)\nlibrary(sf)\n#> Linking to GEOS 3.9.3, GDAL 3.5.2, PROJ 8.2.1; sf_use_s2() is TRUE\nlibrary(ggplot2)\nlibrary(dplyr)\n#> \n#> Attaching package: 'dplyr'\n#> The following objects are masked from 'package:stats':\n#> \n#>     filter, lag\n#> The following objects are masked from 'package:base':\n#> \n#>     intersect, setdiff, setequal, union\nlibrary(colorspace)\n\n\n\n1.2 데이터 불러오기\n\nKOR_SIDO.json : 대한민국 시,도 정보\nKOR_SIGU.json : 대한민국 시,군,구 정보\n202202_주민등록인구및세대현황.csv\n\n\nKOR_SIDO <- geojson_sf('C:/Users/seong taek/Desktop/3-1 DataVisualize/data_visualize/KOR_SIDO.json')\n\nKOR_SIGU <- geojson_sf('C:/Users/seong taek/Desktop/3-1 DataVisualize/data_visualize/KOR_SIGU.json')\n\nkor_202202 <- read.csv('C:/Users/seong taek/Desktop/3-1 DataVisualize/data_visualize/202202_주민등록인구및세대현황.csv')\n\n\n\n1.3 전처리\n\n### 컬럼 클래스(타입) 확인\nkor_202202 %>% sapply(class)\n#>      행정구역 행정구역_코드      총인구수        세대수   세대당_인구 \n#>   \"character\"     \"numeric\"     \"numeric\"     \"numeric\"     \"numeric\" \n#>   남자_인구수   여자_인구수     남여_비율 \n#>     \"numeric\"     \"numeric\"     \"numeric\"\n\n### `행정구역_코드`를 numeric → character형식으로 변환\nkor_202202$행정구역_코드 <- kor_202202$행정구역_코드 %>% format()\n\nuse_map <- KOR_SIGU\nuse_map %>% head()\n#> Simple feature collection with 6 features and 3 fields\n#> Geometry type: POLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: 127.5071 ymin: 37.06363 xmax: 129.1596 ymax: 38.23041\n#> Geodetic CRS:  WGS 84\n#>   SIG_CD   SIG_ENG_NM SIG_KOR_NM                       geometry\n#> 1  42110 Chuncheon-si     춘천시 POLYGON ((127.6047 38.07265...\n#> 2  42130     Wonju-si     원주시 POLYGON ((128.1086 37.2988,...\n#> 3  42150 Gangneung-si     강릉시 POLYGON ((129.0479 37.64961...\n#> 4  42170   Donghae-si     동해시 POLYGON ((129.1596 37.47574...\n#> 5  42190   Taebaek-si     태백시 POLYGON ((129.0121 37.31012...\n#> 6  42210    Sokcho-si     속초시 POLYGON ((128.6087 38.16128...\n\n### 병합할 컬럼 동일화\nuse_map$행정구역_코드 <- paste(use_map$SIG_CD, \"00000\", sep = \"\")\n\n### 공통된 '행정구역_코드'를 기준으로 병합 \nuse_map <- use_map %>% merge(kor_202202, by = \"행정구역_코드\", all.x=T)\n\n\n\n1.4 Figure 4.4 - 총 인구수\n\n사용 데이터셋 : use_map\nfill : 총인구수\ngeom_sf (지리적 객체 그래프)\n\n경계선 색상\n\ncoord_sf\n\n지도 좌표계 제거\n\nscale_fill_distiller\n\n이름 : “인구수”\n팔레트 색상 설정\n연속형 색상 척도 사용\n결측값 색상 설정\n색상 척도 방향 설정 : 작은 값 → 큰 값\n색상 척도 눈금 설정\n색상 척도 라벨 설정, 천 단위 옵션, 지수표기법 미사용\n\n테마 : 미니멀\n테마 옵션\n\n범례 제목 위치 지정\n범례 텍스트 위치 지정\n범례 위치 지정\n\n\n\nggplot(use_map, aes(fill = 총인구수)) +\ngeom_sf(color = \"gray90\") +\ncoord_sf(datum = NA) +\nscale_fill_distiller(name = \"인구수\",\n                      palette = \"Blues\",\n                      type = \"seq\",\n                      na.value = \"grey60\",\n                      direction = 1,\n                      breaks = seq(0,10,2) * 1e+5,\n                      labels = format(seq(0,10,2) * 1e+5,\n                                      big.mark = \",\", scientific = F),) +\ntheme_minimal() +\ntheme(legend.title.align = 0.5,\n      legend.text.align = 1.0,\n      legend.position = c(.85, .2))\n\n\n\n\n\n\n1.5 광주만 뽑기\n\n### filter 이용 광주지역만 추출\nuse_map %>%\n  filter(substr(행정구역_코드,1,2) == \"29\") %>% \n  ggplot(aes(fill = 총인구수)) +\n  geom_sf(color = \"gray90\") +\n  coord_sf(datum = NA) +\n  scale_fill_distiller(name = \"인구수\",\n                       palette = \"Blues\",\n                       type = \"seq\",\n                       na.value = \"grey60\",\n                       direction = 1,\n                       breaks = seq(0,10,2) * 1e+5,\n                       labels = format(seq(0,10,2) * 1e+5,\n                                       big.mark = \",\", scientific = F),) +\n  theme_minimal() +\n  theme(legend.title.align = 0.5,\n        legend.text.align = 1.0,\n        legend.position = c(1, .2))\n\n\n\n\n\n\n1.6 Figure 4.6 - 남여 비율\n\n사용 데이터셋 : use_map\nfill : 남여_비율\ngeom_sf (지리적 객체 그래프)\ncoord_sf\n\n지도 좌표계 제거\n\nscale_fill_continuous_diverging\n\n이름 : “남자/여자”\n팔레트 색상 설정\n색상 척도 : 중앙값 기준\n색상 척도 범위 설정\n색상 척도 순서 반전\n\n테마 : 미니멀\n테마 옵션\n\n범례 제목 위치 지정\n범례 텍스트 위치 지정\n범례 위치 지정\n\n\n\nggplot(use_map, aes(fill = 남여_비율)) +\ngeom_sf() +\ncoord_sf(datum = NA) +\nscale_fill_continuous_diverging(name = \"남자/여자\",\n                                palette = \"Blue-Red\",\n                                mid = 1,\n                                limits = 1 + c(-1, 1)*0.35,\n                                rev = T) +\ntheme_minimal() +\ntheme(legend.title.align = 0.5,\n      legend.text.align = 1.0,\n      legend.position = c(.95, .3))"
  },
  {
    "objectID": "posts/Data_Visualize_Ch7/figure 4.4 ,  figure 4.6.html#과제",
    "href": "posts/Data_Visualize_Ch7/figure 4.4 ,  figure 4.6.html#과제",
    "title": "Data_Visualization CH7",
    "section": "2 과제",
    "text": "2 과제\n\n2023년3월 총인구수 - Figure 4.4\n\n\n2.1 데이터 불러오기\n\n202303_202303_주민등록인구및세대현황_월간.csv\nKOR_SIGU.json : 대한민국 시,군,구 정보\n\n\nkor_202303 <- read.csv('C:/Users/seong taek/Desktop/3-1 DataVisualize/data_visualize/202303_202303_주민등록인구및세대현황_월간.csv',fileEncoding = \"CP949\")\nKOR_SIGU <- geojson_sf('C:/Users/seong taek/Desktop/3-1 DataVisualize/data_visualize/KOR_SIGU.json')\n\nkor_202303 %>% head()\n#>                         행정구역 X2023년03월_총인구수 X2023년03월_세대수\n#> 1       서울특별시  (1100000000)            9,426,404          4,463,385\n#> 2 서울특별시 종로구 (1111000000)              141,060             72,679\n#> 3   서울특별시 중구 (1114000000)              120,963             63,862\n#> 4 서울특별시 용산구 (1117000000)              217,756            109,735\n#> 5 서울특별시 성동구 (1120000000)              280,240            133,513\n#> 6 서울특별시 광진구 (1121500000)              336,801            169,787\n#>   X2023년03월_세대당.인구 X2023년03월_남자.인구수 X2023년03월_여자.인구수\n#> 1                    2.11               4,566,299               4,860,105\n#> 2                    1.94                  68,170                  72,890\n#> 3                    1.89                  58,699                  62,264\n#> 4                    1.98                 104,640                 113,116\n#> 5                    2.10                 136,233                 144,007\n#> 6                    1.98                 162,209                 174,592\n#>   X2023년03월_남여.비율\n#> 1                  0.94\n#> 2                  0.94\n#> 3                  0.94\n#> 4                  0.93\n#> 5                  0.95\n#> 6                  0.93\n\nKOR_SIGU %>% head()\n#> Simple feature collection with 6 features and 3 fields\n#> Geometry type: POLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: 127.5071 ymin: 37.06363 xmax: 129.1596 ymax: 38.23041\n#> Geodetic CRS:  WGS 84\n#>   SIG_CD   SIG_ENG_NM SIG_KOR_NM                       geometry\n#> 1  42110 Chuncheon-si     춘천시 POLYGON ((127.6047 38.07265...\n#> 2  42130     Wonju-si     원주시 POLYGON ((128.1086 37.2988,...\n#> 3  42150 Gangneung-si     강릉시 POLYGON ((129.0479 37.64961...\n#> 4  42170   Donghae-si     동해시 POLYGON ((129.1596 37.47574...\n#> 5  42190   Taebaek-si     태백시 POLYGON ((129.0121 37.31012...\n#> 6  42210    Sokcho-si     속초시 POLYGON ((128.6087 38.16128...\n\n\n\n2.2 전처리\n\n#install.packages(\"stringr\")\nlibrary(stringr) # 고급 문자 추출 패키지\n#> Warning: package 'stringr' was built under R version 4.2.2\n\n### 쉼표없는 총인구수 컬럼 생성\n### 행정구역 코드만 추출한 컬럼 생성\nkor_202303 <- kor_202303 %>% \n  mutate(총인구수_202303 = gsub(\",\",\"\", X2023년03월_총인구수),\n         행정구역_코드 = str_sub(kor_202303$행정구역, -11, -2))\n\n### 컬럼 클래스(타입) 확인\nkor_202303 %>% sapply(class)\n#>                행정구역    X2023년03월_총인구수      X2023년03월_세대수 \n#>             \"character\"             \"character\"             \"character\" \n#> X2023년03월_세대당.인구 X2023년03월_남자.인구수 X2023년03월_여자.인구수 \n#>               \"numeric\"             \"character\"             \"character\" \n#>   X2023년03월_남여.비율         총인구수_202303           행정구역_코드 \n#>               \"numeric\"             \"character\"             \"character\"\n\n### '총인구수_202303' 컬럼 character → numeric 변환\nkor_202303$총인구수_202303 <- kor_202303$총인구수_202303 %>% as.numeric()\n\n### 병합할 컬럼 동일화\nKOR_SIGU_use <- KOR_SIGU\nKOR_SIGU_use$행정구역_코드 <- paste(KOR_SIGU_use$SIG_CD, \"00000\", sep = \"\")\n\nkor_202303 %>% head()\n#>                         행정구역 X2023년03월_총인구수 X2023년03월_세대수\n#> 1       서울특별시  (1100000000)            9,426,404          4,463,385\n#> 2 서울특별시 종로구 (1111000000)              141,060             72,679\n#> 3   서울특별시 중구 (1114000000)              120,963             63,862\n#> 4 서울특별시 용산구 (1117000000)              217,756            109,735\n#> 5 서울특별시 성동구 (1120000000)              280,240            133,513\n#> 6 서울특별시 광진구 (1121500000)              336,801            169,787\n#>   X2023년03월_세대당.인구 X2023년03월_남자.인구수 X2023년03월_여자.인구수\n#> 1                    2.11               4,566,299               4,860,105\n#> 2                    1.94                  68,170                  72,890\n#> 3                    1.89                  58,699                  62,264\n#> 4                    1.98                 104,640                 113,116\n#> 5                    2.10                 136,233                 144,007\n#> 6                    1.98                 162,209                 174,592\n#>   X2023년03월_남여.비율 총인구수_202303 행정구역_코드\n#> 1                  0.94         9426404    1100000000\n#> 2                  0.94          141060    1111000000\n#> 3                  0.94          120963    1114000000\n#> 4                  0.93          217756    1117000000\n#> 5                  0.95          280240    1120000000\n#> 6                  0.93          336801    1121500000\nKOR_SIGU_use %>% head()\n#> Simple feature collection with 6 features and 4 fields\n#> Geometry type: POLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: 127.5071 ymin: 37.06363 xmax: 129.1596 ymax: 38.23041\n#> Geodetic CRS:  WGS 84\n#>   SIG_CD   SIG_ENG_NM SIG_KOR_NM                       geometry 행정구역_코드\n#> 1  42110 Chuncheon-si     춘천시 POLYGON ((127.6047 38.07265...    4211000000\n#> 2  42130     Wonju-si     원주시 POLYGON ((128.1086 37.2988,...    4213000000\n#> 3  42150 Gangneung-si     강릉시 POLYGON ((129.0479 37.64961...    4215000000\n#> 4  42170   Donghae-si     동해시 POLYGON ((129.1596 37.47574...    4217000000\n#> 5  42190   Taebaek-si     태백시 POLYGON ((129.0121 37.31012...    4219000000\n#> 6  42210    Sokcho-si     속초시 POLYGON ((128.6087 38.16128...    4221000000\n\n### 공통된 '행정구역_코드'를 기준으로 병합 \nKOR_SIGU_use <- KOR_SIGU_use %>% merge(kor_202303, by = \"행정구역_코드\", all.x=T)\nKOR_SIGU_use %>% head()\n#> Simple feature collection with 6 features and 12 fields\n#> Geometry type: POLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: 126.9446 ymin: 37.50654 xmax: 127.1153 ymax: 37.6317\n#> Geodetic CRS:  WGS 84\n#>   행정구역_코드 SIG_CD    SIG_ENG_NM SIG_KOR_NM\n#> 1    1111000000  11110     Jongno-gu     종로구\n#> 2    1114000000  11140       Jung-gu       중구\n#> 3    1117000000  11170    Yongsan-gu     용산구\n#> 4    1120000000  11200  Seongdong-gu     성동구\n#> 5    1121500000  11215   Gwangjin-gu     광진구\n#> 6    1123000000  11230 Dongdaemun-gu   동대문구\n#>                           행정구역 X2023년03월_총인구수 X2023년03월_세대수\n#> 1   서울특별시 종로구 (1111000000)              141,060             72,679\n#> 2     서울특별시 중구 (1114000000)              120,963             63,862\n#> 3   서울특별시 용산구 (1117000000)              217,756            109,735\n#> 4   서울특별시 성동구 (1120000000)              280,240            133,513\n#> 5   서울특별시 광진구 (1121500000)              336,801            169,787\n#> 6 서울특별시 동대문구 (1123000000)              337,574            171,140\n#>   X2023년03월_세대당.인구 X2023년03월_남자.인구수 X2023년03월_여자.인구수\n#> 1                    1.94                  68,170                  72,890\n#> 2                    1.89                  58,699                  62,264\n#> 3                    1.98                 104,640                 113,116\n#> 4                    2.10                 136,233                 144,007\n#> 5                    1.98                 162,209                 174,592\n#> 6                    1.97                 165,933                 171,641\n#>   X2023년03월_남여.비율 총인구수_202303                       geometry\n#> 1                  0.94          141060 POLYGON ((127.0118 37.58157...\n#> 2                  0.94          120963 POLYGON ((127.0234 37.57191...\n#> 3                  0.93          217756 POLYGON ((127.009 37.54413,...\n#> 4                  0.95          280240 POLYGON ((127.0724 37.55996...\n#> 5                  0.93          336801 POLYGON ((127.1153 37.55676...\n#> 6                  0.97          337574 POLYGON ((127.0711 37.60732...\n\n\n\n2.3 Figure 4.4 - 2023년3월 총인구수\n\n사용 데이터셋 : KOR_SIGU_use\nfill : 총인구수_202303\ngeom_sf (지리적 객체 그래프)\n\n경계선 색상\n\ncoord_sf\n\n지도 좌표계 제거\n\nscale_fill_distiller\n\n이름 : “2023년 3월 총인구수”\n팔레트 색상 설정\n연속형 색상 척도 사용\n결측값 색상 설정\n색상 척도 방향 설정 : 작은 값 → 큰 값\n색상 척도 눈금 설정\n색상 척도 라벨 설정, 천 단위 옵션, 지수표기법 미사용\n\n테마 : 미니멀\n테마 옵션\n\n범례 제목 위치 지정\n범례 텍스트 위치 지정\n범례 위치 지정\n\n\n\nggplot(KOR_SIGU_use, aes(fill = 총인구수_202303)) +\ngeom_sf(color = \"gray90\") +\ncoord_sf(datum = NA) +\nscale_fill_distiller(name = \"2023년 3월 총인구수\",\n                      palette = \"Blues\",\n                      type = \"seq\",\n                      na.value = \"grey60\",\n                      direction = 1,\n                      breaks = seq(0,10,2) * 1e+5,\n                      labels = format(seq(0,10,2) * 1e+5,\n                                      big.mark = \",\", scientific = F),) +\ntheme_minimal() +\ntheme(legend.title.align = 0.5,\n      legend.text.align = 1.0,\n      legend.position = c(.85, .2))"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Profile",
    "section": "",
    "text": "Name\nSeongtaek Jo\n\n\nBirth\n1999.01.15\n\n\nPhone\n+82 10-9823-3115\n\n\nEmail\ntjdxor3115@naver.com\n\n\ncertificate\nADsP (데이터분석 준전문가)\n\n\nstarted from the Gwangju"
  },
  {
    "objectID": "work.html",
    "href": "work.html",
    "title": "Work",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nData_Mining_Kaggle\n\n\n\n\n\n\n\ncode\n\n\ndata_mining\n\n\njupyter\n\n\nkaggle\n\n\n\n\n\n\n\n\n\n\n\nMay 2, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Mining_Kaggle\n\n\n\n\n\n\n\ncode\n\n\ndata_mining\n\n\njupyter\n\n\nkaggle\n\n\n\n\n\n\n\n\n\n\n\nMay 2, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Mining_Kaggle\n\n\n\n\n\n\n\ncode\n\n\ndata_mining\n\n\njupyter\n\n\nkaggle\n\n\n\n\n\n\n\n\n\n\n\nMay 2, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Mining_Kaggle\n\n\n\n\n\n\n\ncode\n\n\ndata_mining\n\n\njupyter\n\n\nkaggle\n\n\n\n\n\n\n\n\n\n\n\nMay 2, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Mining_Kaggle\n\n\n\n\n\n\n\ncode\n\n\ndata_mining\n\n\njupyter\n\n\nkaggle\n\n\n\n\n\n\n\n\n\n\n\nMay 2, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Mining_Penguin\n\n\n\n\n\n\n\ncode\n\n\ndata_mining\n\n\njupyter\n\n\n\n\n\n\n\n\n\n\n\nApr 27, 2023\n\n\nSeongtaek\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html",
    "href": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html",
    "title": "Data_Mining_Penguin",
    "section": "",
    "text": "Penguin Data"
  },
  {
    "objectID": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#load-data",
    "href": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#load-data",
    "title": "Data_Mining_Penguin",
    "section": "1 Load data",
    "text": "1 Load data\n\n예제로 사용할 펭귄 데이터를 불러옵니다.\nseaborn에 내장되어 있습니다.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\npenguins = sns.load_dataset(\"penguins\")\npenguins.head()\n\n\n\n\n\n\n\n\n\nspecies\n\n\nisland\n\n\nbill_length_mm\n\n\nbill_depth_mm\n\n\nflipper_length_mm\n\n\nbody_mass_g\n\n\nsex\n\n\n\n\n\n\n0\n\n\nAdelie\n\n\nTorgersen\n\n\n39.1\n\n\n18.7\n\n\n181.0\n\n\n3750.0\n\n\nMale\n\n\n\n\n1\n\n\nAdelie\n\n\nTorgersen\n\n\n39.5\n\n\n17.4\n\n\n186.0\n\n\n3800.0\n\n\nFemale\n\n\n\n\n2\n\n\nAdelie\n\n\nTorgersen\n\n\n40.3\n\n\n18.0\n\n\n195.0\n\n\n3250.0\n\n\nFemale\n\n\n\n\n3\n\n\nAdelie\n\n\nTorgersen\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n\n\n4\n\n\nAdelie\n\n\nTorgersen\n\n\n36.7\n\n\n19.3\n\n\n193.0\n\n\n3450.0\n\n\nFemale"
  },
  {
    "objectID": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#figure-and-axes",
    "href": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#figure-and-axes",
    "title": "Data_Mining_Penguin",
    "section": "2 Figure and Axes",
    "text": "2 Figure and Axes\n\nmatplotlib으로 도화지figure를 깔고 축공간axes를 만듭니다.\n1 x 2 축공간을 구성합니다.\n\n### 도화지 생성\nfig, axes = plt.subplots(ncols=2, figsize=(8,4))\n\nfig.tight_layout()\n\n\n\npng"
  },
  {
    "objectID": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#plot-with-matplotlib",
    "href": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#plot-with-matplotlib",
    "title": "Data_Mining_Penguin",
    "section": "3 plot with matplotlib",
    "text": "3 plot with matplotlib\n\nmatplotlib 기능을 이용해서 산점도를 그립니다.\n\nx축은 부리 길이 bill length\ny축은 부리 위 아래 두께 bill depth\n색상은 종species로 합니다.\nAdelie, Chinstrap, Gentoo이 있습니다.\n\n두 축공간 중 왼쪽에만 그립니다.\n컬러를 다르게 주기 위해 f-string 포맷을 사용했습니다. f-string 포맷에 대한 설명은 https://blockdmask.tistory.com/429를 참고하세요\n\n### 도화지 생성\nfig, axes = plt.subplots(ncols=2,figsize=(8,4))\n\n### 모든 펭귄 종류\nspecies_u = penguins[\"species\"].unique()\n\n### 첫 번째 subplot 그리기\nfor i, s in enumerate(species_u):\n    axes[0].scatter(penguins[\"bill_length_mm\"].loc[penguins[\"species\"]==s],\n                    penguins[\"bill_depth_mm\"].loc[penguins[\"species\"]==s],\n                    c=f\"C{i}\", label=s, alpha=0.3)\n\n### 범례 추가\naxes[0].legend(species_u, title=\"species\", fontsize=8)\n\n### x,y 레이블 지정\naxes[0].set_xlabel(\"Bill Length (mm)\")\naxes[0].set_ylabel(\"Bill Depth (mm)\")\n\n### plt.show()\nfig.tight_layout()\n\n\n\npng\n\n\n\n조금 더 간단히 그리는 방법\n\nmatplotlib는 기본적으로 Categorical 변수를 color로 바로 사용하지 못함\n\n\n### 펭귄 종류를 고유의 숫자코드로 변환\npenguins[\"species_codes\"] = pd.Categorical(penguins[\"species\"]).codes\n\n### 도화지 생성\nfig, axes = plt.subplots(ncols=2,figsize=(8,4))\n\n### 첫 번재 subplot 그리기 \na = axes[0].scatter(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", c=\"species_codes\", alpha=0.3) # 크기:s\na\n\n### 범례 추가\naxes[0].legend(*a.legend_elements(), title=\"Species\", fontsize=8) # 범례위치 : loc='lower right', 'upper center', etc..\n\n### x,y 레이블 지정\naxes[0].set_xlabel(\"Bill Length (mm)\")\naxes[0].set_ylabel(\"Bill Depth (mm)\")\n<__array_function__ internals>:180: UserWarning: Warning: converting a masked element to nan.\nC:\\Users\\seong taek\\anaconda3\\lib\\site-packages\\matplotlib\\colors.py:1311: UserWarning: Warning: converting a masked element to nan.\n  data = np.asarray(value)\nC:\\Users\\seong taek\\anaconda3\\lib\\site-packages\\matplotlib\\ticker.py:521: UserWarning: Warning: converting a masked element to nan.\n  if self._useLocale else fmt % arg)\n\n\n\n\n\nText(0, 0.5, 'Bill Depth (mm)')\n\n\n\npng"
  },
  {
    "objectID": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#plot-with-seaborn",
    "href": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#plot-with-seaborn",
    "title": "Data_Mining_Penguin",
    "section": "4 Plot with seaborn",
    "text": "4 Plot with seaborn\n\n두 번째 plot 그리기\n\n### 도화지 생성\nfig, axes = plt.subplots(ncols=2,figsize=(8,4))\n\n### 모든 펭귄 종류\nspecies_u = penguins[\"species\"].unique()\n\n### 첫 번째 subplot 그리기\nfor i, s in enumerate(species_u):\n    axes[0].scatter(penguins[\"bill_length_mm\"].loc[penguins[\"species\"]==s],\n                    penguins[\"bill_depth_mm\"].loc[penguins[\"species\"]==s],\n                    c=f\"C{i}\", label=s, alpha=0.3)\n\n### 범례 추가    \naxes[0].legend(species_u, title=\"species\")\n\n### x,y 레이블 지정\naxes[0].set_xlabel(\"Bill Length (mm)\")\naxes[0].set_ylabel(\"Bill Depth (mm)\")\n\n\n### 두 번째 subplot 그리기\nsns.scatterplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"species\", data=penguins, alpha=0.3, ax=axes[1])\naxes[1].set_xlabel(\"Bill Length (mm)\")\naxes[1].set_ylabel(\"Bill Depth (mm)\")\n\nfig.tight_layout()\n\n\n\npng\n\n\n\n단 세 줄로 거의 동일한 그림이 나왔습니다.\n\nscatter plot의 점 크기만 살짝 작습니다.\nlabel의 투명도만 살짝 다릅니다.\n\nseaborn 명령 scatterplot()을 그대로 사용했습니다.\nx축과 y축 label도 바꾸었습니다.\n\nax=axes[1] 인자에서 볼 수 있듯, 존재하는 axes에 그림만 얹었습니다.\nmatplotlib 틀 + seaborn 그림 이므로, matplotlib 명령이 모두 통합니다."
  },
  {
    "objectID": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#matplotlib-seaborn-seaborn-matplotlib",
    "href": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#matplotlib-seaborn-seaborn-matplotlib",
    "title": "Data_Mining_Penguin",
    "section": "5 matplotlib + seaborn & seaborn + matplotlib",
    "text": "5 matplotlib + seaborn & seaborn + matplotlib\n\nmatplotlib과 seaborn이 자유롭게 섞일 수 있습니다.\n\nmatplotlib 산점도 위에 seaborn 추세선을 얹을 수 있고,\nseaborn 산점도 위에 matplotlib 중심점을 얹을 수 있습니다.\n\n파이썬 코드는 다음과 같습니다.\n\n### 도화지 생성\nfig, axes = plt.subplots(ncols=2, figsize=(8, 4))\n\n### 모든 펭귄 종류\nspecies_u = penguins[\"species\"].unique()\n\n### 첫 번째 subplot 그리기 + 추세선\nfor i, s in enumerate(species_u):\n    axes[0].scatter(penguins[\"bill_length_mm\"].loc[penguins[\"species\"]==s],\n                   penguins[\"bill_depth_mm\"].loc[penguins[\"species\"]==s],\n                   c=f\"C{i}\", label=s, alpha=0.3\n                  )                  \n    sns.regplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", data=penguins.loc[penguins[\"species\"]==s], \n                scatter=False, ax=axes[0])\n    \naxes[0].legend(species_u, title=\"species\")\naxes[0].set_xlabel(\"Bill Length (mm)\")\naxes[0].set_ylabel(\"Bill Depth (mm)\")\n\n### 두 번째 subplot 그리기\nsns.scatterplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"species\", data=penguins, alpha=0.3, ax=axes[1])\naxes[1].set_xlabel(\"Bill Length (mm)\")\naxes[1].set_ylabel(\"Bill Depth (mm)\")\n\n\n### 중심점 marker\nfor i, s in enumerate(species_u):\n    axes[1].scatter(penguins[\"bill_length_mm\"].loc[penguins[\"species\"]==s].mean(),\n                   penguins[\"bill_depth_mm\"].loc[penguins[\"species\"]==s].mean(),\n                   c=f\"C{i}\", alpha=1, marker=\"x\", s=100\n                  )\n\nfig.tight_layout()\n\n\n\npng"
  },
  {
    "objectID": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#seaborn-seaborn-matplotlib",
    "href": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#seaborn-seaborn-matplotlib",
    "title": "Data_Mining_Penguin",
    "section": "6 seaborn + seaborn + matplotlib",
    "text": "6 seaborn + seaborn + matplotlib\n\n안 될 이유가 없습니다.\nseaborn scatterplot + seaborn kdeplot + matplotlib text입니다\n\n### 도화지 생성\nfig, ax = plt.subplots(figsize=(6,5))\n\n### plot 0: scatter plot\nsns.scatterplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", color=\"k\", data=penguins, alpha=0.3, ax=ax, legend=False)\n\n### plot 1: kde plot (밀도 그래프)\nsns.kdeplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"species\", data=penguins, alpha=0.5, ax=ax, legend=False)\n\n### text:\nspecies_u = penguins[\"species\"].unique()\nfor i, s in enumerate(species_u):\n    ax.text(penguins[\"bill_length_mm\"].loc[penguins[\"species\"]==s].mean(),\n            penguins[\"bill_depth_mm\"].loc[penguins[\"species\"]==s].mean(),\n            s = s, fontdict={\"fontsize\":14, \"fontweight\":\"bold\",\"color\":\"k\"}\n            )\n\nax.set_xlabel(\"Bill Length (mm)\")\nax.set_ylabel(\"Bill Depth (mm)\")\n\nfig.tight_layout()\n\n\n\npng"
  },
  {
    "objectID": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#quiz",
    "href": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#quiz",
    "title": "Data_Mining_Penguin",
    "section": "7 Quiz",
    "text": "7 Quiz\nBill length를 10단위로 나눈 후, Bill length에 따른 Bill depth의 boxplot을 그리시오\n### bill length를 10단위로 만든 후, 새로운 컬럼 추가\npenguins['bill_length_10'] = (penguins['bill_length_mm'] // 10) * 10\npenguins\n\n\n\n\n\n\n\n\n\nspecies\n\n\nisland\n\n\nbill_length_mm\n\n\nbill_depth_mm\n\n\nflipper_length_mm\n\n\nbody_mass_g\n\n\nsex\n\n\nspecies_codes\n\n\nbill_length_10\n\n\n\n\n\n\n0\n\n\nAdelie\n\n\nTorgersen\n\n\n39.1\n\n\n18.7\n\n\n181.0\n\n\n3750.0\n\n\nMale\n\n\n0\n\n\n30.0\n\n\n\n\n1\n\n\nAdelie\n\n\nTorgersen\n\n\n39.5\n\n\n17.4\n\n\n186.0\n\n\n3800.0\n\n\nFemale\n\n\n0\n\n\n30.0\n\n\n\n\n2\n\n\nAdelie\n\n\nTorgersen\n\n\n40.3\n\n\n18.0\n\n\n195.0\n\n\n3250.0\n\n\nFemale\n\n\n0\n\n\n40.0\n\n\n\n\n3\n\n\nAdelie\n\n\nTorgersen\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n0\n\n\nNaN\n\n\n\n\n4\n\n\nAdelie\n\n\nTorgersen\n\n\n36.7\n\n\n19.3\n\n\n193.0\n\n\n3450.0\n\n\nFemale\n\n\n0\n\n\n30.0\n\n\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n\n\n339\n\n\nGentoo\n\n\nBiscoe\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n2\n\n\nNaN\n\n\n\n\n340\n\n\nGentoo\n\n\nBiscoe\n\n\n46.8\n\n\n14.3\n\n\n215.0\n\n\n4850.0\n\n\nFemale\n\n\n2\n\n\n40.0\n\n\n\n\n341\n\n\nGentoo\n\n\nBiscoe\n\n\n50.4\n\n\n15.7\n\n\n222.0\n\n\n5750.0\n\n\nMale\n\n\n2\n\n\n50.0\n\n\n\n\n342\n\n\nGentoo\n\n\nBiscoe\n\n\n45.2\n\n\n14.8\n\n\n212.0\n\n\n5200.0\n\n\nFemale\n\n\n2\n\n\n40.0\n\n\n\n\n343\n\n\nGentoo\n\n\nBiscoe\n\n\n49.9\n\n\n16.1\n\n\n213.0\n\n\n5400.0\n\n\nMale\n\n\n2\n\n\n40.0\n\n\n\n\n\n\n344 rows × 9 columns\n\n\n### 박스 plot\nsns.boxenplot(x = 'bill_length_10', y = 'bill_depth_mm', data=penguins)\n\n### 점 표현\nsns.stripplot(x = 'bill_length_10', y = 'bill_depth_mm', data=penguins, color='black', size=4)\n\nsns.set_style('whitegrid')\nplt.show()\n\n\n\npng\n\n\n\n7.1 sns.set_style\n\ndarkgrid: 어두운 배경에 격자 라인이 그려지는 스타일\nwhitegrid: 밝은 배경에 격자 라인이 그려지는 스타일\ndark: 어두운 배경에 격자 라인이 없는 스타일\nwhite: 밝은 배경에 격자 라인이 없는 스타일\nticks: 격자 라인 대신 축의 눈금 표시가 있는 스타일\n\n\n\n7.2 pd.cut 이용\n### bill length를 구간별로 만든 후, 새로운 컬럼 추가\npenguins['bill_length_group'] = pd.cut(penguins['bill_length_mm'],\n                                      bins=[0,40,50,60],\n                                      labels=['0~40', '40~50', '50~60'])\npenguins\n\n\n\n\n\n\n\n\n\nspecies\n\n\nisland\n\n\nbill_length_mm\n\n\nbill_depth_mm\n\n\nflipper_length_mm\n\n\nbody_mass_g\n\n\nsex\n\n\nspecies_codes\n\n\nbill_length_10\n\n\nbill_length_group\n\n\n\n\n\n\n0\n\n\nAdelie\n\n\nTorgersen\n\n\n39.1\n\n\n18.7\n\n\n181.0\n\n\n3750.0\n\n\nMale\n\n\n0\n\n\n30.0\n\n\n0~40\n\n\n\n\n1\n\n\nAdelie\n\n\nTorgersen\n\n\n39.5\n\n\n17.4\n\n\n186.0\n\n\n3800.0\n\n\nFemale\n\n\n0\n\n\n30.0\n\n\n0~40\n\n\n\n\n2\n\n\nAdelie\n\n\nTorgersen\n\n\n40.3\n\n\n18.0\n\n\n195.0\n\n\n3250.0\n\n\nFemale\n\n\n0\n\n\n40.0\n\n\n40~50\n\n\n\n\n3\n\n\nAdelie\n\n\nTorgersen\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n0\n\n\nNaN\n\n\nNaN\n\n\n\n\n4\n\n\nAdelie\n\n\nTorgersen\n\n\n36.7\n\n\n19.3\n\n\n193.0\n\n\n3450.0\n\n\nFemale\n\n\n0\n\n\n30.0\n\n\n0~40\n\n\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n\n\n339\n\n\nGentoo\n\n\nBiscoe\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n2\n\n\nNaN\n\n\nNaN\n\n\n\n\n340\n\n\nGentoo\n\n\nBiscoe\n\n\n46.8\n\n\n14.3\n\n\n215.0\n\n\n4850.0\n\n\nFemale\n\n\n2\n\n\n40.0\n\n\n40~50\n\n\n\n\n341\n\n\nGentoo\n\n\nBiscoe\n\n\n50.4\n\n\n15.7\n\n\n222.0\n\n\n5750.0\n\n\nMale\n\n\n2\n\n\n50.0\n\n\n50~60\n\n\n\n\n342\n\n\nGentoo\n\n\nBiscoe\n\n\n45.2\n\n\n14.8\n\n\n212.0\n\n\n5200.0\n\n\nFemale\n\n\n2\n\n\n40.0\n\n\n40~50\n\n\n\n\n343\n\n\nGentoo\n\n\nBiscoe\n\n\n49.9\n\n\n16.1\n\n\n213.0\n\n\n5400.0\n\n\nMale\n\n\n2\n\n\n40.0\n\n\n40~50\n\n\n\n\n\n\n344 rows × 10 columns\n\n\nsns.boxenplot(x = 'bill_length_group', y = 'bill_depth_mm', data=penguins)\nsns.stripplot(x = 'bill_length_group', y = 'bill_depth_mm', data=penguins, color='black', size=4)\n\nsns.set_style('whitegrid')\nsns.despine()\nplt.show()\n\n\n\npng\n\n\nsns.scatterplot(x='bill_length_mm', y='bill_depth_mm', data=penguins, alpha=0.3)\n\nplt.show()\n\n\n\npng\n\n\n\n열 기준 : species\n색상 : species별\n한 행의 subplot 개수\nmap : x축, y축 지정\nsns.despine : 상단, 우측 축 제거\n\ng = sns.FacetGrid(penguins, col='species',hue='species',col_wrap=3)\ng.map(sns.scatterplot, 'bill_length_mm', 'bill_depth_mm')\n\nsns.set_style('whitegrid')\nsns.despine()\n\nplt.show()\n\n\n\npng"
  },
  {
    "objectID": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#section",
    "href": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#section",
    "title": "Data_Mining_Penguin",
    "section": "8 ",
    "text": "8"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html",
    "href": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html",
    "title": "Data_Mining_Kaggle",
    "section": "",
    "text": "Exercise 1 - Your First Map"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#introduction",
    "href": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#introduction",
    "title": "Data_Mining_Kaggle",
    "section": "1 Introduction",
    "text": "1 Introduction\nKiva.org is an online crowdfunding platform extending financial services to poor people around the world. Kiva lenders have provided over $1 billion dollars in loans to over 2 million people.\n\n\n\nKiva reaches some of the most remote places in the world through their global network of “Field Partners”. These partners are local organizations working in communities to vet borrowers, provide services, and administer loans.\nIn this exercise, you’ll investigate Kiva loans in the Philippines. Can you identify regions that might be outside of Kiva’s current network, in order to identify opportunities for recruiting new Field Partners?\nTo get started, run the code cell below to set up our feedback system.\nThis notebook is an exercise in the Geospatial Analysis course. You can reference the tutorial at this link.\n\nimport geopandas as gpd\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#get-the-data",
    "href": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#get-the-data",
    "title": "Data_Mining_Kaggle",
    "section": "2 Get the data",
    "text": "2 Get the data\n\n다음 셀을 사용하여 loans_filepath에 있는 모양 파일을 로드하여 GeoDataFrame world_loans를 만듭니다.\n\nloans_filepath = \"C:/Users\\seong taek/Desktop/archive/kiva_loans/kiva_loans/kiva_loans.shp\"\n\n### Your code here: Load the data\nworld_loans = gpd.read_file(loans_filepath)\n\n### Uncomment to view the first five rows of the data\nworld_loans.head()\n\n\n\n\n\n\n\n\n\nPartner ID\n\n\nField Part\n\n\nsector\n\n\nLoan Theme\n\n\ncountry\n\n\namount\n\n\ngeometry\n\n\n\n\n\n\n0\n\n\n9\n\n\nKREDIT Microfinance Institution\n\n\nGeneral Financial Inclusion\n\n\nHigher Education\n\n\nCambodia\n\n\n450\n\n\nPOINT (102.89751 13.66726)\n\n\n\n\n1\n\n\n9\n\n\nKREDIT Microfinance Institution\n\n\nGeneral Financial Inclusion\n\n\nVulnerable Populations\n\n\nCambodia\n\n\n20275\n\n\nPOINT (102.98962 13.02870)\n\n\n\n\n2\n\n\n9\n\n\nKREDIT Microfinance Institution\n\n\nGeneral Financial Inclusion\n\n\nHigher Education\n\n\nCambodia\n\n\n9150\n\n\nPOINT (102.98962 13.02870)\n\n\n\n\n3\n\n\n9\n\n\nKREDIT Microfinance Institution\n\n\nGeneral Financial Inclusion\n\n\nVulnerable Populations\n\n\nCambodia\n\n\n604950\n\n\nPOINT (105.31312 12.09829)\n\n\n\n\n4\n\n\n9\n\n\nKREDIT Microfinance Institution\n\n\nGeneral Financial Inclusion\n\n\nSanitation\n\n\nCambodia\n\n\n275\n\n\nPOINT (105.31312 12.09829)\n\n\n\n\n\n\n\n2.1 world_loans 데이터셋 시각화\nworld_loans.plot()\n<Axes: >\n\n\n\npng"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#plot-the-data.",
    "href": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#plot-the-data.",
    "title": "Data_Mining_Kaggle",
    "section": "3 Plot the data.",
    "text": "3 Plot the data.\n\n변경하지 않고 다음 코드 셀을 실행하여 국가 경계가 포함된 GeoDataFrame 월드를 로드합니다\n\n### This dataset is provided in GeoPandas\nworld_filepath = gpd.datasets.get_path('naturalearth_lowres')\nworld = gpd.read_file(world_filepath)\nworld.head()\n\n\n\n\n\n\n\n\n\npop_est\n\n\ncontinent\n\n\nname\n\n\niso_a3\n\n\ngdp_md_est\n\n\ngeometry\n\n\n\n\n\n\n0\n\n\n889953.0\n\n\nOceania\n\n\nFiji\n\n\nFJI\n\n\n5496\n\n\nMULTIPOLYGON (((180.00000 -16.06713, 180.00000…\n\n\n\n\n1\n\n\n58005463.0\n\n\nAfrica\n\n\nTanzania\n\n\nTZA\n\n\n63177\n\n\nPOLYGON ((33.90371 -0.95000, 34.07262 -1.05982…\n\n\n\n\n2\n\n\n603253.0\n\n\nAfrica\n\n\nW. Sahara\n\n\nESH\n\n\n907\n\n\nPOLYGON ((-8.66559 27.65643, -8.66512 27.58948…\n\n\n\n\n3\n\n\n37589262.0\n\n\nNorth America\n\n\nCanada\n\n\nCAN\n\n\n1736425\n\n\nMULTIPOLYGON (((-122.84000 49.00000, -122.9742…\n\n\n\n\n4\n\n\n328239523.0\n\n\nNorth America\n\n\nUnited States of America\n\n\nUSA\n\n\n21433226\n\n\nMULTIPOLYGON (((-122.84000 49.00000, -120.0000…\n\n\n\n\n\n\n\n3.1 world 데이터셋 시각화\nworld.plot()\n<Axes: >\n\n\n\npng\n\n\n\n\n3.2 World and World_loans GeoDataFrames를 사용하여 전 세계 Kiva 대출 위치 시각화하기\n### Your code here\nworld_data = world.plot()\nworld_loans.plot(ax=world_data, color='red', markersize=0.1)\n<Axes: >\n\n\n\npng"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#select-loans-based-in-the-philippines.",
    "href": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#select-loans-based-in-the-philippines.",
    "title": "Data_Mining_Kaggle",
    "section": "4 Select loans based in the Philippines.",
    "text": "4 Select loans based in the Philippines.\n\n다음으로, 당신은 필리핀에 기반을 둔 대출에 초점을 맞출 것입니다. 다음 코드 셀을 사용하여 필리핀에 기반을 둔 대출이 있는 world_loans의 모든 행을 포함하는 GeoDataFrame PHL_loans를 생성합니다\n\n# Your code here\nPHL_loans = world_loans.loc[world_loans['country'] =='Philippines']\nPHL_loans.head()\n\n\n\n\n\n\n\n\n\nPartner ID\n\n\nField Part\n\n\nsector\n\n\nLoan Theme\n\n\ncountry\n\n\namount\n\n\ngeometry\n\n\n\n\n\n\n2859\n\n\n123\n\n\nAlalay sa Kaunlaran (ASKI)\n\n\nGeneral Financial Inclusion\n\n\nGeneral\n\n\nPhilippines\n\n\n400\n\n\nPOINT (121.73961 17.64228)\n\n\n\n\n2860\n\n\n123\n\n\nAlalay sa Kaunlaran (ASKI)\n\n\nGeneral Financial Inclusion\n\n\nGeneral\n\n\nPhilippines\n\n\n400\n\n\nPOINT (121.74169 17.63235)\n\n\n\n\n2861\n\n\n123\n\n\nAlalay sa Kaunlaran (ASKI)\n\n\nGeneral Financial Inclusion\n\n\nGeneral\n\n\nPhilippines\n\n\n400\n\n\nPOINT (121.46667 16.60000)\n\n\n\n\n2862\n\n\n123\n\n\nAlalay sa Kaunlaran (ASKI)\n\n\nGeneral Financial Inclusion\n\n\nGeneral\n\n\nPhilippines\n\n\n6050\n\n\nPOINT (121.73333 17.83333)\n\n\n\n\n2863\n\n\n123\n\n\nAlalay sa Kaunlaran (ASKI)\n\n\nGeneral Financial Inclusion\n\n\nGeneral\n\n\nPhilippines\n\n\n625\n\n\nPOINT (121.51800 16.72368)"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#understand-loans-in-the-philippines.",
    "href": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#understand-loans-in-the-philippines.",
    "title": "Data_Mining_Kaggle",
    "section": "5 Understand loans in the Philippines.",
    "text": "5 Understand loans in the Philippines.\n\n변경 없이 다음 코드 셀을 실행하여 필리핀의 모든 섬에 대한 경계가 포함된 GeoDataFrame “PHL”을 로드합니다\n\n# Load a KML file containing island boundaries\ngpd.io.file.fiona.drvsupport.supported_drivers['KML'] = 'rw'\nPHL = gpd.read_file(\"C:/Users\\seong taek/Desktop/archive/Philippines_AL258.kml\", driver='KML')\nPHL.head()\n\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\ngeometry\n\n\n\n\n\n\n0\n\n\nAutonomous Region in Muslim Mindanao\n\n\n\n\nMULTIPOLYGON (((119.46690 4.58718, 119.46653 4…\n\n\n\n\n1\n\n\nBicol Region\n\n\n\n\nMULTIPOLYGON (((124.04577 11.57862, 124.04594 …\n\n\n\n\n2\n\n\nCagayan Valley\n\n\n\n\nMULTIPOLYGON (((122.51581 17.04436, 122.51568 …\n\n\n\n\n3\n\n\nCalabarzon\n\n\n\n\nMULTIPOLYGON (((120.49202 14.05403, 120.49201 …\n\n\n\n\n4\n\n\nCaraga\n\n\n\n\nMULTIPOLYGON (((126.45401 8.24400, 126.45407 8…\n\n\n\n\n\n\n\n5.1 PHL’ 및 ‘PHL_loans’ GeoDataFrames를 사용하여 필리핀의 대출을 시각화할 수 있습니다.\n# Your code here\nPHL = PHL.plot()\nPHL_loans.plot(ax=PHL, color='red', markersize=0.2)\n<Axes: >\n\n\n\npng\n\n\n새로운 Field Partners를 모집하는 데 유용한 섬을 찾을 수 있습니까? 현재 키바의 손이 닿지 않는 곳에 보이는 섬이 있습니까?\nthis map 은 질문에 대답하는 데 유용할 수 있습니다."
  },
  {
    "objectID": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#keep-going",
    "href": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#keep-going",
    "title": "Data_Mining_Kaggle",
    "section": "6 Keep going",
    "text": "6 Keep going\nContinue to learn about coordinate reference systems.\n\nHave questions or comments? Visit the course discussion forum to chat with other learners."
  },
  {
    "objectID": "posts_work/Data_Mining_exercise2/exercise2-coordinate-reference-systems.html",
    "href": "posts_work/Data_Mining_exercise2/exercise2-coordinate-reference-systems.html",
    "title": "Data_Mining_Kaggle",
    "section": "",
    "text": "Exercise 2 - Coordinate Reference Systems\nThis notebook is an exercise in the Geospatial Analysis course. You can reference the tutorial at this link."
  },
  {
    "objectID": "posts_work/Data_Mining_exercise2/exercise2-coordinate-reference-systems.html#introduction",
    "href": "posts_work/Data_Mining_exercise2/exercise2-coordinate-reference-systems.html#introduction",
    "title": "Data_Mining_Kaggle",
    "section": "1 Introduction",
    "text": "1 Introduction\nYou are a bird conservation expert and want to understand migration patterns of purple martins. In your research, you discover that these birds typically spend the summer breeding season in the eastern United States, and then migrate to South America for the winter. But since this bird is under threat of endangerment, you’d like to take a closer look at the locations that these birds are more likely to visit.\n\n\n\nThere are several protected areas in South America, which operate under special regulations to ensure that species that migrate (or live) there have the best opportunity to thrive. You’d like to know if purple martins tend to visit these areas. To answer this question, you’ll use some recently collected data that tracks the year-round location of eleven different birds.\nBefore you get started, run the code cell below to set everything up.\nimport pandas as pd\nimport geopandas as gpd\nfrom shapely.geometry import LineString\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise2/exercise2-coordinate-reference-systems.html#exercises",
    "href": "posts_work/Data_Mining_exercise2/exercise2-coordinate-reference-systems.html#exercises",
    "title": "Data_Mining_Kaggle",
    "section": "2 Exercises",
    "text": "2 Exercises\n\n2.1 Load the data.\n다음 코드 셀을 (변경 없이) 실행하여 GPS 데이터를 Panda DataFrame birds_df에 로드합니다.\n# Load the data and print the first 5 rows\nbirds_df = pd.read_csv(\"C:/Users\\seong taek/Desktop/archive/purple_martin.csv\", parse_dates=['timestamp']) #  날짜/시간 객체로 읽기\nprint(\"There are {} different birds in the dataset.\".format(birds_df[\"tag-local-identifier\"].nunique()))\n\nbirds_df.head()\nThere are 11 different birds in the dataset.\n\n\n\n\n\n\n\n\n\ntimestamp\n\n\nlocation-long\n\n\nlocation-lat\n\n\ntag-local-identifier\n\n\n\n\n\n\n0\n\n\n2014-08-15 05:56:00\n\n\n-88.146014\n\n\n17.513049\n\n\n30448\n\n\n\n\n1\n\n\n2014-09-01 05:59:00\n\n\n-85.243501\n\n\n13.095782\n\n\n30448\n\n\n\n\n2\n\n\n2014-10-30 23:58:00\n\n\n-62.906089\n\n\n-7.852436\n\n\n30448\n\n\n\n\n3\n\n\n2014-11-15 04:59:00\n\n\n-61.776826\n\n\n-11.723898\n\n\n30448\n\n\n\n\n4\n\n\n2014-11-30 09:59:00\n\n\n-61.241538\n\n\n-11.612237\n\n\n30448\n\n\n\n\n\n\n데이터 세트에는 11마리의 새가 있으며, 각 새는 “태그-로컬-식별자” 열에서 고유한 값으로 식별됩니다. 각각의 새들은 일년 중 다른 시기에 수집된 여러 개의 측정치를 가지고 있습니다.\n다음 코드 셀을 사용하여 GeoDataFrame 새를 만듭니다.\n- birds는 birds_df의 모든 열과 (경도, 위도) 위치를 가진 Point 객체를 포함하는 “기하학” 열을 가져야 합니다 - 새의 CRS를 {init}: ‘epsg:4326’}(으)로 설정합니다..\n# Your code here: Create the GeoDataFrame\ngeometry = [Point(xy) for xy in zip(birds_df[\"location-long\"], birds_df[\"location-lat\"])]\nbirds = gpd.GeoDataFrame(birds_df, crs=\"EPSG:4326\", geometry=geometry)\n\n# Your code here: Set the CRS to {'init': 'epsg:4326'}\nbirds.crs = {'init': 'epsg:4326'}\nC:\\Users\\seong taek\\anaconda3\\lib\\site-packages\\pyproj\\crs\\crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n  in_crs_string = _prepare_from_proj_string(in_crs_string)\nbirds.head()\n\n\n\n\n\n\n\n\n\ntimestamp\n\n\nlocation-long\n\n\nlocation-lat\n\n\ntag-local-identifier\n\n\ngeometry\n\n\n\n\n\n\n0\n\n\n2014-08-15 05:56:00\n\n\n-88.146014\n\n\n17.513049\n\n\n30448\n\n\nPOINT (-88.14601 17.51305)\n\n\n\n\n1\n\n\n2014-09-01 05:59:00\n\n\n-85.243501\n\n\n13.095782\n\n\n30448\n\n\nPOINT (-85.24350 13.09578)\n\n\n\n\n2\n\n\n2014-10-30 23:58:00\n\n\n-62.906089\n\n\n-7.852436\n\n\n30448\n\n\nPOINT (-62.90609 -7.85244)\n\n\n\n\n3\n\n\n2014-11-15 04:59:00\n\n\n-61.776826\n\n\n-11.723898\n\n\n30448\n\n\nPOINT (-61.77683 -11.72390)\n\n\n\n\n4\n\n\n2014-11-30 09:59:00\n\n\n-61.241538\n\n\n-11.612237\n\n\n30448\n\n\nPOINT (-61.24154 -11.61224)\n\n\n\n\n\n\n\n\n2.2 Plot the data.\n다음으로 GeoPandas의 ‘naturalearth_lowres’ 데이터 세트를 로드하고 미주(북남미 모두)의 모든 국가 경계를 포함하는 GeoDataFrame으로 미주를 설정합니다. 변경하지 않고 다음 코드 셀을 실행합니다.\n# Load a GeoDataFrame with country boundaries in North/South America, print the first 5 rows\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\namericas = world.loc[world['continent'].isin(['North America', 'South America'])]\namericas.head()\n\n\n\n\n\n\n\n\n\npop_est\n\n\ncontinent\n\n\nname\n\n\niso_a3\n\n\ngdp_md_est\n\n\ngeometry\n\n\n\n\n\n\n3\n\n\n37589262.0\n\n\nNorth America\n\n\nCanada\n\n\nCAN\n\n\n1736425\n\n\nMULTIPOLYGON (((-122.84000 49.00000, -122.9742…\n\n\n\n\n4\n\n\n328239523.0\n\n\nNorth America\n\n\nUnited States of America\n\n\nUSA\n\n\n21433226\n\n\nMULTIPOLYGON (((-122.84000 49.00000, -120.0000…\n\n\n\n\n9\n\n\n44938712.0\n\n\nSouth America\n\n\nArgentina\n\n\nARG\n\n\n445445\n\n\nMULTIPOLYGON (((-68.63401 -52.63637, -68.25000…\n\n\n\n\n10\n\n\n18952038.0\n\n\nSouth America\n\n\nChile\n\n\nCHL\n\n\n282318\n\n\nMULTIPOLYGON (((-68.63401 -52.63637, -68.63335…\n\n\n\n\n16\n\n\n11263077.0\n\n\nNorth America\n\n\nHaiti\n\n\nHTI\n\n\n14332\n\n\nPOLYGON ((-71.71236 19.71446, -71.62487 19.169…\n\n\n\n\n\n\n\n다음 코드 셀을 사용하여 (1) Americas GeoDataFrame의 국가 경계와 (2) birds_gdf GeoDataFrame의 모든 점을 모두 표시하는 단일 플롯을 만듭니다.\n여기서는 특별한 스타일에 대해 걱정하지 말고 모든 데이터가 올바르게 로드되었는지 신속하게 확인하기 위해 예비 플롯을 작성하면 됩니다. 특히 새를 구별하기 위해 포인트를 컬러 코딩하는 것에 대해 걱정할 필요가 없으며, 시작 포인트와 끝점을 구분할 필요가 없습니다. 우리는 연습의 다음 부분에서 그것을 할 것입니다.\n\n### Your code here\n\n# figure 객체와 axis 객체를 생성합니다.\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# americas GeoDataFrame의 경계를 표시합니다.\namericas.plot(ax=ax, color='white', edgecolor='black')\n\n# birds GeoDataFrame의 점을 표시합니다.\nbirds.plot(ax=ax, markersize=10, color='red')\n\n# 그래프를 출력합니다.\nplt.show()\n\n\n\npng\n\n\n\n\n2.3 Where does each bird start and end its journey? (Part 1)\n이제, 우리는 각각의 새들의 경로를 더 자세히 볼 준비가 되었습니다. 다음 코드 셀을 실행하여 두 개의 GeoDataFrames를 만듭니다: - path_gdf에는 각 새의 경로를 표시하는 LineString 개체가 포함되어 있습니다. - LineString() 메서드를 사용하여 점 객체 목록에서 LineString 객체를 만듭니다. - start_gdf는 각 새의 시작점을 포함합니다.\n# GeoDataFrame showing path for each bird\npath_df = birds.groupby(\"tag-local-identifier\")['geometry'].apply(list).apply(lambda x: LineString(x)).reset_index()\npath_gdf = gpd.GeoDataFrame(path_df, geometry=path_df.geometry)\npath_gdf.crs = {'init' :'epsg:4326'}\n\n# GeoDataFrame showing starting point for each bird\nstart_df = birds.groupby(\"tag-local-identifier\")['geometry'].apply(list).apply(lambda x: x[0]).reset_index()\nstart_gdf = gpd.GeoDataFrame(start_df, geometry=start_df.geometry)\nstart_gdf.crs = {'init' :'epsg:4326'}\n\n# Show first five rows of GeoDataFrame\nstart_gdf.head()\nC:\\Users\\seong taek\\anaconda3\\lib\\site-packages\\pyproj\\crs\\crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n  in_crs_string = _prepare_from_proj_string(in_crs_string)\nC:\\Users\\seong taek\\anaconda3\\lib\\site-packages\\pyproj\\crs\\crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n  in_crs_string = _prepare_from_proj_string(in_crs_string)\n\n\n\n\n\n\n\n\n\ntag-local-identifier\n\n\ngeometry\n\n\n\n\n\n\n0\n\n\n30048\n\n\nPOINT (-90.12992 20.73242)\n\n\n\n\n1\n\n\n30054\n\n\nPOINT (-93.60861 46.50563)\n\n\n\n\n2\n\n\n30198\n\n\nPOINT (-80.31036 25.92545)\n\n\n\n\n3\n\n\n30263\n\n\nPOINT (-76.78146 42.99209)\n\n\n\n\n4\n\n\n30275\n\n\nPOINT (-76.78213 42.99207)\n\n\n\n\n\n\n다음 코드 셀을 사용하여 각 새의 최종 위치를 포함하는 GeoDataFrame end_gdf를 만듭니다.\n- 형식은 start_gdf의 형식과 동일해야 하며 두 개의 열(“태그-로컬 식별자”) 및 (“기하학”)열에 점 객체가 포함되어 있어야 합니다. - end_gdf의 CRS를 {init}: ‘epsg:4326’}(으)로 설정합니다.\n# Your code here\nend_df = birds.groupby(\"tag-local-identifier\")['geometry'].apply(list).apply(lambda x: x[-1]).reset_index()\nend_gdf = gpd.GeoDataFrame(end_df, geometry=end_df.geometry)\nend_gdf.columns = ['tag-local-identifier', 'geometry']\n\nend_gdf\n\n\n\n\n\n\n\n\n\ntag-local-identifier\n\n\ngeometry\n\n\n\n\n\n\n0\n\n\n30048\n\n\nPOINT (-47.53632 -4.43758)\n\n\n\n\n1\n\n\n30054\n\n\nPOINT (-62.47914 -5.03840)\n\n\n\n\n2\n\n\n30198\n\n\nPOINT (-57.46417 -2.77617)\n\n\n\n\n3\n\n\n30263\n\n\nPOINT (-50.19230 -5.70504)\n\n\n\n\n4\n\n\n30275\n\n\nPOINT (-57.70404 -16.72336)\n\n\n\n\n5\n\n\n30300\n\n\nPOINT (-50.22547 -9.84450)\n\n\n\n\n6\n\n\n30304\n\n\nPOINT (-52.55503 -5.85648)\n\n\n\n\n7\n\n\n30380\n\n\nPOINT (-63.98744 -2.93250)\n\n\n\n\n8\n\n\n30384\n\n\nPOINT (-51.85126 -2.90570)\n\n\n\n\n9\n\n\n30445\n\n\nPOINT (-53.97454 -2.35599)\n\n\n\n\n10\n\n\n30448\n\n\nPOINT (-59.50059 -3.91805)\n\n\n\n\n\n\n\n\n2.4 Where does each bird start and end its journey? (Part 2)\n위 질문(path_gdf, start_gdf 및 end_gdf)의 GeoDataFrames를 사용하여 모든 새의 경로를 단일 맵에 시각화합니다. 또한 미주 지역 데이터 프레임을 사용할 수도 있습니다.\n### Your code here\n\n# americas GeoDataFrame을 사용하여 미주 지역 지도를 만듭니다\nax = americas.plot(figsize=(12,8), color='white', edgecolor='black')\n\n# path_gdf, start_gdf, end_gdf GeoDataFrame을 사용하여 모든 새의 이동 경로, 출발점 및 도착점을 지도에 추가합니다\npath_gdf.plot(ax=ax, color='red', linewidth=0.5)\nstart_gdf.plot(ax=ax, color='blue', markersize=10)\nend_gdf.plot(ax=ax, color='green', markersize=10)\n\n# 제목, 범례 추가\nax.set_title(\"Migration of Purple Martins in Americas\")\nax.legend(['Bird Path', 'Starting Point', 'Ending Point'])\n\n# 출력\nplt.show()\n\n\n\npng\n\n\n\n\n2.5 Where are the protected areas in South America? (Part 1)\n\n모든 새들이 결국 남아메리카 어딘가에 도착하는 것처럼 보입니다. 하지만 그들은 보호구역으로 갈 것입니까?\n다음 코드 셀에서는 남미의 모든 보호 영역의 위치를 포함하는 GeoDataFrame protected_areas를 만듭니다. 해당 셰이프 파일은 filepath protected_filepath에 있습니다\n\n# Path of the shapefile to load\nprotected_filepath = \"C:/Users\\seong taek/Desktop/archive/SAPA_Aug2019-shapefile/SAPA_Aug2019-shapefile/SAPA_Aug2019-shapefile-polygons.shp\"\n\n# Your code here\nprotected_areas = gpd.read_file(protected_filepath)\nprotected_areas.head()\n\n\n\n\n\n\n\n\n\nWDPAID\n\n\nWDPA_PID\n\n\nPA_DEF\n\n\nNAME\n\n\nORIG_NAME\n\n\nDESIG\n\n\nDESIG_ENG\n\n\nDESIG_TYPE\n\n\nIUCN_CAT\n\n\nINT_CRIT\n\n\n…\n\n\nGOV_TYPE\n\n\nOWN_TYPE\n\n\nMANG_AUTH\n\n\nMANG_PLAN\n\n\nVERIF\n\n\nMETADATAID\n\n\nSUB_LOC\n\n\nPARENT_ISO\n\n\nISO3\n\n\ngeometry\n\n\n\n\n\n\n0\n\n\n14067.0\n\n\n14067\n\n\n1\n\n\nHet Spaans Lagoen\n\n\nHet Spaans Lagoen\n\n\nRamsar Site, Wetland of International Importance\n\n\nRamsar Site, Wetland of International Importance\n\n\nInternational\n\n\nNot Reported\n\n\nNot Reported\n\n\n…\n\n\nNot Reported\n\n\nNot Reported\n\n\nNot Reported\n\n\nManagement plan is not implemented and not ava…\n\n\nState Verified\n\n\n1856\n\n\nNot Reported\n\n\nNLD\n\n\nABW\n\n\nPOLYGON ((-69.97523 12.47379, -69.97523 12.473…\n\n\n\n\n1\n\n\n14003.0\n\n\n14003\n\n\n1\n\n\nBubali Pond Bird Sanctuary\n\n\nBubali Pond Bird Sanctuary\n\n\nBird Sanctuary\n\n\nBird Sanctuary\n\n\nNational\n\n\nNot Reported\n\n\nNot Applicable\n\n\n…\n\n\nNot Reported\n\n\nNot Reported\n\n\nNot Reported\n\n\nNot Reported\n\n\nState Verified\n\n\n1899\n\n\nNot Reported\n\n\nNLD\n\n\nABW\n\n\nPOLYGON ((-70.04734 12.56329, -70.04615 12.563…\n\n\n\n\n2\n\n\n555624439.0\n\n\n555624439\n\n\n1\n\n\nArikok National Park\n\n\nArikok National Park\n\n\nNational Park\n\n\nNational Park\n\n\nNational\n\n\nNot Reported\n\n\nNot Applicable\n\n\n…\n\n\nNon-profit organisations\n\n\nNon-profit organisations\n\n\nFundacion Parke Nacional Arikok\n\n\nNot Reported\n\n\nState Verified\n\n\n1899\n\n\nNot Reported\n\n\nNLD\n\n\nABW\n\n\nMULTIPOLYGON (((-69.96302 12.48384, -69.96295 …\n\n\n\n\n3\n\n\n303894.0\n\n\n303894\n\n\n1\n\n\nMadidi\n\n\nMadidi\n\n\nArea Natural de Manejo Integrado\n\n\nNatural Integrated Management Area\n\n\nNational\n\n\nNot Reported\n\n\nNot Applicable\n\n\n…\n\n\nFederal or national ministry or agency\n\n\nNot Reported\n\n\nNot Reported\n\n\nNot Reported\n\n\nState Verified\n\n\n1860\n\n\nBO-L\n\n\nBOL\n\n\nBOL\n\n\nPOLYGON ((-68.59060 -14.43388, -68.59062 -14.4…\n\n\n\n\n4\n\n\n303893.0\n\n\n303893\n\n\n1\n\n\nApolobamba\n\n\nApolobamba\n\n\nArea Natural de Manejo Integado Nacional\n\n\nNational Natural Integrated Management Area\n\n\nNational\n\n\nNot Reported\n\n\nNot Applicable\n\n\n…\n\n\nFederal or national ministry or agency\n\n\nNot Reported\n\n\nNot Reported\n\n\nNot Reported\n\n\nState Verified\n\n\n1860\n\n\nBO-L\n\n\nBOL\n\n\nBOL\n\n\nPOLYGON ((-69.20949 -14.73334, -69.20130 -14.7…\n\n\n\n\n\n\n5 rows × 29 columns\n\n\n\n\n2.6 Where are the protected areas in South America? (Part 2)\nprotected_areas GeoDataFrame을 사용하여 남미의 보호지역 위치를 표시하는 플롯을 만듭니다. (일부 보호지역은 육지에, 다른 보호지역은 해양에 있음을 알 수 있습니다.)\n# Country boundaries in South America\nsouth_america = americas.loc[americas['continent']=='South America']\n\n### Your code here: plot protected areas in South America\n\n# 보호지역 데이터를 지도에 그리기\nax = south_america.plot(color='white', edgecolor='black')\nprotected_areas.plot(ax=ax, alpha=0.5, color='green')\n\n# 플롯 출력하기\nplt.show()\n\n\n\npng\n\n\n\n\n2.7 What percentage of South America is protected?\n\n여러분은 남아메리카의 몇 퍼센트가 보호되고 있는지를 결정하는 데 관심이 있습니다. 그래서 여러분은 남아메리카의 어느 정도가 새들에게 적합한지를 알 수 있습니다\n첫 번째 단계로 남아메리카의 모든 보호 지역(해양 지역 제외)의 총 면적을 계산합니다. 이렇게 하려면 “REP_AREA” 및 “REP_M_AREA” 열을 사용합니다. 여기에는 각각 총 면적과 총 해양 면적이 평방 킬로미터로 포함됩니다.\n아래 코드 셀을 변경하지 않고 실행합니다.\n\nP_Area = sum(protected_areas['REP_AREA']-protected_areas['REP_M_AREA'])\nprint(\"South America has {} square kilometers of protected areas.\".format(P_Area))\nSouth America has 5396761.9116883585 square kilometers of protected areas.\n그런 다음 계산을 마치려면 south_america GeoDataFrame을 사용합니다.\nsouth_america.head()\n\n\n\n\n\n\n\n\n\npop_est\n\n\ncontinent\n\n\nname\n\n\niso_a3\n\n\ngdp_md_est\n\n\ngeometry\n\n\n\n\n\n\n9\n\n\n44938712.0\n\n\nSouth America\n\n\nArgentina\n\n\nARG\n\n\n445445\n\n\nMULTIPOLYGON (((-68.63401 -52.63637, -68.25000…\n\n\n\n\n10\n\n\n18952038.0\n\n\nSouth America\n\n\nChile\n\n\nCHL\n\n\n282318\n\n\nMULTIPOLYGON (((-68.63401 -52.63637, -68.63335…\n\n\n\n\n20\n\n\n3398.0\n\n\nSouth America\n\n\nFalkland Is.\n\n\nFLK\n\n\n282\n\n\nPOLYGON ((-61.20000 -51.85000, -60.00000 -51.2…\n\n\n\n\n28\n\n\n3461734.0\n\n\nSouth America\n\n\nUruguay\n\n\nURY\n\n\n56045\n\n\nPOLYGON ((-57.62513 -30.21629, -56.97603 -30.1…\n\n\n\n\n29\n\n\n211049527.0\n\n\nSouth America\n\n\nBrazil\n\n\nBRA\n\n\n1839758\n\n\nPOLYGON ((-53.37366 -33.76838, -53.65054 -33.2…\n\n\n\n\n\n\n다음 단계를 수행하여 남미의 총 면적을 계산합니다: - 각 폴리곤의 면적 속성(CRS로 EPSG 3035 사용)을 사용하여 각 국가의 면적을 계산하고 결과를 합산합니다. 계산된 면적은 제곱미터 단위가 될 것입니다. - 제곱킬로미터의 단위를 갖도록 답변을 변환합니다\n### Your code here: Calculate the total area of South America (in square kilometers)\n\n# CRS를 EPSG 3035로 설정합니다.\nsouth_america = south_america.to_crs(epsg=3035)\n\n# 남미의 면적을 계산합니다.\nsouth_america_area = south_america.area/10**6  # 제곱미터에서 제곱킬로미터로 변환\n\n# 결과를 합산합니다.\ntotal_area = south_america_area.sum()\n\nprint(\"남미의 총 면적은 {:.2f} 제곱킬로미터입니다.\".format(total_area))\n남미의 총 면적은 17759005.82 제곱킬로미터입니다.\n아래 코드 셀을 실행하여 보호되는 남미의 백분율을 계산합니다.\n# What percentage of South America is protected?\npercentage_protected = P_Area/total_area\nprint('Approximately {}% of South America is protected.'.format(round(percentage_protected*100, 2)))\nApproximately 30.39% of South America is protected.\n\n\n2.8 Where are the birds in South America?\n그렇다면, 그 새들은 보호 구역에 있을까요?\n모든 새들과 남아메리카에서 발견된 모든 위치를 보여주는 플롯을 만듭니다. 또한 남미의 모든 보호 지역의 위치를 표시합니다\n순수하게 해양 영역(육지 구성 요소가 없음)인 보호 영역을 제외하려면 “MARINE” 열을 사용하면 됩니다 - To exclude protected areas that are purely marine areas (with no land component), you can use the “MARINE” column (and plot only the rows in protected_areas[protected_areas[‘MARINE’]!=‘2’], instead of every row in the protected_areas GeoDataFrame).\n### Your code here\n\n# 플롯 만들기\nfig, ax = plt.subplots(figsize=(12,8))\n\n# 보호구역 (protected_areas[protected_areas['MARINE']!='2'])\nprotected_areas[protected_areas['MARINE']!='2'].plot(ax=ax, color='green', alpha=0.2)\n\n# 새 위치\nbirds.plot(ax=ax, markersize=10, color='blue', alpha=0.5)\n\n# 제목\nax.set_title(\"Bird locations and protected areas in South America\")\nax.set_xlabel(\"Longitude\")\nax.set_ylabel(\"Latitude\")\n\n# 그래프 출력\nplt.show()\n\n\n\npng"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise2/exercise2-coordinate-reference-systems.html#keep-going",
    "href": "posts_work/Data_Mining_exercise2/exercise2-coordinate-reference-systems.html#keep-going",
    "title": "Data_Mining_Kaggle",
    "section": "3 Keep going",
    "text": "3 Keep going\nCreate stunning interactive maps with your geospatial data.\n\nHave questions or comments? Visit the course discussion forum to chat with other learners."
  },
  {
    "objectID": "posts_work/Data_Mining_exercise4/exercise4-manipulating-geospatial-data.html",
    "href": "posts_work/Data_Mining_exercise4/exercise4-manipulating-geospatial-data.html",
    "title": "Data_Mining_Kaggle",
    "section": "",
    "text": "Exercise 4 - Manipulating Geospatial Data\nThis notebook is an exercise in the Geospatial Analysis course. You can reference the tutorial at this link."
  },
  {
    "objectID": "posts_work/Data_Mining_exercise4/exercise4-manipulating-geospatial-data.html#introduction",
    "href": "posts_work/Data_Mining_exercise4/exercise4-manipulating-geospatial-data.html#introduction",
    "title": "Data_Mining_Kaggle",
    "section": "1 Introduction",
    "text": "1 Introduction\nYou are a Starbucks big data analyst (that’s a real job!) looking to find the next store into a Starbucks Reserve Roastery. These roasteries are much larger than a typical Starbucks store and have several additional features, including various food and wine options, along with upscale lounge areas. You’ll investigate the demographics of various counties in the state of California, to determine potentially suitable locations.\n\n\n\nBefore you get started, run the code cell below to set everything up.\n\n당신은 스타벅스의 빅데이터 분석가입니다. (그것은 진정한 직업입니다!) 스타벅스 리저브 로스터리에서 다음 매장을 찾고 있습니다. 이 로스터리는 일반적인 스타벅스 매장보다 훨씬 크고 고급 라운지 공간과 함께 다양한 음식과 와인 옵션을 포함한 몇 가지 추가 기능을 갖추고 있습니다. 캘리포니아 주의 다양한 카운티의 인구 통계를 조사하여 잠재적으로 적합한 위치를 결정합니다.\n시작하기 전에 아래의 코드 셀을 실행하여 모든 설정을 수행합니다\n\n#!pip install geopy\nimport math\nimport pandas as pd\nimport geopandas as gpd\nfrom geopy.geocoders import Nominatim\nimport folium \nfrom folium import Marker\nfrom folium.plugins import MarkerCluster\n이전 연습의 embed_map() 함수를 사용하여 지도를 시각화합니다.\ndef embed_map(m, file_name):\n    from IPython.display import IFrame\n    m.save(file_name)\n    return IFrame(file_name, width='100%', height='500px')"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise4/exercise4-manipulating-geospatial-data.html#exercises",
    "href": "posts_work/Data_Mining_exercise4/exercise4-manipulating-geospatial-data.html#exercises",
    "title": "Data_Mining_Kaggle",
    "section": "2 Exercises",
    "text": "2 Exercises\n\n2.1 누락된 위치를 지오코드합니다\n다음 코드 셀을 실행하여 캘리포니아 주에 있는 스타벅스 위치가 포함된 데이터 프레임 스타벅스를 만듭니다.\n# Load and preview Starbucks locations in California\nstarbucks = pd.read_csv(\"C:/Users\\seong taek/Desktop/archive/starbucks_locations.csv\")\nstarbucks.head()\n\n\n\n\n\n\n\n\n\nStore Number\n\n\nStore Name\n\n\nAddress\n\n\nCity\n\n\nLongitude\n\n\nLatitude\n\n\n\n\n\n\n0\n\n\n10429-100710\n\n\nPalmdale & Hwy 395\n\n\n14136 US Hwy 395 Adelanto CA\n\n\nAdelanto\n\n\n-117.40\n\n\n34.51\n\n\n\n\n1\n\n\n635-352\n\n\nKanan & Thousand Oaks\n\n\n5827 Kanan Road Agoura CA\n\n\nAgoura\n\n\n-118.76\n\n\n34.16\n\n\n\n\n2\n\n\n74510-27669\n\n\nVons-Agoura Hills #2001\n\n\n5671 Kanan Rd. Agoura Hills CA\n\n\nAgoura Hills\n\n\n-118.76\n\n\n34.15\n\n\n\n\n3\n\n\n29839-255026\n\n\nTarget Anaheim T-0677\n\n\n8148 E SANTA ANA CANYON ROAD AHAHEIM CA\n\n\nAHAHEIM\n\n\n-117.75\n\n\n33.87\n\n\n\n\n4\n\n\n23463-230284\n\n\nSafeway - Alameda 3281\n\n\n2600 5th Street Alameda CA\n\n\nAlameda\n\n\n-122.28\n\n\n37.79\n\n\n\n\n\n\n대부분의 상점은 알려진 위치(위도, 경도)를 가지고 있습니다. 하지만, 버클리 시의 모든 장소가 사라졌습니다\n# How many rows in each column have missing values?\nprint(starbucks.isnull().sum())\n\n# View rows with missing locations\nrows_with_missing = starbucks[starbucks[\"City\"]==\"Berkeley\"]\nrows_with_missing\nStore Number    0\nStore Name      0\nAddress         0\nCity            0\nLongitude       5\nLatitude        5\ndtype: int64\n\n\n\n\n\n\n\n\n\nStore Number\n\n\nStore Name\n\n\nAddress\n\n\nCity\n\n\nLongitude\n\n\nLatitude\n\n\n\n\n\n\n153\n\n\n5406-945\n\n\n2224 Shattuck - Berkeley\n\n\n2224 Shattuck Avenue Berkeley CA\n\n\nBerkeley\n\n\nNaN\n\n\nNaN\n\n\n\n\n154\n\n\n570-512\n\n\nSolano Ave\n\n\n1799 Solano Avenue Berkeley CA\n\n\nBerkeley\n\n\nNaN\n\n\nNaN\n\n\n\n\n155\n\n\n17877-164526\n\n\nSafeway - Berkeley #691\n\n\n1444 Shattuck Place Berkeley CA\n\n\nBerkeley\n\n\nNaN\n\n\nNaN\n\n\n\n\n156\n\n\n19864-202264\n\n\nTelegraph & Ashby\n\n\n3001 Telegraph Avenue Berkeley CA\n\n\nBerkeley\n\n\nNaN\n\n\nNaN\n\n\n\n\n157\n\n\n9217-9253\n\n\n2128 Oxford St.\n\n\n2128 Oxford Street Berkeley CA\n\n\nBerkeley\n\n\nNaN\n\n\nNaN\n\n\n\n\n\n\n아래 코드 셀을 사용하여 이러한 값을 Nominatim 지오코더로 채웁니다.\n튜토리얼에서 Nominatim()(geopy.geocoders에서)을 사용하여 값을 지오코딩했으며, 이는 본 과정 이외의 프로젝트에서 사용할 수 있는 것입니다.\n이 연습에서는 (learn tools.geospatic에서) 약간 다른 함수 Nominatim()을 사용합니다.도구). 이 기능은 노트북 상단에 가져온 것으로 GeoPandas의 기능과 동일하게 작동합니다.\n즉, 다음과 같은 경우에 한합니다:\n노트북 상단에 있는 가져오기 문을 변경하지 않습니다 당신은 아래의 코드 셀에서 지오코딩 함수를 지오코딩이라고 부릅니다, 코드가 의도한 대로 작동합니다!\n# Create the geocoder\ngeolocator = Nominatim(user_agent=\"kaggle_learn\")\n\n# Your code here\ndef my_geocoder(row):\n    point = geolocator.geocode(row).point\n    return pd.Series({'Latitude': point.latitude, 'Longitude': point.longitude})\n\nberkeley_locations = rows_with_missing.apply(lambda x: my_geocoder(x['Address']), axis=1)\nstarbucks.update(berkeley_locations)\n\nstarbucks\n\n\n\n\n\n\n\n\n\nStore Number\n\n\nStore Name\n\n\nAddress\n\n\nCity\n\n\nLongitude\n\n\nLatitude\n\n\n\n\n\n\n0\n\n\n10429-100710\n\n\nPalmdale & Hwy 395\n\n\n14136 US Hwy 395 Adelanto CA\n\n\nAdelanto\n\n\n-117.40\n\n\n34.51\n\n\n\n\n1\n\n\n635-352\n\n\nKanan & Thousand Oaks\n\n\n5827 Kanan Road Agoura CA\n\n\nAgoura\n\n\n-118.76\n\n\n34.16\n\n\n\n\n2\n\n\n74510-27669\n\n\nVons-Agoura Hills #2001\n\n\n5671 Kanan Rd. Agoura Hills CA\n\n\nAgoura Hills\n\n\n-118.76\n\n\n34.15\n\n\n\n\n3\n\n\n29839-255026\n\n\nTarget Anaheim T-0677\n\n\n8148 E SANTA ANA CANYON ROAD AHAHEIM CA\n\n\nAHAHEIM\n\n\n-117.75\n\n\n33.87\n\n\n\n\n4\n\n\n23463-230284\n\n\nSafeway - Alameda 3281\n\n\n2600 5th Street Alameda CA\n\n\nAlameda\n\n\n-122.28\n\n\n37.79\n\n\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n\n\n2816\n\n\n14071-108147\n\n\nHwy 20 & Tharp - Yuba City\n\n\n1615 Colusa Hwy, Ste 100 Yuba City CA\n\n\nYuba City\n\n\n-121.64\n\n\n39.14\n\n\n\n\n2817\n\n\n9974-98559\n\n\nYucaipa & Hampton, Yucaipa\n\n\n31364 Yucaipa Blvd., A Yucaipa CA\n\n\nYucaipa\n\n\n-117.12\n\n\n34.03\n\n\n\n\n2818\n\n\n79654-108478\n\n\nVons - Yucaipa #1796\n\n\n33644 YUCAIPA BLVD YUCAIPA CA\n\n\nYUCAIPA\n\n\n-117.07\n\n\n34.04\n\n\n\n\n2819\n\n\n6438-245084\n\n\nYucaipa & 6th\n\n\n34050 Yucaipa Blvd., 200 Yucaipa CA\n\n\nYucaipa\n\n\n-117.06\n\n\n34.03\n\n\n\n\n2820\n\n\n6829-82142\n\n\nHighway 62 & Warren Vista\n\n\n57744 29 Palms Highway Yucca Valley CA\n\n\nYucca Valley\n\n\n-116.40\n\n\n34.13\n\n\n\n\n\n\n2821 rows × 6 columns\n\n\n\n\n2.2 2) Berkeley 위치를 봅니다.\n방금 찾은 위치를 살펴보겠습니다. OpenStreetMap 스타일로 Berkeley의 (위도, 경도) 위치를 시각화합니다.\n# Create a base map\nm_2 = folium.Map(location=[37.88,-122.26], zoom_start=13)\n\n# Your code here: Add a marker for each Berkeley location\nfor idx, row in starbucks[starbucks[\"City\"]=='Berkeley'].iterrows():\n    Marker([row['Latitude'], row['Longitude']]).add_to(m_2)\n\n# Show the map\nembed_map(m_2, 'q_2.html')\nm_2\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\nConsidering only the five locations in Berkeley, how many of the (latitude, longitude) locations seem potentially correct (are located in the correct city)?\n\n\n2.3 3) 데이터를 통합합니다.\n아래 코드를 실행하여 캘리포니아 주의 각 카운티에 대한 이름, 면적(제곱킬로미터) 및 고유 ID(“GEOID” 열)가 포함된 GeoDataFrame “CA_counties”를 로드합니다. 지오메트리 열에는 카운티 경계가 있는 폴리곤이 포함되어 있습니다.\nCA_counties = gpd.read_file(\"C:/Users\\seong taek/Desktop/archive/CA_county_boundaries/CA_county_boundaries/CA_county_boundaries.shp\")\nCA_counties.crs = {'init': 'epsg:4326'}\nCA_counties.head()\nC:\\Users\\seong taek\\anaconda3\\lib\\site-packages\\pyproj\\crs\\crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n  in_crs_string = _prepare_from_proj_string(in_crs_string)\n\n\n\n\n\n\n\n\n\nGEOID\n\n\nname\n\n\narea_sqkm\n\n\ngeometry\n\n\n\n\n\n\n0\n\n\n6091\n\n\nSierra County\n\n\n2491.995494\n\n\nPOLYGON ((-120.65560 39.69357, -120.65554 39.6…\n\n\n\n\n1\n\n\n6067\n\n\nSacramento County\n\n\n2575.258262\n\n\nPOLYGON ((-121.18858 38.71431, -121.18732 38.7…\n\n\n\n\n2\n\n\n6083\n\n\nSanta Barbara County\n\n\n9813.817958\n\n\nMULTIPOLYGON (((-120.58191 34.09856, -120.5822…\n\n\n\n\n3\n\n\n6009\n\n\nCalaveras County\n\n\n2685.626726\n\n\nPOLYGON ((-120.63095 38.34111, -120.63058 38.3…\n\n\n\n\n4\n\n\n6111\n\n\nVentura County\n\n\n5719.321379\n\n\nMULTIPOLYGON (((-119.63631 33.27304, -119.6360…\n\n\n\n\n\n\n다음으로 세 가지 데이터 프레임을 만듭니다:\n\nCA_pop에는 각 카운티의 인구 추정치가 포함되어 있습니다.\nCA_high_earner에는 연간 $150,000 이상의 소득을 가진 가구 수가 포함되어 있습니다.\nCA_median_age에는 각 카운티의 중위수 연령이 포함됩니다.\n\nCA_pop = pd.read_csv(\"C:/Users\\seong taek/Desktop/archive/CA_county_population.csv\", index_col=\"GEOID\")\nCA_high_earners = pd.read_csv(\"C:/Users\\seong taek/Desktop/archive/CA_county_high_earners.csv\", index_col=\"GEOID\")\nCA_median_age = pd.read_csv(\"C:/Users\\seong taek/Desktop/archive/CA_county_median_age.csv\", index_col=\"GEOID\")\n다음 코드 셀을 사용하여 CA_pop, CA_high_earners 및 CA_median_age와 함께 CA_counties GeoDataFrame에 join 합니다.\n결과 GeoDataFrame CA_stats의 이름을 지정하고 “GEOID”, “name”, “area_sqkm”, “geometry”, “population”, “high_earners” 및 “median_age”의 8개 열이 있는지 확인합니다.\n# Your code here\ncols_to_add = CA_pop.join([CA_high_earners, CA_median_age]).reset_index()\nCA_stats = CA_counties.merge(cols_to_add, on=\"GEOID\")\n\nCA_stats.head()\n\n\n\n\n\n\n\n\n\nGEOID\n\n\nname\n\n\narea_sqkm\n\n\ngeometry\n\n\npopulation\n\n\nhigh_earners\n\n\nmedian_age\n\n\n\n\n\n\n0\n\n\n6091\n\n\nSierra County\n\n\n2491.995494\n\n\nPOLYGON ((-120.65560 39.69357, -120.65554 39.6…\n\n\n2987\n\n\n111\n\n\n55.0\n\n\n\n\n1\n\n\n6067\n\n\nSacramento County\n\n\n2575.258262\n\n\nPOLYGON ((-121.18858 38.71431, -121.18732 38.7…\n\n\n1540975\n\n\n65768\n\n\n35.9\n\n\n\n\n2\n\n\n6083\n\n\nSanta Barbara County\n\n\n9813.817958\n\n\nMULTIPOLYGON (((-120.58191 34.09856, -120.5822…\n\n\n446527\n\n\n25231\n\n\n33.7\n\n\n\n\n3\n\n\n6009\n\n\nCalaveras County\n\n\n2685.626726\n\n\nPOLYGON ((-120.63095 38.34111, -120.63058 38.3…\n\n\n45602\n\n\n2046\n\n\n51.6\n\n\n\n\n4\n\n\n6111\n\n\nVentura County\n\n\n5719.321379\n\n\nMULTIPOLYGON (((-119.63631 33.27304, -119.6360…\n\n\n850967\n\n\n57121\n\n\n37.5\n\n\n\n\n\n\n이제 모든 데이터가 한 곳에 있으므로 열 조합을 사용하는 통계량을 계산하는 것이 훨씬 쉬워졌습니다. 다음 코드 셀을 실행하여 모집단 밀도가 있는 “밀도” 열을 만듭니다.\nCA_stats[\"density\"] = CA_stats[\"population\"] / CA_stats[\"area_sqkm\"]\n\n\n2.4 4) 어느 카운티가 유망해 보이나요?\n모든 정보를 단일 GeoDataFrame으로 통합하면 특정 기준을 충족하는 카운티를 훨씬 쉽게 선택할 수 있습니다.\n다음 코드 셀을 사용하여 CA_stats GeoDataFrame에서 행의 하위 집합(및 모든 열)을 포함하는 GeoDataFramesel_counties를 만듭니다. 특히 다음과 같은 국가를 선택해야 합니다:\n\n매년 15만 달러를 버는 최소 10만 가구가 있습니다,\n중위연령은 38.5세 미만이고\n거주자의 밀도는 최소 285(제곱킬로미터당)입니다.\n\n또한 선택된 카운티는 다음 기준 중 하나 이상을 충족해야 합니다:\n\n매년 15만 달러를 버는 최소 50만 가구가 있습니다,\n중위연령이 35.5세 미만인 경우\n거주자의 밀도는 적어도 1400(평방킬로미터당)입니다.\n\n# Your code here\n# Your code here\nsel_counties = CA_stats[((CA_stats.high_earners > 100000) &\n                         (CA_stats.median_age < 38.5) &\n                         (CA_stats.density > 285) &\n                         ((CA_stats.median_age < 35.5) |\n                         (CA_stats.density > 1400) |\n                         (CA_stats.high_earners > 500000)))]\n\nsel_counties.head()\n\n\n\n\n\n\n\n\n\nGEOID\n\n\nname\n\n\narea_sqkm\n\n\ngeometry\n\n\npopulation\n\n\nhigh_earners\n\n\nmedian_age\n\n\ndensity\n\n\n\n\n\n\n5\n\n\n6037\n\n\nLos Angeles County\n\n\n12305.376879\n\n\nMULTIPOLYGON (((-118.66761 33.47749, -118.6682…\n\n\n10105518\n\n\n501413\n\n\n36.0\n\n\n821.227834\n\n\n\n\n8\n\n\n6073\n\n\nSan Diego County\n\n\n11721.342229\n\n\nPOLYGON ((-117.43744 33.17953, -117.44955 33.1…\n\n\n3343364\n\n\n194676\n\n\n35.4\n\n\n285.237299\n\n\n\n\n10\n\n\n6075\n\n\nSan Francisco County\n\n\n600.588247\n\n\nMULTIPOLYGON (((-122.60025 37.80249, -122.6123…\n\n\n883305\n\n\n114989\n\n\n38.3\n\n\n1470.733077\n\n\n\n\n\n\n\n\n2.5 5) 당신은 몇 개의 상점을 확인했습니까?\n다음 스타벅스 리저브 로스터리 위치를 찾을 때는 선택한 카운티 내의 모든 매장을 고려해야 합니다. 그렇다면, 선택된 카운티 내에 몇 개의 상점이 있을까요?\n이 질문에 대한 답변을 준비하려면 다음 코드 셀을 실행하여 모든 스타벅스 위치와 함께 GeoDataFrame stabs_gdf를 만듭니다.\nstarbucks_gdf = gpd.GeoDataFrame(starbucks, geometry=gpd.points_from_xy(starbucks.Longitude, starbucks.Latitude))\nstarbucks_gdf.crs = {'init': 'epsg:4326'}\nC:\\Users\\seong taek\\anaconda3\\lib\\site-packages\\pyproj\\crs\\crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n  in_crs_string = _prepare_from_proj_string(in_crs_string)\n그렇다면, 당신이 선택한 county에는 몇 개의 가게가 있나요?\n# Fill in your answer\nlocations_of_interest = gpd.sjoin(starbucks_gdf, sel_counties)\nnum_stores = len(locations_of_interest)\nnum_stores\n1043\n\n\n2.6 6) 저장소 위치를 시각화합니다.\n이전 질문에서 식별한 상점의 위치를 보여주는 맵을 만듭니다.\n# Create a base map\nm_6 = folium.Map(location=[37,-120], zoom_start=6)\n\n# Your code here: show selected store locations\nmc = MarkerCluster()\n\nlocations_of_interest = gpd.sjoin(starbucks_gdf, sel_counties)\nfor idx, row in locations_of_interest.iterrows():\n    if not math.isnan(row['Longitude']) and not math.isnan(row['Latitude']):\n        mc.add_child(folium.Marker([row['Latitude'], row['Longitude']]))\nm_6.add_child(mc)\n\n# Show the map\nembed_map(m_6, 'q_6.html')\nm_6\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise4/exercise4-manipulating-geospatial-data.html#keep-going",
    "href": "posts_work/Data_Mining_exercise4/exercise4-manipulating-geospatial-data.html#keep-going",
    "title": "Data_Mining_Kaggle",
    "section": "3 Keep going",
    "text": "3 Keep going\nLearn about how proximity analysis can help you to understand the relationships between points on a map.\n\nHave questions or comments? Visit the course discussion forum to chat with other learners."
  },
  {
    "objectID": "posts_work/Data_Mining_exercise5/exercise5-proximity-analysis.html",
    "href": "posts_work/Data_Mining_exercise5/exercise5-proximity-analysis.html",
    "title": "Data_Mining_Kaggle",
    "section": "",
    "text": "Exercise 5 - Proximity Analysis\nThis notebook is an exercise in the Geospatial Analysis course. You can reference the tutorial at this link."
  },
  {
    "objectID": "posts_work/Data_Mining_exercise5/exercise5-proximity-analysis.html#introduction",
    "href": "posts_work/Data_Mining_exercise5/exercise5-proximity-analysis.html#introduction",
    "title": "Data_Mining_Kaggle",
    "section": "1 Introduction",
    "text": "1 Introduction\nYou are part of a crisis response team, and you want to identify how hospitals have been responding to crash collisions in New York City.\n\n\n\nBefore you get started, run the code cell below to set everything up.\n여러분은 위기 대응 팀의 일원이며, 뉴욕시에서 발생한 충돌 사고에 대해 병원이 어떻게 대응해 왔는지를 파악하려고 합니다. 시작하기 전에 아래의 코드 셀을 실행하여 모든 설정을 수행합니다.\nimport math\nimport geopandas as gpd\nimport pandas as pd\nfrom shapely.geometry import MultiPolygon\n\nimport folium\nfrom folium import Choropleth, Marker\nfrom folium.plugins import HeatMap, MarkerCluster\nembed_map() 함수를 사용하여 지도를 시각화합니다.\ndef embed_map(m, file_name):\n    from IPython.display import IFrame\n    m.save(file_name)\n    return IFrame(file_name, width='100%', height='500px')"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise5/exercise5-proximity-analysis.html#exercises",
    "href": "posts_work/Data_Mining_exercise5/exercise5-proximity-analysis.html#exercises",
    "title": "Data_Mining_Kaggle",
    "section": "2 Exercises",
    "text": "2 Exercises\n\n2.1 1) 충돌 데이터를 시각화합니다.\n아래 코드 셀을 실행하여 2013-2018년 주요 자동차 충돌을 추적하는 GeoDataFrame 충돌을 로드합니다.\ncollisions = gpd.read_file(\"C:/Users\\seong taek/Desktop/archive/NYPD_Motor_Vehicle_Collisions/NYPD_Motor_Vehicle_Collisions/NYPD_Motor_Vehicle_Collisions.shp\")\ncollisions.head()\n\n\n\n\n\n\n\n\n\nDATE\n\n\nTIME\n\n\nBOROUGH\n\n\nZIP CODE\n\n\nLATITUDE\n\n\nLONGITUDE\n\n\nLOCATION\n\n\nON STREET\n\n\nCROSS STRE\n\n\nOFF STREET\n\n\n…\n\n\nCONTRIBU_2\n\n\nCONTRIBU_3\n\n\nCONTRIBU_4\n\n\nUNIQUE KEY\n\n\nVEHICLE TY\n\n\nVEHICLE _1\n\n\nVEHICLE _2\n\n\nVEHICLE _3\n\n\nVEHICLE _4\n\n\ngeometry\n\n\n\n\n\n\n0\n\n\n07/30/2019\n\n\n0:00\n\n\nBRONX\n\n\n10464\n\n\n40.841100\n\n\n-73.784960\n\n\n(40.8411, -73.78496)\n\n\nNaN\n\n\nNaN\n\n\n121 PILOT STREET\n\n\n…\n\n\nUnspecified\n\n\nNaN\n\n\nNaN\n\n\n4180045\n\n\nSedan\n\n\nStation Wagon/Sport Utility Vehicle\n\n\nStation Wagon/Sport Utility Vehicle\n\n\nNaN\n\n\nNaN\n\n\nPOINT (1043750.211 245785.815)\n\n\n\n\n1\n\n\n07/30/2019\n\n\n0:10\n\n\nQUEENS\n\n\n11423\n\n\n40.710827\n\n\n-73.770660\n\n\n(40.710827, -73.77066)\n\n\nJAMAICA AVENUE\n\n\n188 STREET\n\n\nNaN\n\n\n…\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n4180007\n\n\nSedan\n\n\nSedan\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nPOINT (1047831.185 198333.171)\n\n\n\n\n2\n\n\n07/30/2019\n\n\n0:25\n\n\nNaN\n\n\nNaN\n\n\n40.880318\n\n\n-73.841286\n\n\n(40.880318, -73.841286)\n\n\nBOSTON ROAD\n\n\nNaN\n\n\nNaN\n\n\n…\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n4179575\n\n\nSedan\n\n\nStation Wagon/Sport Utility Vehicle\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nPOINT (1028139.293 260041.178)\n\n\n\n\n3\n\n\n07/30/2019\n\n\n0:35\n\n\nMANHATTAN\n\n\n10036\n\n\n40.756744\n\n\n-73.984590\n\n\n(40.756744, -73.98459)\n\n\nNaN\n\n\nNaN\n\n\n155 WEST 44 STREET\n\n\n…\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n4179544\n\n\nBox Truck\n\n\nStation Wagon/Sport Utility Vehicle\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nPOINT (988519.261 214979.320)\n\n\n\n\n4\n\n\n07/30/2019\n\n\n10:00\n\n\nBROOKLYN\n\n\n11223\n\n\n40.600090\n\n\n-73.965910\n\n\n(40.60009, -73.96591)\n\n\nAVENUE T\n\n\nOCEAN PARKWAY\n\n\nNaN\n\n\n…\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n4180660\n\n\nStation Wagon/Sport Utility Vehicle\n\n\nBike\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nPOINT (993716.669 157907.212)\n\n\n\n\n\n\n5 rows × 30 columns\n\n\n충돌 데이터를 시각화하기 위해 대화형 맵을 만들려면 “LATITUITUITY” 및 “LONGITUITY” 열을 사용합니다. 어떤 종류의 지도가 가장 효과적이라고 생각합니까?\nm_1 = folium.Map(location=[40.7, -74], zoom_start=11) \n\n# Your code here: Visualize the collision data\nHeatMap(data=collisions[['LATITUDE', 'LONGITUDE']], radius=9).add_to(m_1)\n\n# Show the map\nembed_map(m_1, \"q_1.html\")\nm_1\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\n\n2.2 2) 병원 범위를 이해합니다.\n다음 코드 셀을 실행하여 병원 데이터를 로드합니다.\nhospitals = gpd.read_file(\"C:/Users\\seong taek/Desktop/archive/nyu_2451_34494/nyu_2451_34494/nyu_2451_34494.shp\")\nhospitals.head()\n\n\n\n\n\n\n\n\n\nid\n\n\nname\n\n\naddress\n\n\nzip\n\n\nfactype\n\n\nfacname\n\n\ncapacity\n\n\ncapname\n\n\nbcode\n\n\nxcoord\n\n\nycoord\n\n\nlatitude\n\n\nlongitude\n\n\ngeometry\n\n\n\n\n\n\n0\n\n\n317000001H1178\n\n\nBRONX-LEBANON HOSPITAL CENTER - CONCOURSE DIVI…\n\n\n1650 Grand Concourse\n\n\n10457\n\n\n3102\n\n\nHospital\n\n\n415\n\n\nBeds\n\n\n36005\n\n\n1008872.0\n\n\n246596.0\n\n\n40.843490\n\n\n-73.911010\n\n\nPOINT (1008872.000 246596.000)\n\n\n\n\n1\n\n\n317000001H1164\n\n\nBRONX-LEBANON HOSPITAL CENTER - FULTON DIVISION\n\n\n1276 Fulton Ave\n\n\n10456\n\n\n3102\n\n\nHospital\n\n\n164\n\n\nBeds\n\n\n36005\n\n\n1011044.0\n\n\n242204.0\n\n\n40.831429\n\n\n-73.903178\n\n\nPOINT (1011044.000 242204.000)\n\n\n\n\n2\n\n\n317000011H1175\n\n\nCALVARY HOSPITAL INC\n\n\n1740-70 Eastchester Rd\n\n\n10461\n\n\n3102\n\n\nHospital\n\n\n225\n\n\nBeds\n\n\n36005\n\n\n1027505.0\n\n\n248287.0\n\n\n40.848060\n\n\n-73.843656\n\n\nPOINT (1027505.000 248287.000)\n\n\n\n\n3\n\n\n317000002H1165\n\n\nJACOBI MEDICAL CENTER\n\n\n1400 Pelham Pkwy\n\n\n10461\n\n\n3102\n\n\nHospital\n\n\n457\n\n\nBeds\n\n\n36005\n\n\n1027042.0\n\n\n251065.0\n\n\n40.855687\n\n\n-73.845311\n\n\nPOINT (1027042.000 251065.000)\n\n\n\n\n4\n\n\n317000008H1172\n\n\nLINCOLN MEDICAL & MENTAL HEALTH CENTER\n\n\n234 E 149 St\n\n\n10451\n\n\n3102\n\n\nHospital\n\n\n362\n\n\nBeds\n\n\n36005\n\n\n1005154.0\n\n\n236853.0\n\n\n40.816758\n\n\n-73.924478\n\n\nPOINT (1005154.000 236853.000)\n\n\n\n\n\n\n“위도” 및 “경도” 열을 사용하여 병원 위치를 시각화합니다.\nm_2 = folium.Map(location=[40.7, -74], zoom_start=11) \n\n# Your code here: Visualize the hospital locations\nfor idx, row in hospitals.iterrows():\n    Marker([row['latitude'], row['longitude']], popup=row['name']).add_to(m_2)\n\n# Show the map\nembed_map(m_2, \"q_2.html\")\nm_2\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\n\n2.3 3) 가장 가까운 병원이 10킬로미터 이상 떨어진 때는 언제였습니까?\n가장 가까운 병원에서 10km 이상 떨어진 곳에서 발생한 충돌로 인한 모든 행을 포함하는 DataFrame outside_range를 만듭니다.\n병원과 충돌은 모두 EPSG 2263을 좌표계로 사용하고 EPSG 2263은 미터 단위를 사용합니다.\n# Your code here\ncoverage = gpd.GeoDataFrame(geometry=hospitals.geometry).buffer(10000)\nmy_union = coverage.geometry.unary_union\noutside_range = collisions.loc[~collisions[\"geometry\"].apply(lambda x: my_union.contains(x))]\n다음 코드 셀은 가장 가까운 병원에서 10킬로미터 이상 떨어진 곳에서 발생한 충돌의 비율을 계산합니다.\npercentage = round(100*len(outside_range)/len(collisions), 2)\nprint(\"Percentage of collisions more than 10 km away from the closest hospital: {}%\".format(percentage))\nPercentage of collisions more than 10 km away from the closest hospital: 15.12%\n\n\n2.4 4) 추천자를 만들어 보세요.\n먼 곳에서 충돌이 발생할 경우 부상자를 가장 가까운 병원으로 이송하는 것이 더욱 중요합니다.\n이를 고려하여 다음과 같은 추천인을 생성하기로 결정합니다:\n\n충돌 위치(EPSG 2263)를 입력으로 사용합니다,\n가장 가까운 병원을 찾습니다(EPSG 2263에서 거리 계산이 수행되는 곳)\n가장 가까운 병원의 이름을 반환합니다.\n\ndef best_hospital(collision_location):\n    # Your code here\n    idx_min = hospitals.geometry.distance(collision_location).idxmin()\n    my_hospital = hospitals.iloc[idx_min]\n    name = my_hospital[\"name\"]\n    return name\n# Test your function: this should suggest CALVARY HOSPITAL INC\nprint(best_hospital(outside_range.geometry.iloc[0]))\nCALVARY HOSPITAL INC\n\n\n2.5 5) 가장 수요가 많은 병원은 어디입니까?\nOutside_range DataFrame에서 충돌만 고려할 때 가장 권장되는 병원은 무엇입니까?\n4)에서 생성한 함수가 반환한 병원 이름과 정확히 일치하는 파이썬 문자열이어야 합니다.\n# Your code here\nhighest_demand = outside_range.geometry.apply(best_hospital).value_counts().idxmax()\nhighest_demand\n'JAMAICA HOSPITAL MEDICAL CENTER'\n\n\n2.6 6) 서울시는 어디에 새로운 병원을 지어야 합니까?\n가장 가까운 병원에서 10km 이상 떨어진 곳에서 발생한 충돌 외에도 병원 위치를 시각화하려면 다음 코드 셀을 (변경 없이) 실행합니다.\nm_6 = folium.Map(location=[40.7, -74], zoom_start=11) \n\ncoverage = gpd.GeoDataFrame(geometry=hospitals.geometry).buffer(10000)\nfolium.GeoJson(coverage.geometry.to_crs(epsg=4326)).add_to(m_6)\nHeatMap(data=outside_range[['LATITUDE', 'LONGITUDE']], radius=9).add_to(m_6)\nfolium.LatLngPopup().add_to(m_6)\n\nembed_map(m_6, 'm_6.html')\nm_6\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n지도의 아무 곳이나 클릭하면 위도와 경도의 해당 위치가 있는 팝업이 나타납니다.\n뉴욕시는 두 개의 새로운 병원의 위치를 결정하는 데 도움을 요청합니다. 그들은 특히 3) 단계에서 계산된 백분율을 10% 미만으로 만들기 위해 위치를 식별하는 데 도움을 받기를 원합니다. 지도를 사용하여(그리고 구역법이나 병원을 짓기 위해 어떤 잠재적인 건물을 제거해야 할지에 대한 걱정 없이), 도시가 이 목표를 달성하는 데 도움이 될 두 곳을 식별할 수 있습니까?\n병원 1에 대해 제안된 위도와 경도를 각각 ’lat_1’과 ’long_1’에 입력합니다. (병원 2도 마찬가지입니다.)\n그런 다음 새 병원의 효과를 확인하기 위해 나머지 셀을 그대로 실행합니다. 만약 두 개의 새로운 병원이 그 비율을 10% 미만으로 만든다면, 당신의 대답은 정확하다고 표시될 것입니다.\n# Your answer here: proposed location of hospital 1\nlat_1 = 37\nlong_1 = 126\n\n# Your answer here: proposed location of hospital 2\nlat_2 = 37\nlong_2 = 126\n\n\n# Do not modify the code below this line\ntry:\n    new_df = pd.DataFrame(\n        {'Latitude': [lat_1, lat_2],\n         'Longitude': [long_1, long_2]})\n    new_gdf = gpd.GeoDataFrame(new_df, geometry=gpd.points_from_xy(new_df.Longitude, new_df.Latitude))\n    new_gdf.crs = {'init' :'epsg:4326'}\n    new_gdf = new_gdf.to_crs(epsg=2263)\n    # get new percentage\n    new_coverage = gpd.GeoDataFrame(geometry=new_gdf.geometry).buffer(10000)\n    new_my_union = new_coverage.geometry.unary_union\n    new_outside_range = outside_range.loc[~outside_range[\"geometry\"].apply(lambda x: new_my_union.contains(x))]\n    new_percentage = round(100*len(new_outside_range)/len(collisions), 2)\n    print(\"(NEW) Percentage of collisions more than 10 km away from the closest hospital: {}%\".format(new_percentage))\n\n    # make the map\n    m = folium.Map(location=[40.7, -74], zoom_start=11) \n    folium.GeoJson(coverage.geometry.to_crs(epsg=4326)).add_to(m)\n    folium.GeoJson(new_coverage.geometry.to_crs(epsg=4326)).add_to(m)\n    for idx, row in new_gdf.iterrows():\n        Marker([row['Latitude'], row['Longitude']]).add_to(m)\n    HeatMap(data=new_outside_range[['LATITUDE', 'LONGITUDE']], radius=9).add_to(m)\n    folium.LatLngPopup().add_to(m)\n    display(embed_map(m, 'q_6.html'))\nexcept:\n    q_6.hint()\n\nm\nC:\\Users\\seong taek\\anaconda3\\lib\\site-packages\\pyproj\\crs\\crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n  in_crs_string = _prepare_from_proj_string(in_crs_string)\n\n\n(NEW) Percentage of collisions more than 10 km away from the closest hospital: 15.12%\n\n\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise5/exercise5-proximity-analysis.html#congratulations",
    "href": "posts_work/Data_Mining_exercise5/exercise5-proximity-analysis.html#congratulations",
    "title": "Data_Mining_Kaggle",
    "section": "3 Congratulations!",
    "text": "3 Congratulations!\nYou have just completed the Geospatial Analysis micro-course! Great job!\n\nHave questions or comments? Visit the course discussion forum to chat with other learners."
  },
  {
    "objectID": "posts_work/Data_Mining_exercise3/exercise3-interactive-maps.html",
    "href": "posts_work/Data_Mining_exercise3/exercise3-interactive-maps.html",
    "title": "Data_Mining_Kaggle",
    "section": "",
    "text": "Exercise 3 - Interactive Maps\nThis notebook is an exercise in the Geospatial Analysis course. You can reference the tutorial at this link."
  },
  {
    "objectID": "posts_work/Data_Mining_exercise3/exercise3-interactive-maps.html#introduction",
    "href": "posts_work/Data_Mining_exercise3/exercise3-interactive-maps.html#introduction",
    "title": "Data_Mining_Kaggle",
    "section": "1 Introduction",
    "text": "1 Introduction\nYou are an urban safety planner in Japan, and you are analyzing which areas of Japan need extra earthquake reinforcement. Which areas are both high in population density and prone to earthquakes?\n\n\n\nBefore you get started, run the code cell below to set everything up.\n\n당신은 일본의 도시 안전 계획자이고, 당신은 일본의 어느 지역에서 추가적인 지진 보강이 필요한지 분석하고 있습니다. 인구 밀도가 높고 지진이 일어나기 쉬운 지역은 어디입니까?\n\nimport pandas as pd\nimport geopandas as gpd\n\n#!pip install folium\nimport folium\nfrom folium import Choropleth\nfrom folium.plugins import HeatMap\n\n대화형 맵을 표시하기 위한 함수 embed_map()을 정의합니다. 맵을 포함하는 변수와 맵이 저장될 HTML 파일의 이름이라는 두 가지 인수를 사용할 수 있습니다.\n이 기능을 사용하면 모든 웹 브라우저에서 지도를 볼 수 있습니다. 지도 보기.\n\ndef embed_map(m, file_name):\n    from IPython.display import IFrame\n    m.save(file_name)\n    return IFrame(file_name, width='100%', height='500px')"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise3/exercise3-interactive-maps.html#exercises",
    "href": "posts_work/Data_Mining_exercise3/exercise3-interactive-maps.html#exercises",
    "title": "Data_Mining_Kaggle",
    "section": "2 Exercises",
    "text": "2 Exercises\n\n2.1 지진은 판의 경계와 일치합니까?\n\n아래 코드 셀을 실행하여 전역 플레이트 경계를 표시하는 DataFrame plate_boundaries를 만듭니다. 좌표 열은 경계를 따라 위치(위도, 경도)의 목록입니다\n\nplate_boundaries = gpd.read_file(\"C:/Users\\seong taek/Desktop/archive/Plate_Boundaries/Plate_Boundaries/Plate_Boundaries.shp\")\nplate_boundaries['coordinates'] = plate_boundaries.apply(lambda x: [(b,a) for (a,b) in list(x.geometry.coords)], axis='columns')\nplate_boundaries.drop('geometry', axis=1, inplace=True)\n\nplate_boundaries.head()\n\n\n\n\n\n\n\n\n\nHAZ_PLATES\n\n\nHAZ_PLAT_1\n\n\nHAZ_PLAT_2\n\n\nShape_Leng\n\n\ncoordinates\n\n\n\n\n\n\n0\n\n\nTRENCH\n\n\nSERAM TROUGH (ACTIVE)\n\n\n6722\n\n\n5.843467\n\n\n[(-5.444200361999947, 133.6808931800001), (-5….\n\n\n\n\n1\n\n\nTRENCH\n\n\nWETAR THRUST\n\n\n6722\n\n\n1.829013\n\n\n[(-7.760600482999962, 125.47879802900002), (-7…\n\n\n\n\n2\n\n\nTRENCH\n\n\nTRENCH WEST OF LUZON (MANILA TRENCH) NORTHERN …\n\n\n6621\n\n\n6.743604\n\n\n[(19.817899819000047, 120.09999798800004), (19…\n\n\n\n\n3\n\n\nTRENCH\n\n\nBONIN TRENCH\n\n\n9821\n\n\n8.329381\n\n\n[(26.175899215000072, 143.20620700100005), (26…\n\n\n\n\n4\n\n\nTRENCH\n\n\nNEW GUINEA TRENCH\n\n\n8001\n\n\n11.998145\n\n\n[(0.41880004000006466, 132.8273013480001), (0….\n\n\n\n\n\n\n그런 다음 변경 없이 아래 코드 셀을 실행하여 과거 지진 데이터를 DataFrame earthquakes에 로드합니다\n# Load the data and print the first 5 rows\nearthquakes = pd.read_csv(\"C:/Users\\seong taek/Desktop/archive/earthquakes1970-2014.csv\", parse_dates=[\"DateTime\"])\nearthquakes.head()\n\n\n\n\n\n\n\n\n\nDateTime\n\n\nLatitude\n\n\nLongitude\n\n\nDepth\n\n\nMagnitude\n\n\nMagType\n\n\nNbStations\n\n\nGap\n\n\nDistance\n\n\nRMS\n\n\nSource\n\n\nEventID\n\n\n\n\n\n\n0\n\n\n1970-01-04 17:00:40.200\n\n\n24.139\n\n\n102.503\n\n\n31.0\n\n\n7.5\n\n\nMs\n\n\n90.0\n\n\nNaN\n\n\nNaN\n\n\n0.0\n\n\nNEI\n\n\n1.970010e+09\n\n\n\n\n1\n\n\n1970-01-06 05:35:51.800\n\n\n-9.628\n\n\n151.458\n\n\n8.0\n\n\n6.2\n\n\nMs\n\n\n85.0\n\n\nNaN\n\n\nNaN\n\n\n0.0\n\n\nNEI\n\n\n1.970011e+09\n\n\n\n\n2\n\n\n1970-01-08 17:12:39.100\n\n\n-34.741\n\n\n178.568\n\n\n179.0\n\n\n6.1\n\n\nMb\n\n\n59.0\n\n\nNaN\n\n\nNaN\n\n\n0.0\n\n\nNEI\n\n\n1.970011e+09\n\n\n\n\n3\n\n\n1970-01-10 12:07:08.600\n\n\n6.825\n\n\n126.737\n\n\n73.0\n\n\n6.1\n\n\nMb\n\n\n91.0\n\n\nNaN\n\n\nNaN\n\n\n0.0\n\n\nNEI\n\n\n1.970011e+09\n\n\n\n\n4\n\n\n1970-01-16 08:05:39.000\n\n\n60.280\n\n\n-152.660\n\n\n85.0\n\n\n6.0\n\n\nML\n\n\n0.0\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nAK\n\n\nNaN\n\n\n\n\n\n\n아래 코드 셀은 지도에서 플레이트 경계를 시각화합니다. 모든 지진 데이터를 사용하여 동일한 지도에 열 지도를 추가하고 지진이 판 경계와 일치하는지 여부를 확인할 수 있습니다\n# Create a base map with plate boundaries\nm_1 = folium.Map(location=[35,136], tiles='cartodbpositron', zoom_start=5)\nfor i in range(len(plate_boundaries)):\n    folium.PolyLine(locations=plate_boundaries.coordinates.iloc[i], weight=2, color='black').add_to(m_1)\n\n### Your code here: Add a heatmap to the map\n\n# 표시할 데이터로 HeatMap 레이어를 생성합니다.\ndata = [[row['Latitude'], row['Longitude']] for index, row in earthquakes.iterrows()]\nheatmap_layer = HeatMap(data=data, radius=20)\n\n# HeatMap 레이어를 지도에 추가합니다.\nheatmap_layer.add_to(m_1)\n\n# Show the map\nembed_map(m_1, 'q_1.html')\nm_1\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n그러면 위의 지도를 보면 지진은 판의 경계와 일치합니까?\n정답 : 일치한다\n\n\n2.2 일본에서 지진 깊이와 판 경계에 근접하는 것 사이에 관계가 있습니까?\n당신은 최근에 지진의 깊이가 우리에게 말해주는 것을 읽었습니다 important information 지구의 구조에 관하여. 여러분은 흥미로운 세계적인 패턴이 있는지 알고 싶어하고, 일본에서 깊이가 어떻게 다른지 알고 싶어합니다.\n# Create a base map with plate boundaries\nm_2 = folium.Map(location=[35,136], tiles='cartodbpositron', zoom_start=5)\nfor i in range(len(plate_boundaries)):\n    folium.PolyLine(locations=plate_boundaries.coordinates.iloc[i], weight=2, color='black').add_to(m_2)\n\n### Your code here: Add a map to visualize earthquake depth\nfor index, row in earthquakes.iterrows():\n    depth = row['Depth']  # Get the depth of the earthquake\n    if depth > 0:  # Exclude earthquakes with depth 0 (unknown depth)\n        color = 'red'  # Set color based on depth (you can modify this based on your preference)\n        radius = depth / 10  # Adjust the radius based on depth (you can modify this based on your preference)\n        folium.CircleMarker(location=[row['Latitude'], row['Longitude']],\n                            radius=radius,\n                            color=color,\n                            fill=True,\n                            fill_color=color).add_to(m_2)\n    \n# View the map\nembed_map(m_2, 'q_2.html')\nm_2\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n판 경계에 대한 근접성과 지진 깊이 사이의 관계를 감지할 수 있습니까? 이 패턴은 세계적으로 통용됩니까?\n정답 : 대체적으로 판 경계와 가까울수록 깊이가 얕고 멀어질수록 깊이가 깊다\n\n\n2.3 인구 밀도가 높은 현은 어디입니까?\n다음 코드 셀을 변경하지 않고 실행하여 일본 현의 지리적 경계가 포함된 GeoDataFrame “현”을 만듭니다.\n# GeoDataFrame with prefecture boundaries\nprefectures = gpd.read_file(\"C:/Users\\seong taek/Desktop/archive/japan-prefecture-boundaries/japan-prefecture-boundaries/japan-prefecture-boundaries.shp\")\nprefectures.set_index('prefecture', inplace=True)\nprefectures.head()\n\n\n\n\n\n\n\n\n\ngeometry\n\n\n\n\nprefecture\n\n\n\n\n\n\n\n\nAichi\n\n\nMULTIPOLYGON (((137.09523 34.65330, 137.09546 …\n\n\n\n\nAkita\n\n\nMULTIPOLYGON (((139.55725 39.20330, 139.55765 …\n\n\n\n\nAomori\n\n\nMULTIPOLYGON (((141.39860 40.92472, 141.39806 …\n\n\n\n\nChiba\n\n\nMULTIPOLYGON (((139.82488 34.98967, 139.82434 …\n\n\n\n\nEhime\n\n\nMULTIPOLYGON (((132.55859 32.91224, 132.55904 …\n\n\n\n\n\n\n다음 코드 셀은 각 일본 현에 대한 인구, 면적(제곱킬로미터) 및 인구 밀도(제곱킬로미터당)를 포함하는 데이터 프레임 통계를 만듭니다. 코드 셀을 변경하지 않고 실행합니다.\n# DataFrame containing population of each prefecture\npopulation = pd.read_csv(\"C:/Users\\seong taek/Desktop/archive/japan-prefecture-population.csv\")\npopulation.set_index('prefecture', inplace=True)\n\n# Calculate area (in square kilometers) of each prefecture\narea_sqkm = pd.Series(prefectures.geometry.to_crs(epsg=32654).area / 10**6, name='area_sqkm')\nstats = population.join(area_sqkm)\n\n# Add density (per square kilometer) of each prefecture\nstats['density'] = stats[\"population\"] / stats[\"area_sqkm\"]\nstats.head()\n\n\n\n\n\n\n\n\n\npopulation\n\n\narea_sqkm\n\n\ndensity\n\n\n\n\nprefecture\n\n\n\n\n\n\n\n\n\n\n\n\nTokyo\n\n\n12868000\n\n\n1800.614782\n\n\n7146.448049\n\n\n\n\nKanagawa\n\n\n8943000\n\n\n2383.038975\n\n\n3752.771186\n\n\n\n\nOsaka\n\n\n8801000\n\n\n1923.151529\n\n\n4576.342460\n\n\n\n\nAichi\n\n\n7418000\n\n\n5164.400005\n\n\n1436.372085\n\n\n\n\nSaitama\n\n\n7130000\n\n\n3794.036890\n\n\n1879.264806\n\n\n\n\n\n\n다음 코드 셀을 사용하여 모집단 밀도를 시각화하는 코로플레스 맵을 작성합니다.\n# Create a base map\nm_3 = folium.Map(location=[35,136], tiles='cartodbpositron', zoom_start=5)\n\n### Your code here: create a choropleth map to visualize population density\n\n# Create choropleth map\nChoropleth(geo_data=prefectures['geometry'],\n           data=stats['density'],\n           key_on=\"feature.id\",\n           fill_color='YlGnBu',\n           legend_name='Population density (per square kilometer)'\n          ).add_to(m_3)\n\n# View the map\nembed_map(m_3, 'q_3.html')\nm_3\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n다른 현들보다 상대적으로 밀도가 높은 현은 어디입니까? 그들은 전국적으로 퍼져 있습니까, 아니면 모두 대략 같은 지리적 지역에 위치하고 있습니까? (일본 지리에 익숙하지 않은 경우 이 지도가 질문에 대답하는 데 유용할 수 있습니다.) 지도\n정답 : 도쿄,오사카등 중심도시\n\n\n2.4 고밀도 현 중 규모가 큰 지진이 발생하기 쉬운 곳은 어디입니까?\n지진 보강의 혜택을 받을 수 있는 한 현을 제안하는 지도를 작성합니다. 지도는 밀도와 지진 규모를 모두 시각화해야 합니다.\n규모 7이상을 규모가 큰 지진으로 설정\n# Create a base map\nm_4 = folium.Map(location=[35,136], tiles='cartodbpositron', zoom_start=5)\n\n### Your code here: create a map\n\ndef color_producer(val):\n    if val <=7:\n        return 'forestgreen'\n    else:\n        return 'blue'\n    \nChoropleth(\n    geo_data=prefectures['geometry'].__geo_interface__,\n    data=stats['density'],\n    key_on=\"feature.id\",\n    fill_color='BuPu',\n    legend_name='Population density (per square kilometer)').add_to(m_4)\n\nfor i in range(0,len(earthquakes)):\n    folium.Circle(\n        location=[earthquakes.iloc[i]['Latitude'], earthquakes.iloc[i]['Longitude']],\n        popup=(\"{} ({})\").format(\n            earthquakes.iloc[i]['Magnitude'],\n            earthquakes.iloc[i]['DateTime'].year),\n        radius=earthquakes.iloc[i]['Magnitude']**5.5,\n        color=color_producer(earthquakes.iloc[i]['Magnitude'])).add_to(m_4)\n\n# View the map\nembed_map(m_4, 'q_4.html')\nm_4\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n추가 지진 보강을 위해 어느 현을 추천하십니까?\nIwate현 추천"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise3/exercise3-interactive-maps.html#keep-going",
    "href": "posts_work/Data_Mining_exercise3/exercise3-interactive-maps.html#keep-going",
    "title": "Data_Mining_Kaggle",
    "section": "3 Keep going",
    "text": "3 Keep going\nLearn how to convert names of places to geographic coordinates with geocoding. You’ll also explore special ways to join information from multiple GeoDataFrames.\n\nHave questions or comments? Visit the course discussion forum to chat with other learners."
  }
]