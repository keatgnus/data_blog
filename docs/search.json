[
  {
    "objectID": "posts/Data_Visualize_Ch2/CH2.html",
    "href": "posts/Data_Visualize_Ch2/CH2.html",
    "title": "Data_Visualize CH2",
    "section": "",
    "text": "Figure 2.3, Figure 2.4\n\n데이터 시각화 실습 : 계절성 그래프 Figure 2.3, Figure 2.4\n\n- 패키지 불러오기\n\nlibrary(ggplot2)\nlibrary(dplyr)\n#> \n#> Attaching package: 'dplyr'\n#> The following objects are masked from 'package:stats':\n#> \n#>     filter, lag\n#> The following objects are masked from 'package:base':\n#> \n#>     intersect, setdiff, setequal, union\n\n\n\n- 파일 불러오기\n\nncdc_normals.csv (날짜별 온도 등 데이터셋)\n\n\nncdc_normals <- read.csv('C:/Users/seong taek/Desktop/3-1 DataVisualize/ncdc_normals.csv')\n\n\n\n- 불러온 데이터셋 파악\n\n# 차원 파악\nncdc_normals %>% dim()\n#> [1] 2745366       6\n\n# 앞부분 훑어보기\nncdc_normals %>% head()\n#>    station_id month day temperature flag       date\n#> 1 AQW00061705     1   1        82.4    C 0000-01-01\n#> 2 AQW00061705     1   2        82.4    C 0000-01-02\n#> 3 AQW00061705     1   3        82.4    C 0000-01-03\n#> 4 AQW00061705     1   4        82.4    C 0000-01-04\n#> 5 AQW00061705     1   5        82.4    C 0000-01-05\n#> 6 AQW00061705     1   6        82.4    C 0000-01-06\n\n# 통계 요약 정보\nncdc_normals %>% summary()\n#>   station_id            month             day         temperature    \n#>  Length:2745366     Min.   : 1.000   Min.   : 1.00   Min.   :-21.80  \n#>  Class :character   1st Qu.: 4.000   1st Qu.: 8.00   1st Qu.: 39.70  \n#>  Mode  :character   Median : 7.000   Median :16.00   Median : 54.60  \n#>                     Mean   : 6.514   Mean   :15.76   Mean   : 53.17  \n#>                     3rd Qu.:10.000   3rd Qu.:23.00   3rd Qu.: 68.10  \n#>                     Max.   :12.000   Max.   :31.00   Max.   :103.20  \n#>      flag               date          \n#>  Length:2745366     Length:2745366    \n#>  Class :character   Class :character  \n#>  Mode  :character   Mode  :character  \n#>                                       \n#>                                       \n#> \n\n# 각 컬럼 클래스(타입) 확인\nncdc_normals %>% sapply(class)\n#>  station_id       month         day temperature        flag        date \n#> \"character\"   \"integer\"   \"integer\"   \"numeric\" \"character\" \"character\"\n\n# 각 컬럼 자료형 확인\nncdc_normals %>% sapply(typeof)\n#>  station_id       month         day temperature        flag        date \n#> \"character\"   \"integer\"   \"integer\"    \"double\" \"character\" \"character\"\n\n\n\n- character → date 형식 변환\n\nncdc_normals$date <- ncdc_normals$date%>% as.Date(\"%Y-%m-%d\")\n\nncdc_normals %>% sapply(class)\n#>  station_id       month         day temperature        flag        date \n#> \"character\"   \"integer\"   \"integer\"   \"numeric\" \"character\"      \"Date\"\n\nncdc_normals %>% sapply(typeof)\n#>  station_id       month         day temperature        flag        date \n#> \"character\"   \"integer\"   \"integer\"    \"double\" \"character\"    \"double\"\n\n\n\n- station_id 종류 개수\n\nncdc_normals$station_id %>% unique() %>% length()\n#> [1] 7501\n\n\n\n- station_id 선정 후, location(컬럼 이름) 지정한 data.frame 생성\n\nstation_loc <- data.frame(station_id = c(\"USW00014819\",\"USC00042319\",\"USW00093107\",\"USW00012918\"),\n                          location = c(\"Chicago\",\"Death Valley\",\"San Diego\",\"Houston\"))\nstation_loc\n#>    station_id     location\n#> 1 USW00014819      Chicago\n#> 2 USC00042319 Death Valley\n#> 3 USW00093107    San Diego\n#> 4 USW00012918      Houston\n\n\n\n- station_id로 ncdc_normals와 station_loc 두 컬럼을 inner_join\n\ntemps_long <- ncdc_normals %>% inner_join(station_loc, by=\"station_id\")\n\ntemps_long %>% head()\n#>    station_id month day temperature flag       date     location\n#> 1 USC00042319     1   1        51.0    S 0000-01-01 Death Valley\n#> 2 USC00042319     1   2        51.2    S 0000-01-02 Death Valley\n#> 3 USC00042319     1   3        51.3    S 0000-01-03 Death Valley\n#> 4 USC00042319     1   4        51.4    S 0000-01-04 Death Valley\n#> 5 USC00042319     1   5        51.6    S 0000-01-05 Death Valley\n#> 6 USC00042319     1   6        51.7    S 0000-01-06 Death Valley\n\ntemps_long %>% dim()\n#> [1] 1464    7\n\ntemps_long$date %>% class()\n#> [1] \"Date\"\n\n\n\n- x축에 표시할 눈금 생성\n\n# x축 범위 설정을 위해 date 범위 파악\ntemps_long$date %>% head()\n#> [1] \"0000-01-01\" \"0000-01-02\" \"0000-01-03\" \"0000-01-04\" \"0000-01-05\"\n#> [6] \"0000-01-06\"\ntemps_long$date %>% tail()\n#> [1] \"0000-12-26\" \"0000-12-27\" \"0000-12-28\" \"0000-12-29\" \"0000-12-30\"\n#> [6] \"0000-12-31\"\n\n# 범위 설정\ndate_s <- '0000-01-01' %>% as.Date('%Y-%m-%d')\ndate_e <- '0001-01-01' %>% as.Date('%Y-%m-%d')\n\n# data_s ~ date_e까지 3개월 단위로 나누기\nbreak_date <- seq(date_s, date_e, by = '3 month')\n\nbreak_date\n#> [1] \"0000-01-01\" \"0000-04-01\" \"0000-07-01\" \"0000-10-01\" \"0001-01-01\"\n\n\n\n- Fiqure 2.3 ggplot + 축 설정\n\n사용 데이터셋 : temps_long\nx=date, y=temperature\ncolor : location별\nscale_x_date\n\n이름 : month\n간격 : break_date (3개월)\n간격 라벨 (Jan ~ Jan)\n\nscale_y_continuous\n\n이름 : temp\n범위 : 0 ~ 110\n\nlabs : 제목, 부제목\n테마 : 밝게\n\n\nggplot(temps_long, aes(x=date, y=temperature, color=location)) +\n  geom_line() +\n  scale_x_date(name = 'month',\n               breaks = break_date,\n               labels = c('Jan','Apr','Jul','Oct','Jan')) +\n  scale_y_continuous(name = 'temp', limits = c(0,110)) + # continuous 연속형 (온도)\n  #ylab('Temp') +\n  labs(title = 'Fig. 2.3', subtitle = 'Daily temperature normals') +\n  theme_light()\n\n\n\n\n\n\n- Figure 2.4 그래프 데이터셋 전처리\n\ntemps_long %>% head()\n#>    station_id month day temperature flag       date     location\n#> 1 USC00042319     1   1        51.0    S 0000-01-01 Death Valley\n#> 2 USC00042319     1   2        51.2    S 0000-01-02 Death Valley\n#> 3 USC00042319     1   3        51.3    S 0000-01-03 Death Valley\n#> 4 USC00042319     1   4        51.4    S 0000-01-04 Death Valley\n#> 5 USC00042319     1   5        51.6    S 0000-01-05 Death Valley\n#> 6 USC00042319     1   6        51.7    S 0000-01-06 Death Valley\n\ntemps_long %>% names()\n#> [1] \"station_id\"  \"month\"       \"day\"         \"temperature\" \"flag\"       \n#> [6] \"date\"        \"location\"\n\nmean_temps <- temps_long %>%              \n  group_by(location, month) %>%           # location, month로 그룹화 \n  summarise(mean = mean(temperature)) %>% # 그룹화된 데이터의 집계값 요약\n  ungroup() %>%                           # 그룹화를 해제하여 일반적인 데이터 프레임 형태로 사용\n  mutate(month = factor(month %>%         # month값을 factor 형태로 수정해서 원하는 levels 지정가능\n                          paste(), levels = 1:12 %>% paste())) \n#> `summarise()` has grouped output by 'location'. You can override using the\n#> `.groups` argument.\n\nmean_temps\n#> # A tibble: 48 × 3\n#>    location month  mean\n#>    <chr>    <fct> <dbl>\n#>  1 Chicago  1      24.8\n#>  2 Chicago  2      28.9\n#>  3 Chicago  3      38.8\n#>  4 Chicago  4      50.4\n#>  5 Chicago  5      60.9\n#>  6 Chicago  6      71.0\n#>  7 Chicago  7      75.8\n#>  8 Chicago  8      74.1\n#>  9 Chicago  9      66.4\n#> 10 Chicago  10     54.3\n#> # … with 38 more rows\n\n\n\n- Figure 2.4 ggplot + geom_tile + fill color\n\n사용 데이터셋 : mean_temps\nx=month, y=location\nfill : mean\ngeom_tile : 넓이, 높이 지정\nscale_fill_viridis_c\n\n이름 : temperature\n옵션 : B (밝기)\nbegin, end : 색상의 시작,끝\n\ncoord_fixed\n\nexpand = F : 공백 제거\n\nylab(NULL) : y축 이름 제거\n\n\nggplot(mean_temps, aes(x = month, y = location, fill = mean)) +\n  geom_tile(width = .95, height = 0.95) +\n  scale_fill_viridis_c(option = 'B', begin = 0.15, end =  0.98,\n                       name = 'temperature') +\n  coord_fixed(expand = FALSE) +\n  ylab(NULL) #ylab('')\n\n\n\n\n\n\n\n예제 : 2021년 기상청 자료 Figure 2.3, Figure 2.4\n\n- csv파일 불러오기, 데이터 파악\n\ndata_2021 <- read.csv('C:/Users/seong taek/Desktop/3-1 DataVisualize/OBS_ASOS_DD_20220308125952.csv', fileEncoding = 'cp949')\n\ndata_2021 %>% dim()\n#> [1] 1460    6\n\ndata_2021 %>% head()\n#>   지점 지점명       일시 평균기온..C. 최저기온..C. 최고기온..C.\n#> 1  108   서울 2021-01-01         -4.2         -9.8          1.6\n#> 2  108   서울 2021-01-02         -5.0         -8.4         -1.4\n#> 3  108   서울 2021-01-03         -5.6         -9.1         -2.0\n#> 4  108   서울 2021-01-04         -3.5         -8.4          0.3\n#> 5  108   서울 2021-01-05         -5.5         -9.9         -2.1\n#> 6  108   서울 2021-01-06         -7.4        -12.0         -1.9\n\ndata_2021 %>% sapply(class)\n#>         지점       지점명         일시 평균기온..C. 최저기온..C. 최고기온..C. \n#>    \"integer\"  \"character\"  \"character\"    \"numeric\"    \"numeric\"    \"numeric\"\n\n\n\n- 일시를 character → date형식으로 변환\n\ndata_2021$일시 <- data_2021$일시 %>% as.Date('%Y-%m-%d')\n\ndata_2021 %>% sapply(class)\n#>         지점       지점명         일시 평균기온..C. 최저기온..C. 최고기온..C. \n#>    \"integer\"  \"character\"       \"Date\"    \"numeric\"    \"numeric\"    \"numeric\"\n\n\n\n- 기초통계량 파악\n\ndata_2021 %>% summary()\n#>       지점          지점명               일시             평균기온..C.   \n#>  Min.   :108.0   Length:1460        Min.   :2021-01-01   Min.   :-14.90  \n#>  1st Qu.:126.8   Class :character   1st Qu.:2021-04-02   1st Qu.:  7.90  \n#>  Median :158.5   Mode  :character   Median :2021-07-02   Median : 15.00  \n#>  Mean   :166.0                      Mean   :2021-07-02   Mean   : 14.77  \n#>  3rd Qu.:197.8                      3rd Qu.:2021-10-01   3rd Qu.: 23.10  \n#>  Max.   :239.0                      Max.   :2021-12-31   Max.   : 31.70  \n#>   최저기온..C.     최고기온..C.   \n#>  Min.   :-19.10   Min.   :-10.70  \n#>  1st Qu.:  3.10   1st Qu.: 13.18  \n#>  Median : 11.10   Median : 20.15  \n#>  Mean   : 10.69   Mean   : 19.56  \n#>  3rd Qu.: 19.60   3rd Qu.: 27.70  \n#>  Max.   : 28.10   Max.   : 36.50\n\n\n\n- x축에 표시할 눈금\n\ndata_2021$일시 %>% head()\n#> [1] \"2021-01-01\" \"2021-01-02\" \"2021-01-03\" \"2021-01-04\" \"2021-01-05\"\n#> [6] \"2021-01-06\"\n\ndata_2021$일시 %>% tail()\n#> [1] \"2021-12-26\" \"2021-12-27\" \"2021-12-28\" \"2021-12-29\" \"2021-12-30\"\n#> [6] \"2021-12-31\"\n\ndate_s <- '2021-01-01' %>% as.Date('%Y-%m-%d')\ndate_e <- '2022-01-01' %>% as.Date('%Y-%m-%d')\n\nbreak_date <- seq.Date(date_s, date_e, by='3 month')\nbreak_date\n#> [1] \"2021-01-01\" \"2021-04-01\" \"2021-07-01\" \"2021-10-01\" \"2022-01-01\"\n\n# 월만 문자 값으로 뽑아내기\ndate_lab <- format(break_date, '%B')\ndate_lab\n#> [1] \"1월\"  \"4월\"  \"7월\"  \"10월\" \"1월\"\n\n\n\n- Figure 2.3 ggplot + 축 설정\n\n사용 데이터셋 : data_2021\nx=일시, y=평균기온..C.\ncolor : 지점명 별\nscale_x_date\n\n이름 : 월\n간격 : break_date (3개월)\n간격 라벨 (1월 ~ 1월)\n\nscale_y_continuous\n\n이름 : 평균기온\n\nlabs : 제목, 부제목\n테마 : 밝게\n\n\n# 축 값 지정하기 전 컬럼이름 파악\ndata_2021 %>% names()\n#> [1] \"지점\"         \"지점명\"       \"일시\"         \"평균기온..C.\" \"최저기온..C.\"\n#> [6] \"최고기온..C.\"\n\nggplot(data_2021, aes(x=일시, y=평균기온..C., color=지점명)) +\n  geom_smooth(linewidth = 0.9,se=F,span=0.1) + # linewidth (선 두께), geom_line → smooth 가능\n  scale_x_date(name = '월',                  # se : 테두리, span : 스무스 정도\n               breaks = break_date,\n               labels = date_lab) +\n  scale_y_continuous(name = '평균기온') +\n  labs(title = '2021년 평균온도', subtitle = '4개의 주요 도시') +\n  theme_light()\n#> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n- Figure 2.4 그래프 데이터셋 전처리\n\ndata_2021 %>% names()\n#> [1] \"지점\"         \"지점명\"       \"일시\"         \"평균기온..C.\" \"최저기온..C.\"\n#> [6] \"최고기온..C.\"\n\ndata_2021 %>% head()\n#>   지점 지점명       일시 평균기온..C. 최저기온..C. 최고기온..C.\n#> 1  108   서울 2021-01-01         -4.2         -9.8          1.6\n#> 2  108   서울 2021-01-02         -5.0         -8.4         -1.4\n#> 3  108   서울 2021-01-03         -5.6         -9.1         -2.0\n#> 4  108   서울 2021-01-04         -3.5         -8.4          0.3\n#> 5  108   서울 2021-01-05         -5.5         -9.9         -2.1\n#> 6  108   서울 2021-01-06         -7.4        -12.0         -1.9\n\ndata_2021_month <- data_2021 %>%\n  mutate(month = format(일시, '%B')) %>%   # 일시에서 월만 뽑아낸 month 컬럼 생성\n  group_by(지점명, month) %>%              # 지점명, month로 그룹화\n  summarise(mean = mean(평균기온..C.)) %>% # 그룹화된 데이터의 집계값 요약\n  ungroup() %>%                            # 그룹화를 해제하여 일반적인 데이터 프레임 형태로 사용\n  mutate(month = factor(month,             # month값을 factor 형태로 수정해서 원하는 levels 지정가능\n                        levels = paste(1:12, '월',sep = ''))) # sep='' : 간격없이 붙이기\n#> `summarise()` has grouped output by '지점명'. You can override using the\n#> `.groups` argument.\n\ndata_2021_month\n#> # A tibble: 48 × 3\n#>    지점명 month   mean\n#>    <chr>  <fct>  <dbl>\n#>  1 대전   10월  15.7  \n#>  2 대전   11월   8.91 \n#>  3 대전   12월   1.89 \n#>  4 대전   1월   -0.984\n#>  5 대전   2월    3.99 \n#>  6 대전   3월    9.61 \n#>  7 대전   4월   14.7  \n#>  8 대전   5월   17.7  \n#>  9 대전   6월   23.5  \n#> 10 대전   7월   27.8  \n#> # … with 38 more rows\n\n\n\n- Figure 2.4 ggplot + geom_tile + fill color\n\n사용 데이터셋 : data_2021_month\nx=month, y=지점명\nfill : mean(평균온도)\ngeom_tile : 넓이, 높이 지정\nscale_fill_viridis_c\n\n이름 : temperature\n옵션 : B (밝기)\nbegin, end : 색상의 시작,끝\n\ncoord_fixed\n\nexpand = F : 공백 제거\n\nylab(NULL) : y축 이름 제거\n\n\nggplot(data_2021_month, aes(x = month, y = 지점명, fill = mean)) +\n  geom_tile(width = 0.95, height = 0.95) +\n  scale_fill_viridis_c(option = 'B', begin = 0.15, end =  0.98,\n                       name = 'temperature') +\n  coord_fixed(expand = FALSE) +\n  ylab(NULL) #ylab('')"
  },
  {
    "objectID": "posts/Advanced_Python_ch2/파이썬 심화 챕터2 공부.html",
    "href": "posts/Advanced_Python_ch2/파이썬 심화 챕터2 공부.html",
    "title": "advanced_python CH1",
    "section": "",
    "text": "Jupyter에서 실행하기\n\n\n\nBasic Grammar\n\npython CH1. 기본 문법\n\n수치 할당\nimport numpy as np\na = 5; b = 6; c = 7\nc\n7\n\n\n변수, 논리연산자\n# append() : 값 추가\na = [1,2,3]\nb=a\na.append(4)\nb\n[1, 2, 3, 4]\n\n\n타입 확인\na = 5; b = 'foo'\ntype(a), type(b)\n(int, str)\n# format() : print{} 안에 내용 추가 (순서대로 0,1,2..)\n# float : 소수\na = 4.5; b = 2\nprint('a is {0}, b is {1}'.format(type(a), type(b)))\na/b\na is <class 'float'>, b is <class 'int'>\n2.25\n# isinstance() : 타입 맞는지 확인\na = 5\nisinstance(a, int)\nTrue\n# 여러 타입 중 하나라도 맞으면 True\na = 5; b = 4.5\nisinstance(a, (int, float, str)), isinstance(b, (int, float))\n(True, True)\n\n\n속성, 메서드\na = 'foo'\n# upper() : 소문자 → 대문자\na.upper()\n'FOO'\n# getattr(객체, 속성) : 객체의 속성에 접근해줌\ngetattr(a, 'split')\n<function str.split(sep=None, maxsplit=-1)>\n\n\nDuck typing\n# 덕 타이핑: \"특정 기능을 지원하는가만 중요하다\"는 의미를 전달할 때 사용하는 표현\n# = 이터러블 객체\ndef isiterable(obj):\n    try:\n        iter(obj)\n        return True\n    except TypeError: # 이터러블 하지 않은 값\n        return False\nisiterable('a string')\nTrue\nisiterable([1,2,3])\nTrue\n# 정수는 이터러블 하지 않음\nisiterable(5) \nFalse\n\n\nImport\n\nsome_module.py\n\n\nPi = 3.14159\n\n\ndef f(x): return x + 2\n\n\ndef g(a,b):return a+b\n# some_module : 임의적으로 만든 py 파일\nimport some_module\nresult = some_module.f(5)\nresult\n7\npi = some_module.PI\npi\n3.14159\n# 모듈 중 몇개만 import\nfrom some_module import f,g,PI\nresult = g(5,PI)\nresult\n8.14159\n# as 로 이름 간략하게 바꿔서도 사용 가능\nimport some_module as sm\nfrom some_module import PI as pi, g as gf\nr1 = sm.f(pi)\nr2 = gf(6, pi)\nr1, r2\n(5.14159, 9.14159)\n\n\n\n이항 연산, 비교\n5 - 7, 12 + 21.5, 5 <= 2\n(-2, 33.5, False)\na = [1,2,3]\nb = a\nc = list(a)\na is b, a is not c\n(True, True)\na == c\nTrue\na = None\na is None\nTrue\na_list = ['foo', 2, [4,5]]\na_list[2] = (3,4)\na_list\n['foo', 2, (3, 4)]\n# 잘못된 예시 (수치형을 범주형으로 바꾸려한 경우)\na_tuple = (3, 5, (4,5))\na_tuple[1] = 'four'\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\nCell In[28], line 3\n      1 # 잘못된 예시 (수치형을 범주형으로 바꾸려한 경우)\n      2 a_tuple = (3, 5, (4,5))\n----> 3 a_tuple[1] = 'four'\n\n\nTypeError: 'tuple' object does not support item assignment\nival = 17239871\nival ** 6\n26254519291092456596965462913230729701102721\nfval = 7.243\nfval2 = 6.78e-5\n# // : 몫 (% : 나머지)\n3/2, type(3/2), 3//2, type(3//2)\n(1.5, float, 1, int)\na = 'one way of writing a string'\nb = 'another way'\na,b\n('one way of writing a string', 'another way')\n# 따옴표 3개 : 여러 줄을 한 줄로 출력\nc = '''\nThis is a longer string that\nspans multiple lines\n'''\nc\n'\\nThis is a longer string that\\nspans multiple lines\\n'\n# 띄어진 줄 개수\nc.count('\\n')\n3\n# 잘못된 예시 (문자 바꾸려한 경우)\na = 'this is a string'\na[10] = 'f'\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\nCell In[35], line 3\n      1 # 잘못된 예시 (문자 바꾸려한 경우)\n      2 a = 'this is a string'\n----> 3 a[10] = 'f'\n\n\nTypeError: 'str' object does not support item assignment\n# replace 이용해 변경\nb = a.replace('string', 'longer string')\na,b\n('this is a string', 'this is a longer string')\n# 수치형 → 범주형 변경\na = 5.6\ns = str(a)\nprint(s),\ntype(s)\n5.6\nstr\n# list 이용해 문자 하나씩 출력\ns = 'python'\nlist(s)\n['p', 'y', 't', 'h', 'o', 'n']\n# 3전 까지 출력, 3부터 출력\ns[:3], s[3:]\n('pyt', 'hon')\n# \\n로 줄 띄우기\nprint('12\\n34')\n12\n34\n# 이상한 예시\ns = '12\\\\34'\nprint(s)\n12\\34\n# 범주형도 더해진다\na = 'this is the first half'\nb = 'and this is the second half'\na + b\n'this is the first halfand this is the second half'\n# {0:.2f} : 소수점 둘째 자리로 반올림\n# {1:s} : 두번째 인수의 형식을 범주형으로 저장\n# {2:d} : 세번째 인수의 형식을 정확한 정수로 저장\ntemplate = '{0:.2f} {1:s} are worth US${2:d}'\ntemplate\n'{0:.2f} {1:s} are worth US${2:d}'\ntemplate.format(4.5560, 'Argentine Pesos', 1)\n'4.56 Argentine Pesos are worth US$1'\ntemplate.format(1263.23, 'won', 1)\n'1263.23 won are worth US$1'\n\n\nBooleans\n\n불리언 타입 - True, False 두가지 값\nTrue and True\nTrue\nFalse or True\nTrue\n\n\n\nType casting\n\n원하는 타입으로 해석\ns = '3.14159'\nfval = float(s)\ntype(fval)\nfloat\nint(fval)\n3\nbool(fval)\nTrue\n# bool : 비어있는 값, 0 → False\nbool(0)\nFalse\na = None\na is None\nTrue\ndef add_and_maybe_multiply(a, b, c=None):\n    result = a + b\n    if c is not None:\n        result = result * c\n    return result\nadd_and_maybe_multiply(5,3)\n8\nadd_and_maybe_multiply(5,3,10)\n80\ntype(None)\nNoneType\n\n\n\n날짜, 시간 값\nfrom datetime import datetime, date, time\ndt = datetime(2011, 10, 29, 20, 30, 21)\ndt\n# 년, 월, 일, 시, 분, 초\ndatetime.datetime(2011, 10, 29, 20, 30, 21)\ndt.day\n29\ndt.minute\n30\n# 년, 월, 일\ndt.date()\ndatetime.date(2011, 10, 29)\n# 시, 분, 초\ndt.time()\ndatetime.time(20, 30, 21)\n# strftime : 날짜 문자열을 날짜 객체로 만들 때\ndt.strftime('%m/%d/%Y %H:%M'), dt.strftime('%Y/%m/%d %H:%M')\n('10/29/2011 20:30', '2011/10/29 20:30')\n# strptime : 날짜 객체열을 날짜 문자열로 출력 할 때 \ndatetime.strptime('20091031', '%Y%m%d')\ndatetime.datetime(2009, 10, 31, 0, 0)\ndt.replace(minute=0, second=0)\ndatetime.datetime(2011, 10, 29, 20, 0)\n# 날짜 끼리 연산 가능\ndt2 = datetime(2011, 11, 15, 22, 30)\ndelta = dt2 - dt\ndelta\ndatetime.timedelta(days=17, seconds=7179)\ntype(delta)\ndatetime.timedelta\ndt\ndt + delta\ndatetime.datetime(2011, 11, 15, 22, 30)\n\n\nControl Flow\nx = -5\n\nif x < 0:\n    print('It is negative')\nIt is negative\nx = 8\nif x < 0:\n    print('It is negative')\nelif x == 0:\n    print('Equal to zero')\nelif 0 < x < 5:\n    print('positive but smaller than 5')\nelse:\n    print('positive and larger than or equal to 5')\npositive and larger than or equal to 5\na = 5; b = 7; c = 8; d = 4\nif a < b or c > d:\n    print('Made it')\nMade it\n4>3>2>1, 3>5 or 2>1, 3>5>2>1\n(True, True, False)\n\n\nfor loops 루프문\n# 잘못된 예시 (+= 는 int, NoneType 지원 안함)\nsequence = [1,2,None,4,None,5]\ntotal = 0\n\nfor value in sequence:\n    total += value\n    # total = total + value\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\nCell In[72], line 6\n      3 total = 0\n      5 for value in sequence:\n----> 6     total += value\n\n\nTypeError: unsupported operand type(s) for +=: 'int' and 'NoneType'\nsequence = [1,2,None,4,None,5]\ntotal = 10\n\nfor value in sequence:\n    if value is None:\n        continue\n    total += value\ntotal\n22\nsequence = [1,2,0,4,6,5,2,1]\ntotal_until_5 = 0\nfor value in sequence:\n    if value == 5:\n        break\n    total_until_5 += value\ntotal_until_5\n13\nlist(range(4))\n[0, 1, 2, 3]\n# j가 i 보다 커지기 전까지 조합\nfor i in range(4):\n    for j in range(4):\n        if j > i:\n            break\n        print((j,i))\n(0, 0)\n(0, 1)\n(1, 1)\n(0, 2)\n(1, 2)\n(2, 2)\n(0, 3)\n(1, 3)\n(2, 3)\n(3, 3)\n# 전체 조합 출력\nfor i in range(4):\n    for j in range(4):\n        print((i,j))\n(0, 0)\n(0, 1)\n(0, 2)\n(0, 3)\n(1, 0)\n(1, 1)\n(1, 2)\n(1, 3)\n(2, 0)\n(2, 1)\n(2, 2)\n(2, 3)\n(3, 0)\n(3, 1)\n(3, 2)\n(3, 3)\nfor a, b, c in [[1,2,3],[4,5,6],[7,8,9]]:\n    print(a,b,c)\n1 2 3\n4 5 6\n7 8 9\nfor a in [[1,2,3],[4,5,6],[7,8,9]]:\n    print(a)\n[1, 2, 3]\n[4, 5, 6]\n[7, 8, 9]\n\n\nwhile loops\nx = 256\ntotal = 0\n\nwhile x > 0:\n    if total >500:\n        break\n    total += x\n    x = x // 2\n    print(total,x)\ntotal, x\n256 128\n384 64\n448 32\n480 16\n496 8\n504 4\n\n\n\n\n\n(504, 4)\ntotal,x\n(504, 4)\n\n\npass\nx = 7\n\nif x < 0:\n    print('negative!')\nelif x == 0:\n    pass\nelse:\n    print('positive!')\npositive!\n\n\nrange\nrange(10)\nrange(0, 10)\nlist(range(10))\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist(range(0, 20, 2))\n[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\nlist(range(5, 0, -1))\n[5, 4, 3, 2, 1]\nsum = 0\nfor i in range(100000):\n    if i % 3 == 0 or i % 5 == 0:\n        sum += i\n\nsum\n2333316668\nx = 5\nb = 'Non-negative' if x >= 0 else 'Negative'\nb\n'Non-negative'\nx = 5\n\na = 100 if x>=0 else -100\na\n100"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html",
    "title": "Data_Mining CH1",
    "section": "",
    "text": "Numpy Basic"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#배열-생성",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#배열-생성",
    "title": "Data_Mining CH1",
    "section": "배열 생성",
    "text": "배열 생성\nnumpy를 임포트해 보죠. 대부분의 사람들이 np로 알리아싱하여 임포트합니다:\nimport numpy as np"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#np.zeros",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#np.zeros",
    "title": "Data_Mining CH1",
    "section": "np.zeros",
    "text": "np.zeros\nzeros 함수는 0으로 채워진 배열을 만듭니다:\nnp.zeros(5)\narray([0., 0., 0., 0., 0.])\n2D 배열(즉, 행렬)을 만들려면 원하는 행과 열의 크기를 튜플로 전달합니다. 예를 들어 다음은 \\(3 \\times 4\\) 크기의 행렬입니다:\nnp.zeros((3,4))\narray([[0., 0., 0., 0.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.]])"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#용어",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#용어",
    "title": "Data_Mining CH1",
    "section": "용어",
    "text": "용어\n\n넘파이에서 각 차원을 축(axis) 이라고 합니다\n축의 개수를 랭크(rank) 라고 합니다.\n\n예를 들어, 위의 \\(3 \\times 4\\) 행렬은 랭크 2인 배열입니다(즉 2차원입니다).\n첫 번째 축의 길이는 3이고 두 번째 축의 길이는 4입니다.\n\n배열의 축 길이를 배열의 크기(shape)라고 합니다.\n\n예를 들어, 위 행렬의 크기는 (3, 4)입니다.\n랭크는 크기의 길이와 같습니다.\n\n배열의 사이즈(size)는 전체 원소의 개수입니다. 축의 길이를 모두 곱해서 구할 수 있습니다(가령, \\(3 \\times 4=12\\)).\n\na = np.zeros((3,4))\na\narray([[0., 0., 0., 0.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.]])\na.shape\n(3, 4)\na.ndim  # len(a.shape)와 같습니다\n2\na.size\n12"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#n-차원-배열",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#n-차원-배열",
    "title": "Data_Mining CH1",
    "section": "N-차원 배열",
    "text": "N-차원 배열\n임의의 랭크 수를 가진 N-차원 배열을 만들 수 있습니다. 예를 들어, 다음은 크기가 (2,3,4)인 3D 배열(랭크=3)입니다:\nnp.zeros((2,2,5))\narray([[[0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.]],\n\n       [[0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0.]]])"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#배열-타입",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#배열-타입",
    "title": "Data_Mining CH1",
    "section": "배열 타입",
    "text": "배열 타입\n넘파이 배열의 타입은 ndarray입니다:\ntype(np.zeros((3,4)))\nnumpy.ndarray"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#np.ones",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#np.ones",
    "title": "Data_Mining CH1",
    "section": "np.ones",
    "text": "np.ones\nndarray를 만들 수 있는 넘파이 함수가 많습니다.\n다음은 1로 채워진 \\(3 \\times 4\\) 크기의 행렬입니다:\nnp.ones((3,4))\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.]])"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#np.full",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#np.full",
    "title": "Data_Mining CH1",
    "section": "np.full",
    "text": "np.full\n주어진 값으로 지정된 크기의 배열을 초기화합니다. 다음은 π로 채워진 \\(3 \\times 4\\) 크기의 행렬입니다.\nnp.full((3,4), np.pi)\narray([[3.14159265, 3.14159265, 3.14159265, 3.14159265],\n       [3.14159265, 3.14159265, 3.14159265, 3.14159265],\n       [3.14159265, 3.14159265, 3.14159265, 3.14159265]])"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#np.empty",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#np.empty",
    "title": "Data_Mining CH1",
    "section": "np.empty",
    "text": "np.empty\n초기화되지 않은 \\(2 \\times 3\\) 크기의 배열을 만듭니다(배열의 내용은 예측이 불가능하며 메모리 상황에 따라 달라집니다):\nnp.empty((2,3))\narray([[0., 0., 0.],\n       [0., 0., 0.]])"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#np.array",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#np.array",
    "title": "Data_Mining CH1",
    "section": "np.array",
    "text": "np.array\narray 함수는 파이썬 리스트를 사용하여 ndarray를 초기화합니다:\nnp.array([[1,2,3,4], [10, 20, 30, 40]])\narray([[ 1,  2,  3,  4],\n       [10, 20, 30, 40]])"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#np.arange",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#np.arange",
    "title": "Data_Mining CH1",
    "section": "np.arange",
    "text": "np.arange\n파이썬의 기본 range 함수와 비슷한 넘파이 arange 함수를 사용하여 ndarray를 만들 수 있습니다:\nnp.arange(1, 5)\narray([1, 2, 3, 4])\n부동 소수도 가능합니다:\nnp.arange(1.0, 5.0)\narray([1., 2., 3., 4.])\n파이썬의 기본 range 함수처럼 건너 뛰는 정도를 지정할 수 있습니다:\nnp.arange(1, 5, 0.5)\narray([1. , 1.5, 2. , 2.5, 3. , 3.5, 4. , 4.5])\n부동 소수를 사용하면 원소의 개수가 일정하지 않을 수 있습니다. 예를 들면 다음과 같습니다:\nprint(np.arange(0, 5/3, 1/3)) # 부동 소수 오차 때문에, 최댓값은 4/3 또는 5/3이 됩니다.\nprint(np.arange(0, 5/3, 0.333333333))\nprint(np.arange(0, 5/3, 0.333333334))\n[0.         0.33333333 0.66666667 1.         1.33333333 1.66666667]\n[0.         0.33333333 0.66666667 1.         1.33333333 1.66666667]\n[0.         0.33333333 0.66666667 1.         1.33333334]"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#np.linspace",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#np.linspace",
    "title": "Data_Mining CH1",
    "section": "np.linspace",
    "text": "np.linspace\n이런 이유로 부동 소수를 사용할 땐 arange 대신에 linspace 함수를 사용하는 것이 좋습니다. linspace 함수는 지정된 개수만큼 두 값 사이를 나눈 배열을 반환합니다(arange와는 다르게 최댓값이 포함됩니다):\nprint(np.linspace(0, 5/3, 6))\n[0.         0.33333333 0.66666667 1.         1.33333333 1.66666667]"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#np.rand와-np.randn",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#np.rand와-np.randn",
    "title": "Data_Mining CH1",
    "section": "np.rand와 np.randn",
    "text": "np.rand와 np.randn\n넘파이의 random 모듈에는 ndarray를 랜덤한 값으로 초기화할 수 있는 함수들이 많이 있습니다. 예를 들어, 다음은 (균등 분포인) 0과 1사이의 랜덤한 부동 소수로 \\(3 \\times 4\\) 행렬을 초기화합니다:\nnp.random.rand(3,4)\narray([[0.06155426, 0.74605262, 0.15696099, 0.10848505],\n       [0.99477242, 0.50644411, 0.85697022, 0.7538202 ],\n       [0.69186472, 0.70790355, 0.1212439 , 0.40088931]])\n다음은 평균이 0이고 분산이 1인 일변량 정규 분포(가우시안 분포)에서 샘플링한 랜덤한 부동 소수를 담은 \\(3 \\times 4\\) 행렬입니다:\nnp.random.randn(3,4)\narray([[ 0.68549892, -0.35640678,  0.49284835, -1.11736284],\n       [ 1.50288866, -1.04041734,  1.1961761 ,  1.34060815],\n       [ 0.19706421,  0.13122654,  0.68539933, -0.13550458]])\n이 분포의 모양을 알려면 맷플롯립을 사용해 그려보는 것이 좋습니다(더 자세한 것은 맷플롯립 튜토리얼을 참고하세요):\n%matplotlib inline\nimport matplotlib.pyplot as plt\nplt.hist(np.random.rand(100000), density=True, bins=100, histtype=\"step\", color=\"blue\", label=\"rand\")\nplt.hist(np.random.randn(100000), density=True, bins=100, histtype=\"step\", color=\"red\", label=\"randn\")\nplt.axis([-2.5, 2.5, 0, 1.1])\nplt.legend(loc = \"upper left\")\nplt.title(\"Random distributions\")\nplt.xlabel(\"Value\")\nplt.ylabel(\"Density\")\nplt.show()\n\n\n\npng"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#np.fromfunction",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#np.fromfunction",
    "title": "Data_Mining CH1",
    "section": "np.fromfunction",
    "text": "np.fromfunction\n함수를 사용하여 ndarray를 초기화할 수도 있습니다:\ndef my_function(z, y, x):\n    return x + 10 * y + 100 * z\n\nnp.fromfunction(my_function, (3, 2, 10))\narray([[[  0.,   1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.],\n        [ 10.,  11.,  12.,  13.,  14.,  15.,  16.,  17.,  18.,  19.]],\n\n       [[100., 101., 102., 103., 104., 105., 106., 107., 108., 109.],\n        [110., 111., 112., 113., 114., 115., 116., 117., 118., 119.]],\n\n       [[200., 201., 202., 203., 204., 205., 206., 207., 208., 209.],\n        [210., 211., 212., 213., 214., 215., 216., 217., 218., 219.]]])\n넘파이는 먼저 크기가 (3, 2, 10)인 세 개의 ndarray(차원마다 하나씩)를 만듭니다. 각 배열은 축을 따라 좌표 값과 같은 값을 가집니다. 예를 들어, z 축에 있는 배열의 모든 원소는 z-축의 값과 같습니다:\n[[[ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]\n  [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]]\n\n [[ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]\n  [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]]\n\n [[ 2.  2.  2.  2.  2.  2.  2.  2.  2.  2.]\n  [ 2.  2.  2.  2.  2.  2.  2.  2.  2.  2.]]]\n위의 식 x + 10 * y + 100 * z에서 x, y, z는 사실 ndarray입니다(배열의 산술 연산에 대해서는 아래에서 설명합니다). 중요한 점은 함수 my_function이 원소마다 호출되는 것이 아니고 딱 한 번 호출된다는 점입니다. 그래서 매우 효율적으로 초기화할 수 있습니다."
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#dtype",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#dtype",
    "title": "Data_Mining CH1",
    "section": "dtype",
    "text": "dtype\n넘파이의 ndarray는 모든 원소가 동일한 타입(보통 숫자)을 가지기 때문에 효율적입니다. dtype 속성으로 쉽게 데이터 타입을 확인할 수 있습니다:\nc = np.arange(1, 5)\nprint(c.dtype, c)\nint32 [1 2 3 4]\nc = np.arange(1.0, 5.0)\nprint(c.dtype, c)\nfloat64 [1. 2. 3. 4.]\n넘파이가 데이터 타입을 결정하도록 내버려 두는 대신 dtype 매개변수를 사용해서 배열을 만들 때 명시적으로 지정할 수 있습니다:\nd = np.arange(1, 5, dtype=np.complex64)\nprint(d.dtype, d)\ncomplex64 [1.+0.j 2.+0.j 3.+0.j 4.+0.j]\n가능한 데이터 타입은 int8, int16, int32, int64, uint8|16|32|64, float16|32|64, complex64|128가 있습니다. 전체 리스트는 온라인 문서를 참고하세요."
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#itemsize",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#itemsize",
    "title": "Data_Mining CH1",
    "section": "itemsize",
    "text": "itemsize\nitemsize 속성은 각 아이템의 크기(바이트)를 반환합니다:\ne = np.arange(1, 5, dtype=np.complex64)\ne.itemsize\n8"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#data-버퍼",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#data-버퍼",
    "title": "Data_Mining CH1",
    "section": "data 버퍼",
    "text": "data 버퍼\n배열의 데이터는 1차원 바이트 버퍼로 메모리에 저장됩니다. data 속성을 사용해 참조할 수 있습니다(사용할 일은 거의 없겠지만요).\nf = np.array([[1,2],[1000, 2000]], dtype=np.int32)\nf.data\n<memory at 0x00000250B4976E10>\n파이썬 2에서는 f.data가 버퍼이고 파이썬 3에서는 memoryview입니다.\nif (hasattr(f.data, \"tobytes\")):\n    data_bytes = f.data.tobytes() # python 3\nelse:\n    data_bytes = memoryview(f.data).tobytes() # python 2\n\ndata_bytes\nb'\\x01\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\xe8\\x03\\x00\\x00\\xd0\\x07\\x00\\x00'\n여러 개의 ndarray가 데이터 버퍼를 공유할 수 있습니다. 하나를 수정하면 다른 것도 바뀝니다. 잠시 후에 예를 살펴 보겠습니다."
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#자신을-변경",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#자신을-변경",
    "title": "Data_Mining CH1",
    "section": "자신을 변경",
    "text": "자신을 변경\nndarray의 shape 속성을 지정하면 간단히 크기를 바꿀 수 있습니다. 배열의 원소 개수는 동일하게 유지됩니다.\ng = np.arange(24)\nprint(g)\nprint(\"랭크:\", g.ndim)\n[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23]\n랭크: 1\ng.shape = (6, 4)\nprint(g)\nprint(\"랭크:\", g.ndim)\n[[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]\n [12 13 14 15]\n [16 17 18 19]\n [20 21 22 23]]\n랭크: 2\ng.shape = (2, 3, 4)\nprint(g)\nprint(\"랭크:\", g.ndim)\n[[[ 0  1  2  3]\n  [ 4  5  6  7]\n  [ 8  9 10 11]]\n\n [[12 13 14 15]\n  [16 17 18 19]\n  [20 21 22 23]]]\n랭크: 3\ng[1,1,1] # 3차원 인덱싱 0,1 ~ 순\n17"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#reshape",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#reshape",
    "title": "Data_Mining CH1",
    "section": "reshape",
    "text": "reshape\nreshape 함수는 동일한 데이터를 가리키는 새로운 ndarray 객체를 반환합니다. 한 배열을 수정하면 다른 것도 함께 바뀝니다.\ng2 = g.reshape(4,6)\nprint(g2)\nprint(\"랭크:\", g2.ndim)\n[[ 0  1  2  3  4  5]\n [ 6  7  8  9 10 11]\n [12 13 14 15 16 17]\n [18 19 20 21 22 23]]\n랭크: 2\n행 1, 열 2의 원소를 999로 설정합니다(인덱싱 방식은 아래를 참고하세요).\ng2[1, 2] = 999\ng2\narray([[  0,   1,   2,   3,   4,   5],\n       [  6,   7, 999,   9,  10,  11],\n       [ 12,  13,  14,  15,  16,  17],\n       [ 18,  19,  20,  21,  22,  23]])\n이에 상응하는 g의 원소도 수정됩니다.\ng\narray([[[  0,   1,   2,   3],\n        [  4,   5,   6,   7],\n        [999,   9,  10,  11]],\n\n       [[ 12,  13,  14,  15],\n        [ 16,  17,  18,  19],\n        [ 20,  21,  22,  23]]])"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#ravel",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#ravel",
    "title": "Data_Mining CH1",
    "section": "ravel",
    "text": "ravel\n마지막으로 ravel 함수는 동일한 데이터를 가리키는 새로운 1차원 ndarray를 반환합니다:\ng.ravel()\narray([  0,   1,   2,   3,   4,   5,   6,   7, 999,   9,  10,  11,  12,\n        13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23])"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#규칙-1",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#규칙-1",
    "title": "Data_Mining CH1",
    "section": "규칙 1",
    "text": "규칙 1\n배열의 랭크가 동일하지 않으면 랭크가 맞을 때까지 랭크가 작은 배열 앞에 1을 추가합니다.\nh = np.arange(5).reshape(1, 1, 5)\nh\narray([[[0, 1, 2, 3, 4]]])\n여기에 (1,1,5) 크기의 3D 배열에 (5,) 크기의 1D 배열을 더해 보죠. 브로드캐스팅의 규칙 1이 적용됩니다!\nh + [10, 20, 30, 40, 50]  # 다음과 동일합니다: h + [[[10, 20, 30, 40, 50]]]\narray([[[10, 21, 32, 43, 54]]])"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#규칙-2",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#규칙-2",
    "title": "Data_Mining CH1",
    "section": "규칙 2",
    "text": "규칙 2\n특정 차원이 1인 배열은 그 차원에서 크기가 가장 큰 배열의 크기에 맞춰 동작합니다. 배열의 원소가 차원을 따라 반복됩니다.\nk = np.arange(6).reshape(2, 3)\nk\narray([[0, 1, 2],\n       [3, 4, 5]])\n(2,3) 크기의 2D ndarray에 (2,1) 크기의 2D 배열을 더해 보죠. 넘파이는 브로드캐스팅 규칙 2를 적용합니다:\nk + [[100], [200]]  # 다음과 같습니다: k + [[100, 100, 100], [200, 200, 200]]\narray([[100, 101, 102],\n       [203, 204, 205]])\n규칙 1과 2를 합치면 다음과 같이 동작합니다:\nk + [100, 200, 300]  # 규칙 1 적용: [[100, 200, 300]], 규칙 2 적용: [[100, 200, 300], [100, 200, 300]]\narray([[100, 201, 302],\n       [103, 204, 305]])\n또 매우 간단히 다음 처럼 해도 됩니다:\nk + 1000  # 다음과 같습니다: k + [[1000, 1000, 1000], [1000, 1000, 1000]]\narray([[1000, 1001, 1002],\n       [1003, 1004, 1005]])"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#규칙-3",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#규칙-3",
    "title": "Data_Mining CH1",
    "section": "규칙 3",
    "text": "규칙 3\n규칙 1 & 2을 적용했을 때 모든 배열의 크기가 맞아야 합니다.\ntry:\n    k + [33, 44]\nexcept ValueError as e:\n    print(e)\noperands could not be broadcast together with shapes (2,3) (2,) \n브로드캐스팅 규칙은 산술 연산 뿐만 아니라 넘파이 연산에서 많이 사용됩니다. 아래에서 더 보도록 하죠. 브로드캐스팅에 관한 더 자세한 정보는 온라인 문서를 참고하세요."
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#업캐스팅",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#업캐스팅",
    "title": "Data_Mining CH1",
    "section": "업캐스팅",
    "text": "업캐스팅"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#ndarray-메서드",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#ndarray-메서드",
    "title": "Data_Mining CH1",
    "section": "ndarray 메서드",
    "text": "ndarray 메서드\n일부 함수는 ndarray 메서드로 제공됩니다. 예를 들면:\na = np.array([[-2.5, 3.1, 7], [10, 11, 12]])\nprint(a)\nprint(\"평균 =\", a.mean())\n# 축에 따라서 다르게 : axis= n\n[[-2.5  3.1  7. ]\n [10.  11.  12. ]]\n평균 = 6.766666666666667\n이 명령은 크기에 상관없이 ndarray에 있는 모든 원소의 평균을 계산합니다.\n다음은 유용한 ndarray 메서드입니다:\nfor func in (a.min, a.max, a.sum, a.prod, a.std, a.var):\n    print(func.__name__, \"=\", func())\nmin = -2.5\nmax = 12.0\nsum = 40.6\nprod = -71610.0\nstd = 5.084835843520964\nvar = 25.855555555555554\n이 함수들은 선택적으로 매개변수 axis를 사용합니다. 지정된 축을 따라 원소에 연산을 적용하는데 사용합니다. 예를 들면:\nc=np.arange(24).reshape(2,3,4)\nc\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]],\n\n       [[12, 13, 14, 15],\n        [16, 17, 18, 19],\n        [20, 21, 22, 23]]])\nc.sum(axis=0)  # 첫 번째 축을 따라 더함, 결과는 3x4 배열\narray([[12, 14, 16, 18],\n       [20, 22, 24, 26],\n       [28, 30, 32, 34]])\nc.sum(axis=1)  # 두 번째 축을 따라 더함, 결과는 2x4 배열\narray([[12, 15, 18, 21],\n       [48, 51, 54, 57]])\nc.sum(axis=2)\narray([[ 6, 22, 38],\n       [54, 70, 86]])\n여러 축에 대해서 더할 수도 있습니다:\nc.sum(axis=(0,2))  # 첫 번째 축과 세 번째 축을 따라 더함, 결과는 (3,) 배열\narray([ 60,  92, 124])\n0+1+2+3 + 12+13+14+15, 4+5+6+7 + 16+17+18+19, 8+9+10+11 + 20+21+22+23\n(60, 92, 124)"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#일반-함수",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#일반-함수",
    "title": "Data_Mining CH1",
    "section": "일반 함수",
    "text": "일반 함수\n넘파이는 일반 함수(universal function) 또는 ufunc라고 부르는 원소별 함수를 제공합니다. 예를 들면 square 함수는 원본 ndarray를 복사하여 각 원소를 제곱한 새로운 ndarray 객체를 반환합니다:\na = np.array([[-2.5, 3.1, 7], [10, 11, 12]])\nnp.square(a)\narray([[  6.25,   9.61,  49.  ],\n       [100.  , 121.  , 144.  ]])\n다음은 유용한 단항 일반 함수들입니다:\nprint(\"원본 ndarray\")\nprint(a)\nfor func in (np.abs, np.sqrt, np.exp, np.log, np.sign, np.ceil, np.modf, np.isnan, np.cos):\n    print(\"\\n\", func.__name__)\n    print(func(a))\n원본 ndarray\n[[-2.5  3.1  7. ]\n [10.  11.  12. ]]\n\n absolute\n[[ 2.5  3.1  7. ]\n [10.  11.  12. ]]\n\n sqrt\n[[       nan 1.76068169 2.64575131]\n [3.16227766 3.31662479 3.46410162]]\n\n exp\n[[8.20849986e-02 2.21979513e+01 1.09663316e+03]\n [2.20264658e+04 5.98741417e+04 1.62754791e+05]]\n\n log\n[[       nan 1.13140211 1.94591015]\n [2.30258509 2.39789527 2.48490665]]\n\n sign\n[[-1.  1.  1.]\n [ 1.  1.  1.]]\n\n ceil\n[[-2.  4.  7.]\n [10. 11. 12.]]\n\n modf\n(array([[-0.5,  0.1,  0. ],\n       [ 0. ,  0. ,  0. ]]), array([[-2.,  3.,  7.],\n       [10., 11., 12.]]))\n\n isnan\n[[False False False]\n [False False False]]\n\n cos\n[[-0.80114362 -0.99913515  0.75390225]\n [-0.83907153  0.0044257   0.84385396]]\n\n\nC:\\Users\\seong taek\\AppData\\Local\\Temp\\ipykernel_12688\\4103705789.py:5: RuntimeWarning: invalid value encountered in sqrt\n  print(func(a))\nC:\\Users\\seong taek\\AppData\\Local\\Temp\\ipykernel_12688\\4103705789.py:5: RuntimeWarning: invalid value encountered in log\n  print(func(a))"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#이항-일반-함수",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#이항-일반-함수",
    "title": "Data_Mining CH1",
    "section": "이항 일반 함수",
    "text": "이항 일반 함수\n두 개의 ndarray에 원소별로 적용되는 이항 함수도 많습니다. 두 배열이 동일한 크기가 아니면 브로드캐스팅 규칙이 적용됩니다:\na = np.array([1, -2, 3, 4])\nb = np.array([2, 8, -1, 7])\nnp.add(a, b)  # a + b 와 동일\narray([ 3,  6,  2, 11])\nnp.greater(a, b)  # a > b 와 동일\narray([False, False,  True, False])\nnp.maximum(a, b)\narray([2, 8, 3, 7])\nnp.copysign(a, b)\narray([ 1.,  2., -3.,  4.])"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#차원-배열",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#차원-배열",
    "title": "Data_Mining CH1",
    "section": "1차원 배열",
    "text": "1차원 배열\n1차원 넘파이 배열은 보통의 파이썬 배열과 비슷하게 사용할 수 있습니다:\na = np.array([1, 5, 3, 19, 13, 7, 3])\na[3]\n19\na[2:5]\narray([ 3, 19, 13])\na[2:-1]\narray([ 3, 19, 13,  7])\na[:2]\narray([1, 5])\na[2::2]\narray([ 3, 13,  3])\na[::-1]\narray([ 3,  7, 13, 19,  3,  5,  1])\n물론 원소를 수정할 수 있죠:\na[3]=999\na\narray([  1,   5,   3, 999,  13,   7,   3])\n슬라이싱을 사용해 ndarray를 수정할 수 있습니다:\na[2:5] = [997, 998, 999]\na\narray([  1,   5, 997, 998, 999,   7,   3])"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#보통의-파이썬-배열과-차이점",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#보통의-파이썬-배열과-차이점",
    "title": "Data_Mining CH1",
    "section": "보통의 파이썬 배열과 차이점",
    "text": "보통의 파이썬 배열과 차이점\n보통의 파이썬 배열과 대조적으로 ndarray 슬라이싱에 하나의 값을 할당하면 슬라이싱 전체에 복사됩니다. 위에서 언급한 브로드캐스팅 덕택입니다.\na[2:5] = -1\na\narray([ 1,  5, -1, -1, -1,  7,  3])\n또한 이런 식으로 ndarray 크기를 늘리거나 줄일 수 없습니다:\ntry:\n    a[2:5] = [1,2,3,4,5,6]  # 너무 길어요\nexcept ValueError as e:\n    print(e)\ncould not broadcast input array from shape (6,) into shape (3,)\n원소를 삭제할 수도 없습니다:\ntry:\n    del a[2:5]\nexcept ValueError as e:\n    print(e)\ncannot delete array elements\n중요한 점은 ndarray의 슬라이싱은 같은 데이터 버퍼를 바라보는 뷰(view)입니다. 슬라이싱된 객체를 수정하면 실제 원본 ndarray가 수정됩니다!\na_slice = a[2:6]\na_slice[1] = 1000\na  # 원본 배열이 수정됩니다!\narray([   1,    5,   -1, 1000,   -1,    7,    3])\na[3] = 2000\na_slice  # 비슷하게 원본 배열을 수정하면 슬라이싱 객체에도 반영됩니다!\narray([  -1, 2000,   -1,    7])\n데이터를 복사하려면 copy 메서드를 사용해야 합니다:\nanother_slice = a[2:6].copy()\nanother_slice[1] = 3000\na  # 원본 배열이 수정되지 않습니다\narray([   1,    5,   -1, 2000,   -1,    7,    3])\na[3] = 4000\nanother_slice  # 마찬가지로 원본 배열을 수정해도 복사된 배열은 바뀌지 않습니다\narray([  -1, 3000,   -1,    7])"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#다차원-배열",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#다차원-배열",
    "title": "Data_Mining CH1",
    "section": "다차원 배열",
    "text": "다차원 배열\n다차원 배열은 비슷한 방식으로 각 축을 따라 인덱싱 또는 슬라이싱해서 사용합니다. 콤마로 구분합니다:\nb = np.arange(48).reshape(4, 12)\nb\narray([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23],\n       [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35],\n       [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]])\nb[1, 2]  # 행 1, 열 2\n14\nb[1, :]  # 행 1, 모든 열\narray([12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\nb[1, :].shape\n(12,)\nb[:, 1]  # 모든 행, 열 1\narray([ 1, 13, 25, 37])\n주의: 다음 두 표현에는 미묘한 차이가 있습니다:\nb[1, :]\narray([12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\nb[1:2, :]\narray([[12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]])\nb[1:2, :].shape\n(1, 12)\n첫 번째 표현식은 (12,) 크기인 1D 배열로 행이 하나입니다. 두 번째는 (1, 12) 크기인 2D 배열로 같은 행을 반환합니다."
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#팬시-인덱싱fancy-indexing",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#팬시-인덱싱fancy-indexing",
    "title": "Data_Mining CH1",
    "section": "팬시 인덱싱(Fancy indexing)",
    "text": "팬시 인덱싱(Fancy indexing)\n관심 대상의 인덱스 리스트를 지정할 수도 있습니다. 이를 팬시 인덱싱이라고 부릅니다.\nb[(0,2), 2:5]  # 행 0과 2, 열 2에서 4(5-1)까지\narray([[ 2,  3,  4],\n       [26, 27, 28]])\nb[:, (-1, 2, -1)]  # 모든 행, 열 -1 (마지막), 2와 -1 (다시 반대 방향으로)\narray([[11,  2, 11],\n       [23, 14, 23],\n       [35, 26, 35],\n       [47, 38, 47]])\n여러 개의 인덱스 리스트를 지정하면 인덱스에 맞는 값이 포함된 1D ndarray를 반환됩니다.\nb[(-1, 2, -1, 2), (5, 9, 1, 9)]  # returns a 1D array with b[-1, 5], b[2, 9], b[-1, 1] and b[2, 9] (again)\narray([41, 33, 37, 33])\n\nQuiz\narray([[24, 25], [36, 37]])\n출력해보기\nb[(2,3),0:2]\narray([[24, 25],\n       [36, 37]])\n\n\nQuiz\n\n2차원 배열 ’array_2d’에서 첫번째 행의 모든 요소 선택\n2차원 배열 ’array_2d’에서 두번째 열의 모든 요소 선택\n2차원 배열 ’array_2d’에서 25,30,40,45 선택\n\narray_2d = np.array([[5, 10, 15],\n                    [20, 25, 30],\n                    [35, 40, 45]])\narray_2d\narray([[ 5, 10, 15],\n       [20, 25, 30],\n       [35, 40, 45]])\n#답\narray_2d[0,:],array_2d[:,1], array_2d[(1,2),1:3]\n(array([ 5, 10, 15]),\n array([10, 25, 40]),\n array([[25, 30],\n        [40, 45]]))"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#고차원",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#고차원",
    "title": "Data_Mining CH1",
    "section": "고차원",
    "text": "고차원\n고차원에서도 동일한 방식이 적용됩니다. 몇 가지 예를 살펴 보겠습니다:\nc = b.reshape(4,2,6)\nc\narray([[[ 0,  1,  2,  3,  4,  5],\n        [ 6,  7,  8,  9, 10, 11]],\n\n       [[12, 13, 14, 15, 16, 17],\n        [18, 19, 20, 21, 22, 23]],\n\n       [[24, 25, 26, 27, 28, 29],\n        [30, 31, 32, 33, 34, 35]],\n\n       [[36, 37, 38, 39, 40, 41],\n        [42, 43, 44, 45, 46, 47]]])\nc[2, 1, 4]  # 행렬 2, 행 1, 열 4\n34\nc[2, :, 3]  # 행렬 2, 모든 행, 열 3\narray([27, 33])\n어떤 축에 대한 인덱스를 지정하지 않으면 이 축의 모든 원소가 반환됩니다:\nc[2, 1]  # 행렬 2, 행 1, 모든 열이 반환됩니다. c[2, 1, :]와 동일합니다.\narray([30, 31, 32, 33, 34, 35])"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#생략-부호-...",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#생략-부호-...",
    "title": "Data_Mining CH1",
    "section": "생략 부호 (...)",
    "text": "생략 부호 (...)\n생략 부호(...)를 쓰면 모든 지정하지 않은 축의 원소를 포함합니다.\nc[2, ...]  #  행렬 2, 모든 행, 모든 열. c[2, :, :]와 동일\narray([[24, 25, 26, 27, 28, 29],\n       [30, 31, 32, 33, 34, 35]])\nc[2, 1, ...]  # 행렬 2, 행 1, 모든 열. c[2, 1, :]와 동일\narray([30, 31, 32, 33, 34, 35])\nc[2, ..., 3]  # 행렬 2, 모든 행, 열 3. c[2, :, 3]와 동일\narray([27, 33])\nc[..., 3]  # 모든 행렬, 모든 행, 열 3. c[:, :, 3]와 동일\narray([[ 3,  9],\n       [15, 21],\n       [27, 33],\n       [39, 45]])"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#불리언-인덱싱",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#불리언-인덱싱",
    "title": "Data_Mining CH1",
    "section": "불리언 인덱싱",
    "text": "불리언 인덱싱\n불리언 값을 가진 ndarray를 사용해 축의 인덱스를 지정할 수 있습니다.\nb = np.arange(48).reshape(4, 12)\nb\narray([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],\n       [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23],\n       [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35],\n       [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]])\nrows_on = np.array([True, False, True, False])\nb[rows_on, :]  # 행 0과 2, 모든 열. b[(0, 2), :]와 동일\narray([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11],\n       [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]])\ncols_on = np.array([False, True, False] * 4)\nb[:, cols_on]  # 모든 행, 열 1, 4, 7, 10\narray([[ 1,  4,  7, 10],\n       [13, 16, 19, 22],\n       [25, 28, 31, 34],\n       [37, 40, 43, 46]])"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#np.ix_",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#np.ix_",
    "title": "Data_Mining CH1",
    "section": "np.ix_",
    "text": "np.ix_\n여러 축에 걸쳐서는 불리언 인덱싱을 사용할 수 없고 ix_ 함수를 사용합니다:\nb[np.ix_(rows_on, cols_on)]\narray([[ 1,  4,  7, 10],\n       [25, 28, 31, 34]])\nnp.ix_(rows_on, cols_on)\n(array([[0],\n        [2]], dtype=int64),\n array([[ 1,  4,  7, 10]], dtype=int64))\nndarray와 같은 크기의 불리언 배열을 사용하면 해당 위치가 True인 모든 원소를 담은 1D 배열이 반환됩니다. 일반적으로 조건 연산자와 함께 사용합니다:\nb[b % 3 == 1]\narray([ 1,  4,  7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46])"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#vstack",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#vstack",
    "title": "Data_Mining CH1",
    "section": "vstack",
    "text": "vstack\nvstack 함수를 사용하여 수직으로 쌓아보죠:\nq4 = np.vstack((q1, q2, q3))\nq4\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [2., 2., 2., 2.],\n       [2., 2., 2., 2.],\n       [2., 2., 2., 2.],\n       [2., 2., 2., 2.],\n       [3., 3., 3., 3.],\n       [3., 3., 3., 3.],\n       [3., 3., 3., 3.]])\nq4.shape\n(10, 4)\nq1, q2, q3가 모두 같은 크기이므로 가능합니다(수직으로 쌓기 때문에 수직 축은 크기가 달라도 됩니다)."
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#hstack",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#hstack",
    "title": "Data_Mining CH1",
    "section": "hstack",
    "text": "hstack\nhstack을 사용해 수평으로도 쌓을 수 있습니다:\nq5 = np.hstack((q1, q3))\nq5\narray([[1., 1., 1., 1., 3., 3., 3., 3.],\n       [1., 1., 1., 1., 3., 3., 3., 3.],\n       [1., 1., 1., 1., 3., 3., 3., 3.]])\n# 문제\nnp.concatenate((q1,q3),axis=1)\narray([[1., 1., 1., 1., 3., 3., 3., 3.],\n       [1., 1., 1., 1., 3., 3., 3., 3.],\n       [1., 1., 1., 1., 3., 3., 3., 3.]])\nq5.shape\n(3, 8)\nq1과 q3가 모두 3개의 행을 가지고 있기 때문에 가능합니다. q2는 4개의 행을 가지고 있기 때문에 q1, q3와 수평으로 쌓을 수 없습니다:\ntry:\n    q5 = np.hstack((q1, q2, q3))\nexcept ValueError as e:\n    print(e)\nall the input array dimensions for the concatenation axis must match exactly, but along dimension 0, the array at index 0 has size 3 and the array at index 1 has size 4"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#concatenate",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#concatenate",
    "title": "Data_Mining CH1",
    "section": "concatenate",
    "text": "concatenate\nconcatenate 함수는 지정한 축으로도 배열을 쌓습니다.\nq7 = np.concatenate((q1, q2, q3), axis=0)  # vstack과 동일\nq7\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [2., 2., 2., 2.],\n       [2., 2., 2., 2.],\n       [2., 2., 2., 2.],\n       [2., 2., 2., 2.],\n       [3., 3., 3., 3.],\n       [3., 3., 3., 3.],\n       [3., 3., 3., 3.]])\nq7.shape\n(10, 4)\n예상했겠지만 hstack은 axis=1으로 concatenate를 호출하는 것과 같습니다."
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#stack",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#stack",
    "title": "Data_Mining CH1",
    "section": "stack",
    "text": "stack\nstack 함수는 새로운 축을 따라 배열을 쌓습니다. 모든 배열은 같은 크기를 가져야 합니다.\nq8 = np.stack((q1, q3))\nq8\narray([[[1., 1., 1., 1.],\n        [1., 1., 1., 1.],\n        [1., 1., 1., 1.]],\n\n       [[3., 3., 3., 3.],\n        [3., 3., 3., 3.],\n        [3., 3., 3., 3.]]])\nq8.shape\n(2, 3, 4)"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#행렬-전치",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#행렬-전치",
    "title": "Data_Mining CH1",
    "section": "행렬 전치",
    "text": "행렬 전치\nT 속성은 랭크가 2보다 크거나 같을 때 transpose()를 호출하는 것과 같습니다:\nm1 = np.arange(10).reshape(2,5)\nm1\narray([[0, 1, 2, 3, 4],\n       [5, 6, 7, 8, 9]])\nm1.T\narray([[0, 5],\n       [1, 6],\n       [2, 7],\n       [3, 8],\n       [4, 9]])\nT 속성은 랭크가 0이거나 1인 배열에는 아무런 영향을 미치지 않습니다:\nm2 = np.arange(5)\nm2\narray([0, 1, 2, 3, 4])\nm2.T\narray([0, 1, 2, 3, 4])\n먼저 1D 배열을 하나의 행이 있는 행렬(2D)로 바꾼다음 전치를 수행할 수 있습니다:\nm2r = m2.reshape(1,5)\nm2r\narray([[0, 1, 2, 3, 4]])\nm2r.T\narray([[0],\n       [1],\n       [2],\n       [3],\n       [4]])"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#행렬-곱셈",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#행렬-곱셈",
    "title": "Data_Mining CH1",
    "section": "행렬 곱셈",
    "text": "행렬 곱셈\n두 개의 행렬을 만들어 dot 메서드로 행렬 곱셈을 실행해 보죠.\nn1 = np.arange(10).reshape(2, 5)\nn1\narray([[0, 1, 2, 3, 4],\n       [5, 6, 7, 8, 9]])\nn2 = np.arange(15).reshape(5,3)\nn2\narray([[ 0,  1,  2],\n       [ 3,  4,  5],\n       [ 6,  7,  8],\n       [ 9, 10, 11],\n       [12, 13, 14]])\nn1.dot(n2)\narray([[ 90, 100, 110],\n       [240, 275, 310]])\n주의: 앞서 언급한 것처럼 n1*n2는 행렬 곱셈이 아니라 원소별 곱셈(또는 아다마르 곱이라 부릅니다)입니다."
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#역행렬과-유사-역행렬",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#역행렬과-유사-역행렬",
    "title": "Data_Mining CH1",
    "section": "역행렬과 유사 역행렬",
    "text": "역행렬과 유사 역행렬\nnumpy.linalg 모듈 안에 많은 선형 대수 함수들이 있습니다. 특히 inv 함수는 정방 행렬의 역행렬을 계산합니다:\nimport numpy.linalg as linalg\n\nm3 = np.array([[1,2,3],[5,7,11],[21,29,31]])\nm3\narray([[ 1,  2,  3],\n       [ 5,  7, 11],\n       [21, 29, 31]])\nlinalg.inv(m3)\narray([[-2.31818182,  0.56818182,  0.02272727],\n       [ 1.72727273, -0.72727273,  0.09090909],\n       [-0.04545455,  0.29545455, -0.06818182]])\npinv 함수를 사용하여 유사 역행렬을 계산할 수도 있습니다:\nlinalg.pinv(m3)\narray([[-2.31818182,  0.56818182,  0.02272727],\n       [ 1.72727273, -0.72727273,  0.09090909],\n       [-0.04545455,  0.29545455, -0.06818182]])"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#단위-행렬",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#단위-행렬",
    "title": "Data_Mining CH1",
    "section": "단위 행렬",
    "text": "단위 행렬\n행렬과 그 행렬의 역행렬을 곱하면 단위 행렬이 됩니다(작은 소숫점 오차가 있습니다):\nm3.dot(linalg.inv(m3))\narray([[ 1.00000000e+00, -5.55111512e-17,  0.00000000e+00],\n       [-2.98372438e-16,  1.00000000e+00, -5.55111512e-17],\n       [ 5.78009862e-15,  1.27675648e-15,  1.00000000e+00]])\neye 함수는 NxN 크기의 단위 행렬을 만듭니다:\nnp.eye(3)\narray([[1., 0., 0.],\n       [0., 1., 0.],\n       [0., 0., 1.]])"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#qr-분해",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#qr-분해",
    "title": "Data_Mining CH1",
    "section": "QR 분해",
    "text": "QR 분해\nqr 함수는 행렬을 QR 분해합니다:\nq, r = linalg.qr(m3)\nq\narray([[-0.04627448,  0.98786672,  0.14824986],\n       [-0.23137241,  0.13377362, -0.96362411],\n       [-0.97176411, -0.07889213,  0.22237479]])\nr\narray([[-21.61018278, -29.89331494, -32.80860727],\n       [  0.        ,   0.62427688,   1.9894538 ],\n       [  0.        ,   0.        ,  -3.26149699]])\nq.dot(r)  # q.r는 m3와 같습니다\narray([[ 1.,  2.,  3.],\n       [ 5.,  7., 11.],\n       [21., 29., 31.]])"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#행렬식",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#행렬식",
    "title": "Data_Mining CH1",
    "section": "행렬식",
    "text": "행렬식\ndet 함수는 행렬식을 계산합니다:\nlinalg.det(m3)  # 행렬식 계산\n43.99999999999999"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#고윳값과-고유벡터",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#고윳값과-고유벡터",
    "title": "Data_Mining CH1",
    "section": "고윳값과 고유벡터",
    "text": "고윳값과 고유벡터\neig 함수는 정방 행렬의 고윳값과 고유벡터를 계산합니다:\neigenvalues, eigenvectors = linalg.eig(m3)\neigenvalues # λ\narray([42.26600592, -0.35798416, -2.90802176])\neigenvectors # v\narray([[-0.08381182, -0.76283526, -0.18913107],\n       [-0.3075286 ,  0.64133975, -0.6853186 ],\n       [-0.94784057, -0.08225377,  0.70325518]])\nm3.dot(eigenvectors) - eigenvalues * eigenvectors  # m3.v - λ*v = 0\narray([[6.66133815e-15, 1.11022302e-16, 4.44089210e-16],\n       [7.10542736e-15, 2.88657986e-15, 3.10862447e-15],\n       [3.55271368e-14, 6.81746326e-15, 4.88498131e-15]])"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#특잇값-분해",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#특잇값-분해",
    "title": "Data_Mining CH1",
    "section": "특잇값 분해",
    "text": "특잇값 분해\nsvd 함수는 행렬을 입력으로 받아 그 행렬의 특잇값 분해를 반환합니다:\nm4 = np.array([[1,0,0,0,2], [0,0,3,0,0], [0,0,0,0,0], [0,2,0,0,0]])\nm4\narray([[1, 0, 0, 0, 2],\n       [0, 0, 3, 0, 0],\n       [0, 0, 0, 0, 0],\n       [0, 2, 0, 0, 0]])\nU, S_diag, V = linalg.svd(m4)\nU\narray([[ 0.,  1.,  0.,  0.],\n       [ 1.,  0.,  0.,  0.],\n       [ 0.,  0.,  0., -1.],\n       [ 0.,  0.,  1.,  0.]])\nS_diag\narray([3.        , 2.23606798, 2.        , 0.        ])\nsvd 함수는 Σ의 대각 원소 값만 반환합니다. 전체 Σ 행렬은 다음과 같이 만듭니다:\nS = np.zeros((4, 5))\nS[np.diag_indices(4)] = S_diag\nS  # Σ\narray([[3.        , 0.        , 0.        , 0.        , 0.        ],\n       [0.        , 2.23606798, 0.        , 0.        , 0.        ],\n       [0.        , 0.        , 2.        , 0.        , 0.        ],\n       [0.        , 0.        , 0.        , 0.        , 0.        ]])\nV\narray([[-0.        ,  0.        ,  1.        ,  0.        ,  0.        ],\n       [ 0.4472136 ,  0.        ,  0.        ,  0.        ,  0.89442719],\n       [-0.        ,  1.        ,  0.        ,  0.        ,  0.        ],\n       [ 0.        ,  0.        ,  0.        ,  1.        ,  0.        ],\n       [-0.89442719,  0.        ,  0.        ,  0.        ,  0.4472136 ]])\nU.dot(S).dot(V) # U.Σ.V == m4\narray([[1., 0., 0., 0., 2.],\n       [0., 0., 3., 0., 0.],\n       [0., 0., 0., 0., 0.],\n       [0., 2., 0., 0., 0.]])"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#대각원소와-대각합",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#대각원소와-대각합",
    "title": "Data_Mining CH1",
    "section": "대각원소와 대각합",
    "text": "대각원소와 대각합\nnp.diag(m3)  # m3의 대각 원소입니다(왼쪽 위에서 오른쪽 아래)\narray([ 1,  7, 31])\nnp.trace(m3)  # np.diag(m3).sum()와 같습니다\n39"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#선형-방정식-풀기",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#선형-방정식-풀기",
    "title": "Data_Mining CH1",
    "section": "선형 방정식 풀기",
    "text": "선형 방정식 풀기\nsolve 함수는 다음과 같은 선형 방정식을 풉니다:\n\n\\(2x + 6y = 6\\)\n\\(5x + 3y = -9\\)\n\ncoeffs  = np.array([[2, 6], [5, 3]])\ndepvars = np.array([6, -9])\nsolution = linalg.solve(coeffs, depvars)\nsolution\narray([-3.,  2.])\nsolution을 확인해 보죠:\ncoeffs.dot(solution), depvars  # 네 같네요\n(array([ 6., -9.]), array([ 6, -9]))\n좋습니다! 다른 방식으로도 solution을 확인해 보죠:\nnp.allclose(coeffs.dot(solution), depvars)\nTrue"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#바이너리-.npy-포맷",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#바이너리-.npy-포맷",
    "title": "Data_Mining CH1",
    "section": "바이너리 .npy 포맷",
    "text": "바이너리 .npy 포맷\n랜덤 배열을 만들고 저장해 보죠.\na = np.random.rand(2,3)\na\narray([[0.2086315 , 0.86504028, 0.48487373],\n       [0.31435031, 0.97172107, 0.83472074]])\nnp.save(\"my_array\", a)\n끝입니다! 파일 이름의 확장자를 지정하지 않았기 때문에 넘파이는 자동으로 .npy를 붙입니다. 파일 내용을 확인해 보겠습니다:\nwith open(\"my_array.npy\", \"rb\") as f:\n    content = f.read()\n\ncontent\nb\"\\x93NUMPY\\x01\\x00v\\x00{'descr': '<f8', 'fortran_order': False, 'shape': (2, 3), }                                                          \\n\\xf8\\x10\\x97\\xdfo\\xb4\\xca?\\t1i\\xf2h\\xae\\xeb?\\x18\\x00\\x19\\xd4+\\x08\\xdf?\\x1c\\x14\\xa1\\xc1P\\x1e\\xd4?\\xb8O \\xc7V\\x18\\xef?t\\xf1\\xabB\\x08\\xb6\\xea?\"\n이 파일을 넘파이 배열로 로드하려면 load 함수를 사용합니다:\na_loaded = np.load(\"my_array.npy\")\na_loaded\narray([[0.2086315 , 0.86504028, 0.48487373],\n       [0.31435031, 0.97172107, 0.83472074]])"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#텍스트-포맷",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#텍스트-포맷",
    "title": "Data_Mining CH1",
    "section": "텍스트 포맷",
    "text": "텍스트 포맷\n배열을 텍스트 포맷으로 저장해 보죠:\nnp.savetxt(\"my_array.csv\", a)\n파일 내용을 확인해 보겠습니다:\nwith open(\"my_array.csv\", \"rt\") as f:\n    print(f.read())\n2.086315004108951765e-01 8.650402769649484513e-01 4.848737307802379881e-01\n3.143503085050853851e-01 9.717210663970865525e-01 8.347207357578967368e-01\n이 파일은 탭으로 구분된 CSV 파일입니다. 다른 구분자를 지정할 수도 있습니다:\nnp.savetxt(\"my_array.csv\", a, delimiter=\",\")\n이 파일을 로드하려면 loadtxt 함수를 사용합니다:\na_loaded = np.loadtxt(\"my_array.csv\", delimiter=\",\")\na_loaded\narray([[0.2086315 , 0.86504028, 0.48487373],\n       [0.31435031, 0.97172107, 0.83472074]])"
  },
  {
    "objectID": "posts/Data_Mining_Numpy/numpy 공부.html#압축된-.npz-포맷",
    "href": "posts/Data_Mining_Numpy/numpy 공부.html#압축된-.npz-포맷",
    "title": "Data_Mining CH1",
    "section": "압축된 .npz 포맷",
    "text": "압축된 .npz 포맷\n여러 개의 배열을 압축된 한 파일로 저장하는 것도 가능합니다:\nb = np.arange(24, dtype=np.uint8).reshape(2, 3, 4)\nb\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]],\n\n       [[12, 13, 14, 15],\n        [16, 17, 18, 19],\n        [20, 21, 22, 23]]], dtype=uint8)\nnp.savez(\"my_arrays\", my_a=a, my_b=b)\n파일 내용을 확인해 보죠. .npz 파일 확장자가 자동으로 추가되었습니다.\nwith open(\"my_arrays.npz\", \"rb\") as f:\n    content = f.read()\n\nrepr(content)[:180] + \"[...]\"\n'b\"PK\\\\x03\\\\x04\\\\x14\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00!\\\\x00\\\\x118\\\\x1f\\\\xce\\\\xb0\\\\x00\\\\x00\\\\x00\\\\xb0\\\\x00\\\\x00\\\\x00\\\\x08\\\\x00\\\\x14\\\\x00my_a.npy\\\\x01\\\\x00\\\\x10\\\\x00\\\\xb0\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\xb0\\\\x00\\\\x00\\\\x[...]'\n다음과 같이 이 파일을 로드할 수 있습니다:\nmy_arrays = np.load(\"my_arrays.npz\")\nmy_arrays\n<numpy.lib.npyio.NpzFile at 0x250b5247df0>\n게으른 로딩을 수행하는 딕셔너리와 유사한 객체입니다:\nmy_arrays.keys()\nKeysView(<numpy.lib.npyio.NpzFile object at 0x00000250B5247DF0>)\nmy_arrays[\"my_a\"]\narray([[0.2086315 , 0.86504028, 0.48487373],\n       [0.31435031, 0.97172107, 0.83472074]])"
  },
  {
    "objectID": "posts/Data_Visualize_Ch1/데이터시각화 2주차 ggplot2 기초.html",
    "href": "posts/Data_Visualize_Ch1/데이터시각화 2주차 ggplot2 기초.html",
    "title": "Data_Visualize CH1",
    "section": "",
    "text": "ggplot2 Basic\n\n그래프 패키지(Packages)\n\n[ggplot2] package : R에서 사용할 수 있는 대표적인 그래픽 도구\n\n그래프 결과를 그림 파일로 출력(정적)\nTop 50 ggplot2 Visualizations\n\n참고 http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html\n\n\n\n\n[plotly] package - 대화형 그래프 라이브러리로 Python, R, JavaScript 라이브러리를 제공\n\n그래프 결과를 HTML 파일로 출력(동적)\n\n값 확인, 확대/축소, 이동, 필터 등의 기능을 제공하여 자료 탐색 가능\n\nPlotly R Open Source Graphing Library\n\n참고 https://plotly.com/r/ - Plotly 패키지에 ggplot2 패키지가 포함되어 있음\n\n\n\n\n\n[ggplot2] package\n\n기본 3요소\n\ndata: 시각화 자료 - 데이터프레임\ngeom: 시각화 종류\n\n점: geom_point()\n선: geom_line()\n막대: eom_bar()\n\naesthetics: 시각화 특성 aes()\n\n위치: x, y\n크기: size\n색상: col, fill\n농도: alpha\n\n\n\n\n레이어 추가\n\n‘+’ 연산자를 사용하여 레이어를 추가하는 형식으로 그래프를 추가하거나 수정함\n\n\n\nggplot() 함수\n\n그래프를 그리는 기본 함수로 다양한 함수를 추가(+)하여 정교한 그래프를 생성\n\n\n\n제목과 축의 이름 설정\n\nggtitle(), xlab(), ylab() 함수\nlabs() 함수\n\n\n\nqplot() 함수\n\nQuick plot: 기본 plot() 함수에 익숙한 사용자를 위한 빠른 그래프 생성\n\n\n\n\nggplot2 실습\n\n### 패키지 설치, 라이브러리 실행\n\n#install.packages(\"ggplot2\")\n#install.packages(\"dplyr\")\nlibrary(ggplot2)\nlibrary(dplyr)\n#> \n#> Attaching package: 'dplyr'\n#> The following objects are masked from 'package:stats':\n#> \n#>     filter, lag\n#> The following objects are masked from 'package:base':\n#> \n#>     intersect, setdiff, setequal, union\n\n\n### [mpg]데이터셋 불러오기, 파악\n\ndata_raw <- read.csv(\"https://vincentarelbundock.github.io/Rdatasets/csv/ggplot2/mpg.csv\")\n\n# 데이터 차원 파악\ndata_raw %>% dim()\n#> [1] 234  12\n# 데이터 앞부분 출력\ndata_raw %>% head()\n#>   X manufacturer model displ year cyl      trans drv cty hwy fl   class\n#> 1 1         audi    a4   1.8 1999   4   auto(l5)   f  18  29  p compact\n#> 2 2         audi    a4   1.8 1999   4 manual(m5)   f  21  29  p compact\n#> 3 3         audi    a4   2.0 2008   4 manual(m6)   f  20  31  p compact\n#> 4 4         audi    a4   2.0 2008   4   auto(av)   f  21  30  p compact\n#> 5 5         audi    a4   2.8 1999   6   auto(l5)   f  16  26  p compact\n#> 6 6         audi    a4   2.8 1999   6 manual(m5)   f  18  26  p compact\n# 데이터 요약 정보\ndata_raw %>% summary()\n#>        X          manufacturer          model               displ      \n#>  Min.   :  1.00   Length:234         Length:234         Min.   :1.600  \n#>  1st Qu.: 59.25   Class :character   Class :character   1st Qu.:2.400  \n#>  Median :117.50   Mode  :character   Mode  :character   Median :3.300  \n#>  Mean   :117.50                                         Mean   :3.472  \n#>  3rd Qu.:175.75                                         3rd Qu.:4.600  \n#>  Max.   :234.00                                         Max.   :7.000  \n#>       year           cyl           trans               drv           \n#>  Min.   :1999   Min.   :4.000   Length:234         Length:234        \n#>  1st Qu.:1999   1st Qu.:4.000   Class :character   Class :character  \n#>  Median :2004   Median :6.000   Mode  :character   Mode  :character  \n#>  Mean   :2004   Mean   :5.889                                        \n#>  3rd Qu.:2008   3rd Qu.:8.000                                        \n#>  Max.   :2008   Max.   :8.000                                        \n#>       cty             hwy             fl               class          \n#>  Min.   : 9.00   Min.   :12.00   Length:234         Length:234        \n#>  1st Qu.:14.00   1st Qu.:18.00   Class :character   Class :character  \n#>  Median :17.00   Median :24.00   Mode  :character   Mode  :character  \n#>  Mean   :16.86   Mean   :23.44                                        \n#>  3rd Qu.:19.00   3rd Qu.:27.00                                        \n#>  Max.   :35.00   Max.   :44.00\n\n\n### 첫 번째 컬럼 제거 (X 컬럼 제거)\n\ndata_use <- data_raw %>% select(-1)\ndata_use %>% head()\n#>   manufacturer model displ year cyl      trans drv cty hwy fl   class\n#> 1         audi    a4   1.8 1999   4   auto(l5)   f  18  29  p compact\n#> 2         audi    a4   1.8 1999   4 manual(m5)   f  21  29  p compact\n#> 3         audi    a4   2.0 2008   4 manual(m6)   f  20  31  p compact\n#> 4         audi    a4   2.0 2008   4   auto(av)   f  21  30  p compact\n#> 5         audi    a4   2.8 1999   6   auto(l5)   f  16  26  p compact\n#> 6         audi    a4   2.8 1999   6 manual(m5)   f  18  26  p compact\n\n\n### ggplot() : 시각화 자료 + 시각화 특성\n\n# x축, y축 지정\nggplot(data_use, aes(x=displ, y=hwy))\n\n\n\n\n\n### ggplot: 시각화 자료 + 시각화 특성 + 시각화 종류\n\n# x=displ, y=hwy 값을 point로 그리기\n# 첫 번째 방법\nggplot(data_use, aes(x=displ, y=hwy)) + geom_point()\n\n\n\n# 두 번째 방법\nggplot(data_use) + geom_point(aes(x=displ, y=hwy))\n\n\n\n# 세 번째 방법\nggplot() + geom_point(aes(x=displ, y=hwy), data=data_use)\n\n\n\n\n\n### Smooth line & SE\n\n# 스무스한 선으로 그리기\nggplot(data_use, aes(x=displ, y=hwy)) + geom_smooth()\n#> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n# point 추가\nggplot(data_use, aes(x=displ,y=hwy)) + geom_smooth() + geom_point()\n#> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Profile",
    "section": "",
    "text": "Name\nSeongtaek Jo\n\n\nBirth\n1999.01.15\n\n\nPhone\n+82 10-9823-3115\n\n\nEmail\ntjdxor3115@naver.com\n\n\ncertificate\nADsP (데이터분석 준전문가)\n\n\nstarted from the Gwangju"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Data_Visualize CH2\n\n\n\n\n\n\n\ncode\n\n\ndata_visualize\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nMar 30, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Visualize CH1\n\n\n\n\n\n\n\ncode\n\n\ndata_visualize\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nMar 29, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nadvanced_python CH1\n\n\n\n\n\n\n\ncode\n\n\nadvanced_python\n\n\njupyter\n\n\n\n\n\n\n\n\n\n\n\nMar 28, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Mining CH1\n\n\n\n\n\n\n\ncode\n\n\ndata_mining\n\n\njupyter\n\n\n\n\n\n\n\n\n\n\n\nMar 28, 2023\n\n\nSeongtaek\n\n\n\n\n\n\nNo matching items"
  }
]