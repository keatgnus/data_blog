[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "taek_blog",
    "section": "",
    "text": "Numpy 기본 문법\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nTokyo\n\n\n\n\n\n\n\nnews\n\n\ntravel\n\n\n\n\n\n\n\n\n\n\n\nMar 22, 2023\n\n\nSeongTaek\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/first_posting/index.html",
    "href": "posts/first_posting/index.html",
    "title": "Tokyo",
    "section": "",
    "text": "첫 게시글\n\nfirst posting"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Seong Taek Jo",
    "section": "",
    "text": "열심히 해보자"
  },
  {
    "objectID": "posts/Advanced_Python_ch2/ch2.html",
    "href": "posts/Advanced_Python_ch2/ch2.html",
    "title": "파이썬 심화 챕터2",
    "section": "",
    "text": "import numpy as np\na = 5; b = 6; c = 7\nc\n\n# append() : 값 추가\na = [1,2,3]\nb=a\na.append(4)\nb\n\n[1, 2, 3, 4]"
  },
  {
    "objectID": "posts/Advanced_Python_ch2/파이썬 심화 챕터2 공부.html",
    "href": "posts/Advanced_Python_ch2/파이썬 심화 챕터2 공부.html",
    "title": "Taek_Blog",
    "section": "",
    "text": "Numpy 기본 문법\n\n수치 할당\nimport numpy as np\na = 5; b = 6; c = 7\nc\n7\n\n\n변수, 논리연산자\n# append() : 값 추가\na = [1,2,3]\nb=a\na.append(4)\nb\n[1, 2, 3, 4]\n\n\n타입 확인\na = 5; b = 'foo'\ntype(a), type(b)\n(int, str)\n# format() : print{} 안에 내용 추가 (순서대로 0,1,2..)\n# float : 소수\na = 4.5; b = 2\nprint('a is {0}, b is {1}'.format(type(a), type(b)))\na/b\na is <class 'float'>, b is <class 'int'>\n\n\n\n\n\n2.25\n# isinstance() : 타입 맞는지 확인\na = 5\nisinstance(a, int)\nTrue\n# 여러 타입 중 하나라도 맞으면 True\na = 5; b = 4.5\nisinstance(a, (int, float, str)), isinstance(b, (int, float))\n(True, True)\n\n\n속성, 메서드\na = 'foo'\n# upper() : 소문자 → 대문자\na.upper()\n'FOO'\n# getattr(객체, 속성) : 객체의 속성에 접근해줌\ngetattr(a, 'split')\n<function str.split(sep=None, maxsplit=-1)>\n\n\nDuck typing\n# 덕 타이핑: \"특정 기능을 지원하는가만 중요하다\"는 의미를 전달할 때 사용하는 표현\n# = 이터러블 객체\ndef isiterable(obj):\n    try:\n        iter(obj)\n        return True\n    except TypeError: # 이터러블 하지 않은 값\n        return False\nisiterable('a string')\nTrue\nisiterable([1,2,3])\nTrue\n# 정수는 이터러블 하지 않음\nisiterable(5) \nFalse\n\n\nImport\nsome_module.py\nPi = 3.14159\ndef f(x): return x + 2\ndef g(a,b):return a+b\n# some_module : 임의적으로 만든 py 파일\nimport some_module\nresult = some_module.f(5)\nresult\n7\npi = some_module.PI\npi\n3.14159\n# 모듈 중 몇개만 import\nfrom some_module import f,g,PI\nresult = g(5,PI)\nresult\n8.14159\n# as 로 이름 간략하게 바꿔서도 사용 가능\nimport some_module as sm\nfrom some_module import PI as pi, g as gf\nr1 = sm.f(pi)\nr2 = gf(6, pi)\nr1, r2\n(5.14159, 9.14159)\n\n\n이항 연산, 비교\n5 - 7, 12 + 21.5, 5 <= 2\n(-2, 33.5, False)\na = [1,2,3]\nb = a\nc = list(a)\na is b, a is not c\n(True, True)\na == c\nTrue\na = None\na is None\nTrue\na_list = ['foo', 2, [4,5]]\na_list[2] = (3,4)\na_list\n['foo', 2, (3, 4)]\n# 잘못된 예시 (수치형을 범주형으로 바꾸려한 경우)\na_tuple = (3, 5, (4,5))\na_tuple[1] = 'four'\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\nCell In[23], line 3\n      1 # 잘못된 예시 (수치형을 범주형으로 바꾸려한 경우)\n      2 a_tuple = (3, 5, (4,5))\n----> 3 a_tuple[1] = 'four'\n\n\nTypeError: 'tuple' object does not support item assignment\nival = 17239871\nival ** 6\nfval = 7.243\nfval2 = 6.78e-5\n# // : 몫 (% : 나머지)\n3/2, type(3/2), 3//2, type(3//2)\na = 'one way of writing a string'\nb = 'another way'\na,b\n# 따옴표 3개 : 여러 줄을 한 줄로 출력\nc = '''\nThis is a longer string that\nspans multiple lines\n'''\nc\n# 띄어진 줄 개수\nc.count('\\n')\n# 잘못된 예시 (문자 바꾸려한 경우)\na = 'this is a string'\na[10] = 'f'\n# replace 이용해 변경\nb = a.replace('string', 'longer string')\na,b\n# 수치형 → 범주형 변경\na = 5.6\ns = str(a)\nprint(s),\ntype(s)\n# list 이용해 문자 하나씩 출력\ns = 'python'\nlist(s)\n# 3전 까지 출력, 3부터 출력\ns[:3], s[3:]\n# \\n로 줄 띄우기\nprint('12\\n34')\n# 이상한 예시\ns = '12\\\\34'\nprint(s)\n# 범주형도 더해진다\na = 'this is the first half'\nb = 'and this is the second half'\na + b\n# {0:.2f} : 소수점 둘째 자리로 반올림\n# {1:s} : 두번째 인수의 형식을 범주형으로 저장\n# {2:d} : 세번째 인수의 형식을 정확한 정수로 저장\ntemplate = '{0:.2f} {1:s} are worth US${2:d}'\ntemplate\ntemplate.format(4.5560, 'Argentine Pesos', 1)\ntemplate.format(1263.23, 'won', 1)\n\n\nBooleans\n불리언 타입 - True, False 두가지 값\nTrue and True\nFalse or True\n\n\nType casting\n원하는 타입으로 해석\ns = '3.14159'\nfval = float(s)\ntype(fval)\nint(fval)\nbool(fval)\n# bool : 비어있는 값, 0 → False\nbool(0)\na = None\na is None\ndef add_and_maybe_multiply(a, b, c=None):\n    result = a + b\n    if c is not None:\n        result = result * c\n    return result\nadd_and_maybe_multiply(5,3)\nadd_and_maybe_multiply(5,3,10)\ntype(None)\n\n\n날짜, 시간 값\nfrom datetime import datetime, date, time\ndt = datetime(2011, 10, 29, 20, 30, 21)\ndt\n# 년, 월, 일, 시, 분, 초\ndt.day\ndt.minute\n# 년, 월, 일\ndt.date()\n# 시, 분, 초\ndt.time()\n# strftime : 날짜 문자열을 날짜 객체로 만들 때\ndt.strftime('%m/%d/%Y %H:%M'), dt.strftime('%Y/%m/%d %H:%M')\n# strptime : 날짜 객체열을 날짜 문자열로 출력 할 때 \ndatetime.strptime('20091031', '%Y%m%d')\ndt.replace(minute=0, second=0)\n# 날짜 끼리 연산 가능\ndt2 = datetime(2011, 11, 15, 22, 30)\ndelta = dt2 - dt\ndelta\ntype(delta)\ndt\ndt + delta\n\n\nControl Flow\nx = -5\n\nif x < 0:\n    print('It is negative')\nx = 8\nif x < 0:\n    print('It is negative')\nelif x == 0:\n    print('Equal to zero')\nelif 0 < x < 5:\n    print('positive but smaller than 5')\nelse:\n    print('positive and larger than or equal to 5')\na = 5; b = 7; c = 8; d = 4\nif a < b or c > d:\n    print('Made it')\n4>3>2>1, 3>5 or 2>1, 3>5>2>1\n\n\nfor loops 루프문\n# 잘못된 예시 (+= 는 int, NoneType 지원 안함)\nsequence = [1,2,None,4,None,5]\ntotal = 0\n\nfor value in sequence:\n    total += value\n    # total = total + value\nsequence = [1,2,None,4,None,5]\ntotal = 10\n\nfor value in sequence:\n    if value is None:\n        continue\n    total += value\ntotal\nsequence = [1,2,0,4,6,5,2,1]\ntotal_until_5 = 0\nfor value in sequence:\n    if value == 5:\n        break\n    total_until_5 += value\ntotal_until_5\nlist(range(4))\n# j가 i 보다 커지기 전까지 조합\nfor i in range(4):\n    for j in range(4):\n        if j > i:\n            break\n        print((j,i))\n# 전체 조합 출력\nfor i in range(4):\n    for j in range(4):\n        print((i,j))\nfor a, b, c in [[1,2,3],[4,5,6],[7,8,9]]:\n    print(a,b,c)\nfor a in [[1,2,3],[4,5,6],[7,8,9]]:\n    print(a)\n\n\nwhile loops\nx = 256\ntotal = 0\n\nwhile x > 0:\n    if total >500:\n        break\n    total += x\n    x = x // 2\n    print(total,x)\ntotal, x\ntotal,x\n\n\npass\nx = 7\n\nif x < 0:\n    print('negative!')\nelif x == 0:\n    pass\nelse:\n    print('positive!')\n\n\nrange\nrange(10)\nlist(range(10))\nlist(range(0, 20, 2))\nlist(range(5, 0, -1))\nsum = 0\nfor i in range(100000):\n    if i % 3 == 0 or i % 5 == 0:\n        sum += i\n\nsum\nx = 5\nb = 'Non-negative' if x >= 0 else 'Negative'\nb\nx = 5\n\na = 100 if x>=0 else -100\na"
  }
]