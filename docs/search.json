[
  {
    "objectID": "posts/Data_Visualize_mytown/기말고사 제출.html",
    "href": "posts/Data_Visualize_mytown/기말고사 제출.html",
    "title": "Data_Visualize mytown",
    "section": "",
    "text": "HTML파일로 보기\nFinal Exam2 - Visualizing My Neighborhood"
  },
  {
    "objectID": "posts/Data_Visualize_mytown/기말고사 제출.html#광주-지역정보-시각화",
    "href": "posts/Data_Visualize_mytown/기말고사 제출.html#광주-지역정보-시각화",
    "title": "Data_Visualize mytown",
    "section": "1 광주 지역정보 시각화",
    "text": "1 광주 지역정보 시각화\n\n1.1 패키지\n\n#install.packages(\"ggtext\")\nlibrary(dplyr)\nlibrary(ggtext)\nlibrary(tmap)\nlibrary(rgdal)\nlibrary(sf)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(viridis)\nlibrary(dplyr)\n\n\n\n1.2 데이터 불러오기\n\ngwang_ju <- readOGR(\"C:/Users/seong taek/Desktop/3-1 DataVisualize/data_visualize/LSMD_ADM_SECT_UMD_29.shp\",encoding = \"euc-kr\")\n#> OGR data source with driver: ESRI Shapefile \n#> Source: \"C:\\Users\\seong taek\\Desktop\\3-1 DataVisualize\\data_visualize\\LSMD_ADM_SECT_UMD_29.shp\", layer: \"LSMD_ADM_SECT_UMD_29\"\n#> with 203 features\n#> It has 5 fields\ngwang_ju <- gwang_ju %>% st_as_sf()\ngwang_ju %>% head()\n#> Simple feature collection with 6 features and 5 fields\n#> Geometry type: MULTIPOLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: 922908.9 ymin: 1685904 xmax: 937583.2 ymax: 1691397\n#> Projected CRS: Korea 2000 / Unified CS\n#>     EMD_CD EMD_NM SGG_OID COL_ADM_SE  GID                       geometry\n#> 0 29200202 오선동    3233      29200 3247 MULTIPOLYGON (((934856 1689...\n#> 1 29200178 동림동    3232      29200 3248 MULTIPOLYGON (((925403.5 16...\n#> 2 29200177 양산동    3231      29200 3249 MULTIPOLYGON (((925032.9 16...\n#> 3 29200176 덕림동    1605      29200 3250 MULTIPOLYGON (((925606 1686...\n#> 4 29200175 동호동    1604      29200 3251 MULTIPOLYGON (((925167 1688...\n#> 5 29200174 명도동    3228      29200 3252 MULTIPOLYGON (((925936.6 16...\n\ngwang_ju_data <- read.csv('C:/Users/seong taek/Desktop/3-1 DataVisualize/data_visualize/소상공인시장진흥공단_상가(상권)정보_광주_202303.csv')\ngwang_ju_data %>% head()\n#>           상가업소번호                           상호명 지점명\n#> 1 MA0101202210A0085370                           수헤어       \n#> 2 MA0101202210A0040614                           몰카페       \n#> 3 MA0101202210A0081304                   명품고로케NO.1       \n#> 4 MA0101202210A0051646                       엄마손팥죽       \n#> 5 MA010120220805431082 여유드림24시무인셀프빨래방소태점       \n#> 6 MA010120220805431357                         위고키친       \n#>   상권업종대분류코드 상권업종대분류명 상권업종중분류코드 상권업종중분류명\n#> 1                 S2       수리·개인               S207       이용·미용\n#> 2                 I2             음식               I212        비알코올 \n#> 3                 I2             음식               I210        기타 간이\n#> 4                 I2             음식               I201             한식\n#> 5                 S2       수리·개인               S209             세탁\n#> 6                 I2             음식               I201             한식\n#>   상권업종소분류코드 상권업종소분류명 표준산업분류코드\n#> 1             S20701           미용실           S96112\n#> 2             I21201             카페           I56221\n#> 3             I21001          빵/도넛           I56191\n#> 4             I20101      백반/한정식           I56194\n#> 5             S20902      셀프 빨래방           S96912\n#> 6             I20101      백반/한정식           I56111\n#>               표준산업분류명 시도코드     시도명 시군구코드 시군구명 행정동코드\n#> 1                두발 미용업       29 광주광역시      29170     북구   29170590\n#> 2                커피 전문점       29 광주광역시      29200   광산구   29200620\n#> 3                   제과점업       29 광주광역시      29200   광산구   29200565\n#> 4 김밥 및 기타 간이 음식점업       29 광주광역시      29155     남구   29155705\n#> 5              가정용 세탁업       29 광주광역시      29110     동구   29110730\n#> 6         한식 일반 음식점업       29 광주광역시      29170     북구   29170530\n#>   행정동명 법정동코드 법정동명     지번코드 대지구분코드 대지구분명 지번본번지\n#> 1   용봉동 2917010700   용봉동 2.917011e+18            1       대지        405\n#> 2   비아동 2920011300   도천동 2.920011e+18            1       대지        380\n#> 3   어룡동 2920010800   소촌동 2.920011e+18            1       대지        287\n#> 4   진월동 2915510800   진월동 2.915511e+18            1       대지        369\n#> 5  지원1동 2911011900   소태동 2.911012e+18            1       대지        617\n#> 6  중흥3동 2917010100   중흥동 2.917010e+18            1       대지        271\n#>   지번부번지                       지번주소   도로명코드\n#> 1         NA     광주광역시 북구 용봉동 405 291703162020\n#> 2          2 광주광역시 광산구 도천동 380-2 292003163014\n#> 3          5 광주광역시 광산구 소촌동 287-5 292004289285\n#> 4          2   광주광역시 남구 진월동 369-2 291553161002\n#> 5          3   광주광역시 동구 소태동 617-3 291103159017\n#> 6         22  광주광역시 북구 중흥동 271-22 291704286364\n#>                           도로명 건물본번지 건물부번지 건물관리번호\n#> 1         광주광역시 북구 반룡로         57         NA 2.917011e+24\n#> 2       광주광역시 광산구 사암로        790         NA 2.920011e+24\n#> 3 광주광역시 광산구 소촌로86번길         11         NA 2.920011e+24\n#> 4         광주광역시 남구 금당로         47         NA 2.915511e+24\n#> 5         광주광역시 동구 학소로         73         NA 2.911012e+24\n#> 6   광주광역시 북구 서방로31번길          5         NA 2.917010e+24\n#>                   건물명                        도로명주소 구우편번호\n#> 1 용봉동유창하이리빙맨션         광주광역시 북구 반룡로 57     500843\n#> 2                             광주광역시 광산구 사암로 790     506300\n#> 3                        광주광역시 광산구 소촌로86번길 11     506802\n#> 4               철물전기         광주광역시 남구 금당로 47     503842\n#> 5                                광주광역시 동구 학소로 73     501828\n#> 6                           광주광역시 북구 서방로31번길 5     500873\n#>   신우편번호 동정보 층정보 호정보     경도     위도\n#> 1      61182     NA      1     NA 126.9044 35.17869\n#> 2      62244     NA            NA 126.8187 35.21305\n#> 3      62385     NA      1     NA 126.7942 35.15232\n#> 4      61735     NA      1     NA 126.8957 35.12114\n#> 5      61500     NA      1     NA 126.9341 35.12629\n#> 6      61190     NA      1     NA 126.9165 35.17342\n\n\n\n1.3 광주지역 ‘구’ 분류\n\ngwang_ju %>% ggplot(aes(fill = COL_ADM_SE)) +\n  geom_sf() +\n  theme_minimal() +\n  labs(title = \"광주\") +\n  scale_fill_discrete(name = \"구\",\n                      labels = c(\"동구\",\"서구\",\"남구\",\"북구\",\"광산구\"))\n\n\n\n\n\n\n1.4 광주지역 ‘동’ 분류\n\ngwang_ju_dong <- gwang_ju %>% \n  ggplot(aes(fill=EMD_NM))+\n  geom_sf()+\n  geom_sf_text(mapping = aes(label = EMD_NM))+\n  labs(title = \"광주\")+\n  theme_minimal()+\n  scale_fill_discrete(name = \"동\") \n  \ngwang_ju_dong %>% ggplotly()\n\n\n\n\n\n\n\n1.5 광주광역시 북구 문흥동\n\nmy_dong <- gwang_ju %>%\n  filter(EMD_NM == \"문흥동\") %>%\n  ggplot(aes(fill=EMD_NM)) +\n  geom_sf() +\n  geom_sf_text(mapping = aes(label = EMD_NM)) +\n  labs(title = \"광주광역시 북구 문흥동\") +\n  theme_minimal() +\n  scale_fill_discrete(name = \"동\")\n\nmy_dong %>% ggplotly()\n\n\n\n\n\n\n\n1.6 전처리\n\n각종 편의시설\n\n\nlibrary(RColorBrewer)\n# 문흥동 데이터만 추출\ngwang_ju_data_mydong <- gwang_ju_data %>% \n  filter(gwang_ju_data$법정동명 == \"문흥동\") %>% \n   st_as_sf(coords = c(\"경도\", \"위도\"))\n\nst_crs(gwang_ju_data_mydong) <- 4737\n\n# 문흥동 지도\ngwang_ju_mydong <- gwang_ju %>% \n  filter(gwang_ju$EMD_NM == \"문흥동\")\n\n# 문흥동에 있는 상권업종소분류명 추출\nexisting_categories <- unique(gwang_ju_data_mydong$상권업종소분류명)\nexisting_categories %>% head()\n#> [1] \"편의점\"             \"미용실\"             \"독서실/스터디 카페\"\n#> [4] \"부동산 중개/대리업\" \"곱창 전골/구이\"     \"백반/한정식\"\n\n# viridis 색상 팔레트 사용 (146개의 색상)\ncolors <- magma(length(existing_categories))\n\n# 상권업종소분류명과 색상을 매칭하는 데이터프레임 생성\ncolor_mapping <- data.frame(상권업종소분류명 = existing_categories,\n                            색상 = colors)\n\ncolor_mapping %>% head()\n#>     상권업종소분류명      색상\n#> 1             편의점 #000004FF\n#> 2             미용실 #010106FF\n#> 3 독서실/스터디 카페 #020109FF\n#> 4 부동산 중개/대리업 #02020CFF\n#> 5     곱창 전골/구이 #03030FFF\n#> 6        백반/한정식 #040414FF\n\n\n\n1.7 동네 편의시설 시각화\n\nmy_dong2 <- ggplot() +\n  geom_sf(data = gwang_ju_mydong, fill = 'grey90') +\n  geom_sf(data = gwang_ju_data_mydong, aes(color = 상권업종소분류명), size = 1.5) +\n  scale_color_manual(values = color_mapping$색상,\n                     breaks = color_mapping$상권업종소분류명,\n                     labels = color_mapping$상권업종소분류명,\n                     drop = TRUE) +\n  theme_minimal() +\n  labs(title = \"문흥동 내 편의시설\")\n\nmy_dong2 %>% ggplotly()"
  },
  {
    "objectID": "posts/Data_Visualize_mytown/기말고사 제출.html#tmap-시각화",
    "href": "posts/Data_Visualize_mytown/기말고사 제출.html#tmap-시각화",
    "title": "Data_Visualize mytown",
    "section": "2 tmap 시각화",
    "text": "2 tmap 시각화\n\nOpenStreetMap\n\n\ntmap_mode(\"view\")\n#> tmap mode set to interactive viewing\n\ntmap_options(check.and.fix = TRUE)\n\ntm_shape(gwang_ju_mydong[\"EMD_NM\"])+\n  tm_polygons(col=\"white\",alpha = 0.3)+\n  tm_shape(gwang_ju_data_mydong[\"상권업종소분류명\"])+\n  tm_symbols(shape = 2, col = \"royalblue\", size = 0.8, alpha = 0.5)\n#> Symbol shapes other than circles or icons are not supported in view mode."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nData_Visualize mytown\n\n\n\n\n\n\n\ncode\n\n\ndata_visualization\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nJul 4, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nSpatial_Info_Analysis Tasu_Data\n\n\n\n\n\n\n\ncode\n\n\nSpatial_Info_Analysis\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nJul 3, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Visualize Movie_Data\n\n\n\n\n\n\n\ncode\n\n\ndata_visualization\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nJul 2, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nadvanced_python CH4\n\n\n\n\n\n\n\ncode\n\n\nadvanced_python\n\n\njupyter\n\n\n\n\n\n\n\n\n\n\n\nMay 29, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nadvanced_python CH3\n\n\n\n\n\n\n\ncode\n\n\nadvanced_python\n\n\njupyter\n\n\n\n\n\n\n\n\n\n\n\nMay 28, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Mining CH3\n\n\n\n\n\n\n\ncode\n\n\ndata_mining\n\n\njupyter\n\n\n\n\n\n\n\n\n\n\n\nApr 27, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nSpatial_Info_Analysis CH2\n\n\n\n\n\n\n\ncode\n\n\nSpatial_Info_Analysis\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 22, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nSpatial_Info_Analysis CH1\n\n\n\n\n\n\n\ncode\n\n\nSpatial_Info_Analysis\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 20, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nOpendata_Analysis CH3\n\n\n\n\n\n\n\ncode\n\n\nopendata_analysis\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 16, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nOpendata_Analysis CH4\n\n\n\n\n\n\n\ncode\n\n\nopendata_analysis\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 16, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nOpendata_Analysis CH5\n\n\n\n\n\n\n\ncode\n\n\nopendata_analysis\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 16, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nOpendata_Analysis CH2\n\n\n\n\n\n\n\ncode\n\n\nopendata_analysis\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 15, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nOpendata_Analysis CH1\n\n\n\n\n\n\n\ncode\n\n\nopendata_analysis\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 14, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Visualization CH7\n\n\n\n\n\n\n\ncode\n\n\ndata_visualization\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 13, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Visualization CH6\n\n\n\n\n\n\n\ncode\n\n\ndata_visualization\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 12, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Visualization CH5\n\n\n\n\n\n\n\ncode\n\n\ndata_visualization\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 6, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Visualization CH4\n\n\n\n\n\n\n\ncode\n\n\ndata_visualization\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 5, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Mining CH1\n\n\n\n\n\n\n\ncode\n\n\ndata_mining\n\n\njupyter\n\n\n\n\n\n\n\n\n\n\n\nApr 4, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Mining CH2\n\n\n\n\n\n\n\ncode\n\n\ndata_mining\n\n\njupyter\n\n\n\n\n\n\n\n\n\n\n\nApr 4, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Visualization CH3\n\n\n\n\n\n\n\ncode\n\n\ndata_visualization\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 4, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Visualization CH2\n\n\n\n\n\n\n\ncode\n\n\ndata_visualization\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nMar 30, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Visualization CH1\n\n\n\n\n\n\n\ncode\n\n\ndata_visualization\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nMar 29, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nadvanced_python CH2\n\n\n\n\n\n\n\ncode\n\n\nadvanced_python\n\n\njupyter\n\n\n\n\n\n\n\n\n\n\n\nMar 28, 2023\n\n\nSeongtaek\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Data_Visualize_Ch7/figure 4.4 ,  figure 4.6.html",
    "href": "posts/Data_Visualize_Ch7/figure 4.4 ,  figure 4.6.html",
    "title": "Data_Visualization CH7",
    "section": "",
    "text": "HTML파일로 보기\nFigure 4.4, Figure 4.6"
  },
  {
    "objectID": "posts/Data_Visualize_Ch7/figure 4.4 ,  figure 4.6.html#데이터-시각화-실습-지역-정보-시각화-figure-4.4-4.6",
    "href": "posts/Data_Visualize_Ch7/figure 4.4 ,  figure 4.6.html#데이터-시각화-실습-지역-정보-시각화-figure-4.4-4.6",
    "title": "Data_Visualization CH7",
    "section": "1 데이터 시각화 실습 : 지역 정보 시각화 Figure 4.4, 4.6",
    "text": "1 데이터 시각화 실습 : 지역 정보 시각화 Figure 4.4, 4.6\n\n1.1 패키지 불러오기\n\n#install.packages(\"geojsonsf\")\nlibrary(geojsonsf)\nlibrary(sf)\n#> Linking to GEOS 3.9.3, GDAL 3.5.2, PROJ 8.2.1; sf_use_s2() is TRUE\nlibrary(ggplot2)\nlibrary(dplyr)\n#> \n#> Attaching package: 'dplyr'\n#> The following objects are masked from 'package:stats':\n#> \n#>     filter, lag\n#> The following objects are masked from 'package:base':\n#> \n#>     intersect, setdiff, setequal, union\nlibrary(colorspace)\n\n\n\n1.2 데이터 불러오기\n\nKOR_SIDO.json : 대한민국 시,도 정보\nKOR_SIGU.json : 대한민국 시,군,구 정보\n202202_주민등록인구및세대현황.csv\n\n\nKOR_SIDO <- geojson_sf('C:/Users/seong taek/Desktop/3-1 DataVisualize/data_visualize/KOR_SIDO.json')\n\nKOR_SIGU <- geojson_sf('C:/Users/seong taek/Desktop/3-1 DataVisualize/data_visualize/KOR_SIGU.json')\n\nkor_202202 <- read.csv('C:/Users/seong taek/Desktop/3-1 DataVisualize/data_visualize/202202_주민등록인구및세대현황.csv')\n\n\n\n1.3 전처리\n\n### 컬럼 클래스(타입) 확인\nkor_202202 %>% sapply(class)\n#>      행정구역 행정구역_코드      총인구수        세대수   세대당_인구 \n#>   \"character\"     \"numeric\"     \"numeric\"     \"numeric\"     \"numeric\" \n#>   남자_인구수   여자_인구수     남여_비율 \n#>     \"numeric\"     \"numeric\"     \"numeric\"\n\n### `행정구역_코드`를 numeric → character형식으로 변환\nkor_202202$행정구역_코드 <- kor_202202$행정구역_코드 %>% format()\n\nuse_map <- KOR_SIGU\nuse_map %>% head()\n#> Simple feature collection with 6 features and 3 fields\n#> Geometry type: POLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: 127.5071 ymin: 37.06363 xmax: 129.1596 ymax: 38.23041\n#> Geodetic CRS:  WGS 84\n#>   SIG_CD   SIG_ENG_NM SIG_KOR_NM                       geometry\n#> 1  42110 Chuncheon-si     춘천시 POLYGON ((127.6047 38.07265...\n#> 2  42130     Wonju-si     원주시 POLYGON ((128.1086 37.2988,...\n#> 3  42150 Gangneung-si     강릉시 POLYGON ((129.0479 37.64961...\n#> 4  42170   Donghae-si     동해시 POLYGON ((129.1596 37.47574...\n#> 5  42190   Taebaek-si     태백시 POLYGON ((129.0121 37.31012...\n#> 6  42210    Sokcho-si     속초시 POLYGON ((128.6087 38.16128...\n\n### 병합할 컬럼 동일화\nuse_map$행정구역_코드 <- paste(use_map$SIG_CD, \"00000\", sep = \"\")\n\n### 공통된 '행정구역_코드'를 기준으로 병합 \nuse_map <- use_map %>% merge(kor_202202, by = \"행정구역_코드\", all.x=T)\n\n\n\n1.4 Figure 4.4 - 총 인구수\n\n사용 데이터셋 : use_map\nfill : 총인구수\ngeom_sf (지리적 객체 그래프)\n\n경계선 색상\n\ncoord_sf\n\n지도 좌표계 제거\n\nscale_fill_distiller\n\n이름 : “인구수”\n팔레트 색상 설정\n연속형 색상 척도 사용\n결측값 색상 설정\n색상 척도 방향 설정 : 작은 값 → 큰 값\n색상 척도 눈금 설정\n색상 척도 라벨 설정, 천 단위 옵션, 지수표기법 미사용\n\n테마 : 미니멀\n테마 옵션\n\n범례 제목 위치 지정\n범례 텍스트 위치 지정\n범례 위치 지정\n\n\n\nggplot(use_map, aes(fill = 총인구수)) +\ngeom_sf(color = \"gray90\") +\ncoord_sf(datum = NA) +\nscale_fill_distiller(name = \"인구수\",\n                      palette = \"Blues\",\n                      type = \"seq\",\n                      na.value = \"grey60\",\n                      direction = 1,\n                      breaks = seq(0,10,2) * 1e+5,\n                      labels = format(seq(0,10,2) * 1e+5,\n                                      big.mark = \",\", scientific = F),) +\ntheme_minimal() +\ntheme(legend.title.align = 0.5,\n      legend.text.align = 1.0,\n      legend.position = c(.85, .2))\n\n\n\n\n\n\n1.5 광주만 뽑기\n\n### filter 이용 광주지역만 추출\nuse_map %>%\n  filter(substr(행정구역_코드,1,2) == \"29\") %>% \n  ggplot(aes(fill = 총인구수)) +\n  geom_sf(color = \"gray90\") +\n  coord_sf(datum = NA) +\n  scale_fill_distiller(name = \"인구수\",\n                       palette = \"Blues\",\n                       type = \"seq\",\n                       na.value = \"grey60\",\n                       direction = 1,\n                       breaks = seq(0,10,2) * 1e+5,\n                       labels = format(seq(0,10,2) * 1e+5,\n                                       big.mark = \",\", scientific = F),) +\n  theme_minimal() +\n  theme(legend.title.align = 0.5,\n        legend.text.align = 1.0,\n        legend.position = c(1, .2))\n\n\n\n\n\n\n1.6 Figure 4.6 - 남여 비율\n\n사용 데이터셋 : use_map\nfill : 남여_비율\ngeom_sf (지리적 객체 그래프)\ncoord_sf\n\n지도 좌표계 제거\n\nscale_fill_continuous_diverging\n\n이름 : “남자/여자”\n팔레트 색상 설정\n색상 척도 : 중앙값 기준\n색상 척도 범위 설정\n색상 척도 순서 반전\n\n테마 : 미니멀\n테마 옵션\n\n범례 제목 위치 지정\n범례 텍스트 위치 지정\n범례 위치 지정\n\n\n\nggplot(use_map, aes(fill = 남여_비율)) +\ngeom_sf() +\ncoord_sf(datum = NA) +\nscale_fill_continuous_diverging(name = \"남자/여자\",\n                                palette = \"Blue-Red\",\n                                mid = 1,\n                                limits = 1 + c(-1, 1)*0.35,\n                                rev = T) +\ntheme_minimal() +\ntheme(legend.title.align = 0.5,\n      legend.text.align = 1.0,\n      legend.position = c(.95, .3))"
  },
  {
    "objectID": "posts/Data_Visualize_Ch7/figure 4.4 ,  figure 4.6.html#과제",
    "href": "posts/Data_Visualize_Ch7/figure 4.4 ,  figure 4.6.html#과제",
    "title": "Data_Visualization CH7",
    "section": "2 과제",
    "text": "2 과제\n\n2023년3월 총인구수 - Figure 4.4\n\n\n2.1 데이터 불러오기\n\n202303_202303_주민등록인구및세대현황_월간.csv\nKOR_SIGU.json : 대한민국 시,군,구 정보\n\n\nkor_202303 <- read.csv('C:/Users/seong taek/Desktop/3-1 DataVisualize/data_visualize/202303_202303_주민등록인구및세대현황_월간.csv',fileEncoding = \"CP949\")\nKOR_SIGU <- geojson_sf('C:/Users/seong taek/Desktop/3-1 DataVisualize/data_visualize/KOR_SIGU.json')\n\nkor_202303 %>% head()\n#>                         행정구역 X2023년03월_총인구수 X2023년03월_세대수\n#> 1       서울특별시  (1100000000)            9,426,404          4,463,385\n#> 2 서울특별시 종로구 (1111000000)              141,060             72,679\n#> 3   서울특별시 중구 (1114000000)              120,963             63,862\n#> 4 서울특별시 용산구 (1117000000)              217,756            109,735\n#> 5 서울특별시 성동구 (1120000000)              280,240            133,513\n#> 6 서울특별시 광진구 (1121500000)              336,801            169,787\n#>   X2023년03월_세대당.인구 X2023년03월_남자.인구수 X2023년03월_여자.인구수\n#> 1                    2.11               4,566,299               4,860,105\n#> 2                    1.94                  68,170                  72,890\n#> 3                    1.89                  58,699                  62,264\n#> 4                    1.98                 104,640                 113,116\n#> 5                    2.10                 136,233                 144,007\n#> 6                    1.98                 162,209                 174,592\n#>   X2023년03월_남여.비율\n#> 1                  0.94\n#> 2                  0.94\n#> 3                  0.94\n#> 4                  0.93\n#> 5                  0.95\n#> 6                  0.93\n\nKOR_SIGU %>% head()\n#> Simple feature collection with 6 features and 3 fields\n#> Geometry type: POLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: 127.5071 ymin: 37.06363 xmax: 129.1596 ymax: 38.23041\n#> Geodetic CRS:  WGS 84\n#>   SIG_CD   SIG_ENG_NM SIG_KOR_NM                       geometry\n#> 1  42110 Chuncheon-si     춘천시 POLYGON ((127.6047 38.07265...\n#> 2  42130     Wonju-si     원주시 POLYGON ((128.1086 37.2988,...\n#> 3  42150 Gangneung-si     강릉시 POLYGON ((129.0479 37.64961...\n#> 4  42170   Donghae-si     동해시 POLYGON ((129.1596 37.47574...\n#> 5  42190   Taebaek-si     태백시 POLYGON ((129.0121 37.31012...\n#> 6  42210    Sokcho-si     속초시 POLYGON ((128.6087 38.16128...\n\n\n\n2.2 전처리\n\n#install.packages(\"stringr\")\nlibrary(stringr) # 고급 문자 추출 패키지\n#> Warning: package 'stringr' was built under R version 4.2.2\n\n### 쉼표없는 총인구수 컬럼 생성\n### 행정구역 코드만 추출한 컬럼 생성\nkor_202303 <- kor_202303 %>% \n  mutate(총인구수_202303 = gsub(\",\",\"\", X2023년03월_총인구수),\n         행정구역_코드 = str_sub(kor_202303$행정구역, -11, -2))\n\n### 컬럼 클래스(타입) 확인\nkor_202303 %>% sapply(class)\n#>                행정구역    X2023년03월_총인구수      X2023년03월_세대수 \n#>             \"character\"             \"character\"             \"character\" \n#> X2023년03월_세대당.인구 X2023년03월_남자.인구수 X2023년03월_여자.인구수 \n#>               \"numeric\"             \"character\"             \"character\" \n#>   X2023년03월_남여.비율         총인구수_202303           행정구역_코드 \n#>               \"numeric\"             \"character\"             \"character\"\n\n### '총인구수_202303' 컬럼 character → numeric 변환\nkor_202303$총인구수_202303 <- kor_202303$총인구수_202303 %>% as.numeric()\n\n### 병합할 컬럼 동일화\nKOR_SIGU_use <- KOR_SIGU\nKOR_SIGU_use$행정구역_코드 <- paste(KOR_SIGU_use$SIG_CD, \"00000\", sep = \"\")\n\nkor_202303 %>% head()\n#>                         행정구역 X2023년03월_총인구수 X2023년03월_세대수\n#> 1       서울특별시  (1100000000)            9,426,404          4,463,385\n#> 2 서울특별시 종로구 (1111000000)              141,060             72,679\n#> 3   서울특별시 중구 (1114000000)              120,963             63,862\n#> 4 서울특별시 용산구 (1117000000)              217,756            109,735\n#> 5 서울특별시 성동구 (1120000000)              280,240            133,513\n#> 6 서울특별시 광진구 (1121500000)              336,801            169,787\n#>   X2023년03월_세대당.인구 X2023년03월_남자.인구수 X2023년03월_여자.인구수\n#> 1                    2.11               4,566,299               4,860,105\n#> 2                    1.94                  68,170                  72,890\n#> 3                    1.89                  58,699                  62,264\n#> 4                    1.98                 104,640                 113,116\n#> 5                    2.10                 136,233                 144,007\n#> 6                    1.98                 162,209                 174,592\n#>   X2023년03월_남여.비율 총인구수_202303 행정구역_코드\n#> 1                  0.94         9426404    1100000000\n#> 2                  0.94          141060    1111000000\n#> 3                  0.94          120963    1114000000\n#> 4                  0.93          217756    1117000000\n#> 5                  0.95          280240    1120000000\n#> 6                  0.93          336801    1121500000\nKOR_SIGU_use %>% head()\n#> Simple feature collection with 6 features and 4 fields\n#> Geometry type: POLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: 127.5071 ymin: 37.06363 xmax: 129.1596 ymax: 38.23041\n#> Geodetic CRS:  WGS 84\n#>   SIG_CD   SIG_ENG_NM SIG_KOR_NM                       geometry 행정구역_코드\n#> 1  42110 Chuncheon-si     춘천시 POLYGON ((127.6047 38.07265...    4211000000\n#> 2  42130     Wonju-si     원주시 POLYGON ((128.1086 37.2988,...    4213000000\n#> 3  42150 Gangneung-si     강릉시 POLYGON ((129.0479 37.64961...    4215000000\n#> 4  42170   Donghae-si     동해시 POLYGON ((129.1596 37.47574...    4217000000\n#> 5  42190   Taebaek-si     태백시 POLYGON ((129.0121 37.31012...    4219000000\n#> 6  42210    Sokcho-si     속초시 POLYGON ((128.6087 38.16128...    4221000000\n\n### 공통된 '행정구역_코드'를 기준으로 병합 \nKOR_SIGU_use <- KOR_SIGU_use %>% merge(kor_202303, by = \"행정구역_코드\", all.x=T)\nKOR_SIGU_use %>% head()\n#> Simple feature collection with 6 features and 12 fields\n#> Geometry type: POLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: 126.9446 ymin: 37.50654 xmax: 127.1153 ymax: 37.6317\n#> Geodetic CRS:  WGS 84\n#>   행정구역_코드 SIG_CD    SIG_ENG_NM SIG_KOR_NM\n#> 1    1111000000  11110     Jongno-gu     종로구\n#> 2    1114000000  11140       Jung-gu       중구\n#> 3    1117000000  11170    Yongsan-gu     용산구\n#> 4    1120000000  11200  Seongdong-gu     성동구\n#> 5    1121500000  11215   Gwangjin-gu     광진구\n#> 6    1123000000  11230 Dongdaemun-gu   동대문구\n#>                           행정구역 X2023년03월_총인구수 X2023년03월_세대수\n#> 1   서울특별시 종로구 (1111000000)              141,060             72,679\n#> 2     서울특별시 중구 (1114000000)              120,963             63,862\n#> 3   서울특별시 용산구 (1117000000)              217,756            109,735\n#> 4   서울특별시 성동구 (1120000000)              280,240            133,513\n#> 5   서울특별시 광진구 (1121500000)              336,801            169,787\n#> 6 서울특별시 동대문구 (1123000000)              337,574            171,140\n#>   X2023년03월_세대당.인구 X2023년03월_남자.인구수 X2023년03월_여자.인구수\n#> 1                    1.94                  68,170                  72,890\n#> 2                    1.89                  58,699                  62,264\n#> 3                    1.98                 104,640                 113,116\n#> 4                    2.10                 136,233                 144,007\n#> 5                    1.98                 162,209                 174,592\n#> 6                    1.97                 165,933                 171,641\n#>   X2023년03월_남여.비율 총인구수_202303                       geometry\n#> 1                  0.94          141060 POLYGON ((127.0118 37.58157...\n#> 2                  0.94          120963 POLYGON ((127.0234 37.57191...\n#> 3                  0.93          217756 POLYGON ((127.009 37.54413,...\n#> 4                  0.95          280240 POLYGON ((127.0724 37.55996...\n#> 5                  0.93          336801 POLYGON ((127.1153 37.55676...\n#> 6                  0.97          337574 POLYGON ((127.0711 37.60732...\n\n\n\n2.3 Figure 4.4 - 2023년3월 총인구수\n\n사용 데이터셋 : KOR_SIGU_use\nfill : 총인구수_202303\ngeom_sf (지리적 객체 그래프)\n\n경계선 색상\n\ncoord_sf\n\n지도 좌표계 제거\n\nscale_fill_distiller\n\n이름 : “2023년 3월 총인구수”\n팔레트 색상 설정\n연속형 색상 척도 사용\n결측값 색상 설정\n색상 척도 방향 설정 : 작은 값 → 큰 값\n색상 척도 눈금 설정\n색상 척도 라벨 설정, 천 단위 옵션, 지수표기법 미사용\n\n테마 : 미니멀\n테마 옵션\n\n범례 제목 위치 지정\n범례 텍스트 위치 지정\n범례 위치 지정\n\n\n\nggplot(KOR_SIGU_use, aes(fill = 총인구수_202303)) +\ngeom_sf(color = \"gray90\") +\ncoord_sf(datum = NA) +\nscale_fill_distiller(name = \"2023년 3월 총인구수\",\n                      palette = \"Blues\",\n                      type = \"seq\",\n                      na.value = \"grey60\",\n                      direction = 1,\n                      breaks = seq(0,10,2) * 1e+5,\n                      labels = format(seq(0,10,2) * 1e+5,\n                                      big.mark = \",\", scientific = F),) +\ntheme_minimal() +\ntheme(legend.title.align = 0.5,\n      legend.text.align = 1.0,\n      legend.position = c(.85, .2))"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Profile",
    "section": "",
    "text": "Name\nSeongtaek Jo\n\n\nBirth\n1999.01.15\n\n\nPhone\n+82 10-9823-3115\n\n\nEmail\ntjdxor3115@naver.com\n\n\ncertificate\nADsP (데이터분석 준전문가)\n\n\nstarted from the Gwangju"
  },
  {
    "objectID": "work.html",
    "href": "work.html",
    "title": "Work",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nData_Mining_Kaggle\n\n\n\n\n\n\n\ncode\n\n\ndata_mining\n\n\njupyter\n\n\nkaggle\n\n\n\n\n\n\n\n\n\n\n\nMay 2, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Mining_Kaggle\n\n\n\n\n\n\n\ncode\n\n\ndata_mining\n\n\njupyter\n\n\nkaggle\n\n\n\n\n\n\n\n\n\n\n\nMay 2, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Mining_Kaggle\n\n\n\n\n\n\n\ncode\n\n\ndata_mining\n\n\njupyter\n\n\nkaggle\n\n\n\n\n\n\n\n\n\n\n\nMay 2, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Mining_Kaggle\n\n\n\n\n\n\n\ncode\n\n\ndata_mining\n\n\njupyter\n\n\nkaggle\n\n\n\n\n\n\n\n\n\n\n\nMay 2, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Mining_Kaggle\n\n\n\n\n\n\n\ncode\n\n\ndata_mining\n\n\njupyter\n\n\nkaggle\n\n\n\n\n\n\n\n\n\n\n\nMay 2, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Mining_Penguin\n\n\n\n\n\n\n\ncode\n\n\ndata_mining\n\n\njupyter\n\n\n\n\n\n\n\n\n\n\n\nApr 27, 2023\n\n\nSeongtaek\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html",
    "href": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html",
    "title": "Data_Mining_Penguin",
    "section": "",
    "text": "Penguin Data"
  },
  {
    "objectID": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#load-data",
    "href": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#load-data",
    "title": "Data_Mining_Penguin",
    "section": "1 Load data",
    "text": "1 Load data\n\n예제로 사용할 펭귄 데이터를 불러옵니다.\nseaborn에 내장되어 있습니다.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\npenguins = sns.load_dataset(\"penguins\")\npenguins.head()\n\n\n\n\n\n\n\n\n\nspecies\n\n\nisland\n\n\nbill_length_mm\n\n\nbill_depth_mm\n\n\nflipper_length_mm\n\n\nbody_mass_g\n\n\nsex\n\n\n\n\n\n\n0\n\n\nAdelie\n\n\nTorgersen\n\n\n39.1\n\n\n18.7\n\n\n181.0\n\n\n3750.0\n\n\nMale\n\n\n\n\n1\n\n\nAdelie\n\n\nTorgersen\n\n\n39.5\n\n\n17.4\n\n\n186.0\n\n\n3800.0\n\n\nFemale\n\n\n\n\n2\n\n\nAdelie\n\n\nTorgersen\n\n\n40.3\n\n\n18.0\n\n\n195.0\n\n\n3250.0\n\n\nFemale\n\n\n\n\n3\n\n\nAdelie\n\n\nTorgersen\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n\n\n4\n\n\nAdelie\n\n\nTorgersen\n\n\n36.7\n\n\n19.3\n\n\n193.0\n\n\n3450.0\n\n\nFemale"
  },
  {
    "objectID": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#figure-and-axes",
    "href": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#figure-and-axes",
    "title": "Data_Mining_Penguin",
    "section": "2 Figure and Axes",
    "text": "2 Figure and Axes\n\nmatplotlib으로 도화지figure를 깔고 축공간axes를 만듭니다.\n1 x 2 축공간을 구성합니다.\n\n### 도화지 생성\nfig, axes = plt.subplots(ncols=2, figsize=(8,4))\n\nfig.tight_layout()\n\n\n\npng"
  },
  {
    "objectID": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#plot-with-matplotlib",
    "href": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#plot-with-matplotlib",
    "title": "Data_Mining_Penguin",
    "section": "3 plot with matplotlib",
    "text": "3 plot with matplotlib\n\nmatplotlib 기능을 이용해서 산점도를 그립니다.\n\nx축은 부리 길이 bill length\ny축은 부리 위 아래 두께 bill depth\n색상은 종species로 합니다.\nAdelie, Chinstrap, Gentoo이 있습니다.\n\n두 축공간 중 왼쪽에만 그립니다.\n컬러를 다르게 주기 위해 f-string 포맷을 사용했습니다. f-string 포맷에 대한 설명은 https://blockdmask.tistory.com/429를 참고하세요\n\n### 도화지 생성\nfig, axes = plt.subplots(ncols=2,figsize=(8,4))\n\n### 모든 펭귄 종류\nspecies_u = penguins[\"species\"].unique()\n\n### 첫 번째 subplot 그리기\nfor i, s in enumerate(species_u):\n    axes[0].scatter(penguins[\"bill_length_mm\"].loc[penguins[\"species\"]==s],\n                    penguins[\"bill_depth_mm\"].loc[penguins[\"species\"]==s],\n                    c=f\"C{i}\", label=s, alpha=0.3)\n\n### 범례 추가\naxes[0].legend(species_u, title=\"species\", fontsize=8)\n\n### x,y 레이블 지정\naxes[0].set_xlabel(\"Bill Length (mm)\")\naxes[0].set_ylabel(\"Bill Depth (mm)\")\n\n### plt.show()\nfig.tight_layout()\n\n\n\npng\n\n\n\n조금 더 간단히 그리는 방법\n\nmatplotlib는 기본적으로 Categorical 변수를 color로 바로 사용하지 못함\n\n\n### 펭귄 종류를 고유의 숫자코드로 변환\npenguins[\"species_codes\"] = pd.Categorical(penguins[\"species\"]).codes\n\n### 도화지 생성\nfig, axes = plt.subplots(ncols=2,figsize=(8,4))\n\n### 첫 번재 subplot 그리기 \na = axes[0].scatter(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", c=\"species_codes\", alpha=0.3) # 크기:s\na\n\n### 범례 추가\naxes[0].legend(*a.legend_elements(), title=\"Species\", fontsize=8) # 범례위치 : loc='lower right', 'upper center', etc..\n\n### x,y 레이블 지정\naxes[0].set_xlabel(\"Bill Length (mm)\")\naxes[0].set_ylabel(\"Bill Depth (mm)\")\n<__array_function__ internals>:180: UserWarning: Warning: converting a masked element to nan.\nC:\\Users\\seong taek\\anaconda3\\lib\\site-packages\\matplotlib\\colors.py:1311: UserWarning: Warning: converting a masked element to nan.\n  data = np.asarray(value)\nC:\\Users\\seong taek\\anaconda3\\lib\\site-packages\\matplotlib\\ticker.py:521: UserWarning: Warning: converting a masked element to nan.\n  if self._useLocale else fmt % arg)\n\n\n\n\n\nText(0, 0.5, 'Bill Depth (mm)')\n\n\n\npng"
  },
  {
    "objectID": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#plot-with-seaborn",
    "href": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#plot-with-seaborn",
    "title": "Data_Mining_Penguin",
    "section": "4 Plot with seaborn",
    "text": "4 Plot with seaborn\n\n두 번째 plot 그리기\n\n### 도화지 생성\nfig, axes = plt.subplots(ncols=2,figsize=(8,4))\n\n### 모든 펭귄 종류\nspecies_u = penguins[\"species\"].unique()\n\n### 첫 번째 subplot 그리기\nfor i, s in enumerate(species_u):\n    axes[0].scatter(penguins[\"bill_length_mm\"].loc[penguins[\"species\"]==s],\n                    penguins[\"bill_depth_mm\"].loc[penguins[\"species\"]==s],\n                    c=f\"C{i}\", label=s, alpha=0.3)\n\n### 범례 추가    \naxes[0].legend(species_u, title=\"species\")\n\n### x,y 레이블 지정\naxes[0].set_xlabel(\"Bill Length (mm)\")\naxes[0].set_ylabel(\"Bill Depth (mm)\")\n\n\n### 두 번째 subplot 그리기\nsns.scatterplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"species\", data=penguins, alpha=0.3, ax=axes[1])\naxes[1].set_xlabel(\"Bill Length (mm)\")\naxes[1].set_ylabel(\"Bill Depth (mm)\")\n\nfig.tight_layout()\n\n\n\npng\n\n\n\n단 세 줄로 거의 동일한 그림이 나왔습니다.\n\nscatter plot의 점 크기만 살짝 작습니다.\nlabel의 투명도만 살짝 다릅니다.\n\nseaborn 명령 scatterplot()을 그대로 사용했습니다.\nx축과 y축 label도 바꾸었습니다.\n\nax=axes[1] 인자에서 볼 수 있듯, 존재하는 axes에 그림만 얹었습니다.\nmatplotlib 틀 + seaborn 그림 이므로, matplotlib 명령이 모두 통합니다."
  },
  {
    "objectID": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#matplotlib-seaborn-seaborn-matplotlib",
    "href": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#matplotlib-seaborn-seaborn-matplotlib",
    "title": "Data_Mining_Penguin",
    "section": "5 matplotlib + seaborn & seaborn + matplotlib",
    "text": "5 matplotlib + seaborn & seaborn + matplotlib\n\nmatplotlib과 seaborn이 자유롭게 섞일 수 있습니다.\n\nmatplotlib 산점도 위에 seaborn 추세선을 얹을 수 있고,\nseaborn 산점도 위에 matplotlib 중심점을 얹을 수 있습니다.\n\n파이썬 코드는 다음과 같습니다.\n\n### 도화지 생성\nfig, axes = plt.subplots(ncols=2, figsize=(8, 4))\n\n### 모든 펭귄 종류\nspecies_u = penguins[\"species\"].unique()\n\n### 첫 번째 subplot 그리기 + 추세선\nfor i, s in enumerate(species_u):\n    axes[0].scatter(penguins[\"bill_length_mm\"].loc[penguins[\"species\"]==s],\n                   penguins[\"bill_depth_mm\"].loc[penguins[\"species\"]==s],\n                   c=f\"C{i}\", label=s, alpha=0.3\n                  )                  \n    sns.regplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", data=penguins.loc[penguins[\"species\"]==s], \n                scatter=False, ax=axes[0])\n    \naxes[0].legend(species_u, title=\"species\")\naxes[0].set_xlabel(\"Bill Length (mm)\")\naxes[0].set_ylabel(\"Bill Depth (mm)\")\n\n### 두 번째 subplot 그리기\nsns.scatterplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"species\", data=penguins, alpha=0.3, ax=axes[1])\naxes[1].set_xlabel(\"Bill Length (mm)\")\naxes[1].set_ylabel(\"Bill Depth (mm)\")\n\n\n### 중심점 marker\nfor i, s in enumerate(species_u):\n    axes[1].scatter(penguins[\"bill_length_mm\"].loc[penguins[\"species\"]==s].mean(),\n                   penguins[\"bill_depth_mm\"].loc[penguins[\"species\"]==s].mean(),\n                   c=f\"C{i}\", alpha=1, marker=\"x\", s=100\n                  )\n\nfig.tight_layout()\n\n\n\npng"
  },
  {
    "objectID": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#seaborn-seaborn-matplotlib",
    "href": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#seaborn-seaborn-matplotlib",
    "title": "Data_Mining_Penguin",
    "section": "6 seaborn + seaborn + matplotlib",
    "text": "6 seaborn + seaborn + matplotlib\n\n안 될 이유가 없습니다.\nseaborn scatterplot + seaborn kdeplot + matplotlib text입니다\n\n### 도화지 생성\nfig, ax = plt.subplots(figsize=(6,5))\n\n### plot 0: scatter plot\nsns.scatterplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", color=\"k\", data=penguins, alpha=0.3, ax=ax, legend=False)\n\n### plot 1: kde plot (밀도 그래프)\nsns.kdeplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"species\", data=penguins, alpha=0.5, ax=ax, legend=False)\n\n### text:\nspecies_u = penguins[\"species\"].unique()\nfor i, s in enumerate(species_u):\n    ax.text(penguins[\"bill_length_mm\"].loc[penguins[\"species\"]==s].mean(),\n            penguins[\"bill_depth_mm\"].loc[penguins[\"species\"]==s].mean(),\n            s = s, fontdict={\"fontsize\":14, \"fontweight\":\"bold\",\"color\":\"k\"}\n            )\n\nax.set_xlabel(\"Bill Length (mm)\")\nax.set_ylabel(\"Bill Depth (mm)\")\n\nfig.tight_layout()\n\n\n\npng"
  },
  {
    "objectID": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#quiz",
    "href": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#quiz",
    "title": "Data_Mining_Penguin",
    "section": "7 Quiz",
    "text": "7 Quiz\nBill length를 10단위로 나눈 후, Bill length에 따른 Bill depth의 boxplot을 그리시오\n### bill length를 10단위로 만든 후, 새로운 컬럼 추가\npenguins['bill_length_10'] = (penguins['bill_length_mm'] // 10) * 10\npenguins\n\n\n\n\n\n\n\n\n\nspecies\n\n\nisland\n\n\nbill_length_mm\n\n\nbill_depth_mm\n\n\nflipper_length_mm\n\n\nbody_mass_g\n\n\nsex\n\n\nspecies_codes\n\n\nbill_length_10\n\n\n\n\n\n\n0\n\n\nAdelie\n\n\nTorgersen\n\n\n39.1\n\n\n18.7\n\n\n181.0\n\n\n3750.0\n\n\nMale\n\n\n0\n\n\n30.0\n\n\n\n\n1\n\n\nAdelie\n\n\nTorgersen\n\n\n39.5\n\n\n17.4\n\n\n186.0\n\n\n3800.0\n\n\nFemale\n\n\n0\n\n\n30.0\n\n\n\n\n2\n\n\nAdelie\n\n\nTorgersen\n\n\n40.3\n\n\n18.0\n\n\n195.0\n\n\n3250.0\n\n\nFemale\n\n\n0\n\n\n40.0\n\n\n\n\n3\n\n\nAdelie\n\n\nTorgersen\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n0\n\n\nNaN\n\n\n\n\n4\n\n\nAdelie\n\n\nTorgersen\n\n\n36.7\n\n\n19.3\n\n\n193.0\n\n\n3450.0\n\n\nFemale\n\n\n0\n\n\n30.0\n\n\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n\n\n339\n\n\nGentoo\n\n\nBiscoe\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n2\n\n\nNaN\n\n\n\n\n340\n\n\nGentoo\n\n\nBiscoe\n\n\n46.8\n\n\n14.3\n\n\n215.0\n\n\n4850.0\n\n\nFemale\n\n\n2\n\n\n40.0\n\n\n\n\n341\n\n\nGentoo\n\n\nBiscoe\n\n\n50.4\n\n\n15.7\n\n\n222.0\n\n\n5750.0\n\n\nMale\n\n\n2\n\n\n50.0\n\n\n\n\n342\n\n\nGentoo\n\n\nBiscoe\n\n\n45.2\n\n\n14.8\n\n\n212.0\n\n\n5200.0\n\n\nFemale\n\n\n2\n\n\n40.0\n\n\n\n\n343\n\n\nGentoo\n\n\nBiscoe\n\n\n49.9\n\n\n16.1\n\n\n213.0\n\n\n5400.0\n\n\nMale\n\n\n2\n\n\n40.0\n\n\n\n\n\n\n344 rows × 9 columns\n\n\n### 박스 plot\nsns.boxenplot(x = 'bill_length_10', y = 'bill_depth_mm', data=penguins)\n\n### 점 표현\nsns.stripplot(x = 'bill_length_10', y = 'bill_depth_mm', data=penguins, color='black', size=4)\n\nsns.set_style('whitegrid')\nplt.show()\n\n\n\npng\n\n\n\n7.1 sns.set_style\n\ndarkgrid: 어두운 배경에 격자 라인이 그려지는 스타일\nwhitegrid: 밝은 배경에 격자 라인이 그려지는 스타일\ndark: 어두운 배경에 격자 라인이 없는 스타일\nwhite: 밝은 배경에 격자 라인이 없는 스타일\nticks: 격자 라인 대신 축의 눈금 표시가 있는 스타일\n\n\n\n7.2 pd.cut 이용\n### bill length를 구간별로 만든 후, 새로운 컬럼 추가\npenguins['bill_length_group'] = pd.cut(penguins['bill_length_mm'],\n                                      bins=[0,40,50,60],\n                                      labels=['0~40', '40~50', '50~60'])\npenguins\n\n\n\n\n\n\n\n\n\nspecies\n\n\nisland\n\n\nbill_length_mm\n\n\nbill_depth_mm\n\n\nflipper_length_mm\n\n\nbody_mass_g\n\n\nsex\n\n\nspecies_codes\n\n\nbill_length_10\n\n\nbill_length_group\n\n\n\n\n\n\n0\n\n\nAdelie\n\n\nTorgersen\n\n\n39.1\n\n\n18.7\n\n\n181.0\n\n\n3750.0\n\n\nMale\n\n\n0\n\n\n30.0\n\n\n0~40\n\n\n\n\n1\n\n\nAdelie\n\n\nTorgersen\n\n\n39.5\n\n\n17.4\n\n\n186.0\n\n\n3800.0\n\n\nFemale\n\n\n0\n\n\n30.0\n\n\n0~40\n\n\n\n\n2\n\n\nAdelie\n\n\nTorgersen\n\n\n40.3\n\n\n18.0\n\n\n195.0\n\n\n3250.0\n\n\nFemale\n\n\n0\n\n\n40.0\n\n\n40~50\n\n\n\n\n3\n\n\nAdelie\n\n\nTorgersen\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n0\n\n\nNaN\n\n\nNaN\n\n\n\n\n4\n\n\nAdelie\n\n\nTorgersen\n\n\n36.7\n\n\n19.3\n\n\n193.0\n\n\n3450.0\n\n\nFemale\n\n\n0\n\n\n30.0\n\n\n0~40\n\n\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n\n\n339\n\n\nGentoo\n\n\nBiscoe\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n2\n\n\nNaN\n\n\nNaN\n\n\n\n\n340\n\n\nGentoo\n\n\nBiscoe\n\n\n46.8\n\n\n14.3\n\n\n215.0\n\n\n4850.0\n\n\nFemale\n\n\n2\n\n\n40.0\n\n\n40~50\n\n\n\n\n341\n\n\nGentoo\n\n\nBiscoe\n\n\n50.4\n\n\n15.7\n\n\n222.0\n\n\n5750.0\n\n\nMale\n\n\n2\n\n\n50.0\n\n\n50~60\n\n\n\n\n342\n\n\nGentoo\n\n\nBiscoe\n\n\n45.2\n\n\n14.8\n\n\n212.0\n\n\n5200.0\n\n\nFemale\n\n\n2\n\n\n40.0\n\n\n40~50\n\n\n\n\n343\n\n\nGentoo\n\n\nBiscoe\n\n\n49.9\n\n\n16.1\n\n\n213.0\n\n\n5400.0\n\n\nMale\n\n\n2\n\n\n40.0\n\n\n40~50\n\n\n\n\n\n\n344 rows × 10 columns\n\n\nsns.boxenplot(x = 'bill_length_group', y = 'bill_depth_mm', data=penguins)\nsns.stripplot(x = 'bill_length_group', y = 'bill_depth_mm', data=penguins, color='black', size=4)\n\nsns.set_style('whitegrid')\nsns.despine()\nplt.show()\n\n\n\npng\n\n\nsns.scatterplot(x='bill_length_mm', y='bill_depth_mm', data=penguins, alpha=0.3)\n\nplt.show()\n\n\n\npng\n\n\n\n열 기준 : species\n색상 : species별\n한 행의 subplot 개수\nmap : x축, y축 지정\nsns.despine : 상단, 우측 축 제거\n\ng = sns.FacetGrid(penguins, col='species',hue='species',col_wrap=3)\ng.map(sns.scatterplot, 'bill_length_mm', 'bill_depth_mm')\n\nsns.set_style('whitegrid')\nsns.despine()\n\nplt.show()\n\n\n\npng"
  },
  {
    "objectID": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#section",
    "href": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#section",
    "title": "Data_Mining_Penguin",
    "section": "8 ",
    "text": "8"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html",
    "href": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html",
    "title": "Data_Mining_Kaggle",
    "section": "",
    "text": "Exercise 1 - Your First Map"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#introduction",
    "href": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#introduction",
    "title": "Data_Mining_Kaggle",
    "section": "1 Introduction",
    "text": "1 Introduction\nKiva.org is an online crowdfunding platform extending financial services to poor people around the world. Kiva lenders have provided over $1 billion dollars in loans to over 2 million people.\n\n\n\nKiva reaches some of the most remote places in the world through their global network of “Field Partners”. These partners are local organizations working in communities to vet borrowers, provide services, and administer loans.\nIn this exercise, you’ll investigate Kiva loans in the Philippines. Can you identify regions that might be outside of Kiva’s current network, in order to identify opportunities for recruiting new Field Partners?\nTo get started, run the code cell below to set up our feedback system.\nThis notebook is an exercise in the Geospatial Analysis course. You can reference the tutorial at this link.\n\nimport geopandas as gpd\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#get-the-data",
    "href": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#get-the-data",
    "title": "Data_Mining_Kaggle",
    "section": "2 Get the data",
    "text": "2 Get the data\n\n다음 셀을 사용하여 loans_filepath에 있는 모양 파일을 로드하여 GeoDataFrame world_loans를 만듭니다.\n\nloans_filepath = \"C:/Users\\seong taek/Desktop/archive/kiva_loans/kiva_loans/kiva_loans.shp\"\n\n### Your code here: Load the data\nworld_loans = gpd.read_file(loans_filepath)\n\n### Uncomment to view the first five rows of the data\nworld_loans.head()\n\n\n\n\n\n\n\n\n\nPartner ID\n\n\nField Part\n\n\nsector\n\n\nLoan Theme\n\n\ncountry\n\n\namount\n\n\ngeometry\n\n\n\n\n\n\n0\n\n\n9\n\n\nKREDIT Microfinance Institution\n\n\nGeneral Financial Inclusion\n\n\nHigher Education\n\n\nCambodia\n\n\n450\n\n\nPOINT (102.89751 13.66726)\n\n\n\n\n1\n\n\n9\n\n\nKREDIT Microfinance Institution\n\n\nGeneral Financial Inclusion\n\n\nVulnerable Populations\n\n\nCambodia\n\n\n20275\n\n\nPOINT (102.98962 13.02870)\n\n\n\n\n2\n\n\n9\n\n\nKREDIT Microfinance Institution\n\n\nGeneral Financial Inclusion\n\n\nHigher Education\n\n\nCambodia\n\n\n9150\n\n\nPOINT (102.98962 13.02870)\n\n\n\n\n3\n\n\n9\n\n\nKREDIT Microfinance Institution\n\n\nGeneral Financial Inclusion\n\n\nVulnerable Populations\n\n\nCambodia\n\n\n604950\n\n\nPOINT (105.31312 12.09829)\n\n\n\n\n4\n\n\n9\n\n\nKREDIT Microfinance Institution\n\n\nGeneral Financial Inclusion\n\n\nSanitation\n\n\nCambodia\n\n\n275\n\n\nPOINT (105.31312 12.09829)\n\n\n\n\n\n\n\n2.1 world_loans 데이터셋 시각화\nworld_loans.plot()\n<Axes: >\n\n\n\npng"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#plot-the-data.",
    "href": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#plot-the-data.",
    "title": "Data_Mining_Kaggle",
    "section": "3 Plot the data.",
    "text": "3 Plot the data.\n\n변경하지 않고 다음 코드 셀을 실행하여 국가 경계가 포함된 GeoDataFrame 월드를 로드합니다\n\n### This dataset is provided in GeoPandas\nworld_filepath = gpd.datasets.get_path('naturalearth_lowres')\nworld = gpd.read_file(world_filepath)\nworld.head()\n\n\n\n\n\n\n\n\n\npop_est\n\n\ncontinent\n\n\nname\n\n\niso_a3\n\n\ngdp_md_est\n\n\ngeometry\n\n\n\n\n\n\n0\n\n\n889953.0\n\n\nOceania\n\n\nFiji\n\n\nFJI\n\n\n5496\n\n\nMULTIPOLYGON (((180.00000 -16.06713, 180.00000…\n\n\n\n\n1\n\n\n58005463.0\n\n\nAfrica\n\n\nTanzania\n\n\nTZA\n\n\n63177\n\n\nPOLYGON ((33.90371 -0.95000, 34.07262 -1.05982…\n\n\n\n\n2\n\n\n603253.0\n\n\nAfrica\n\n\nW. Sahara\n\n\nESH\n\n\n907\n\n\nPOLYGON ((-8.66559 27.65643, -8.66512 27.58948…\n\n\n\n\n3\n\n\n37589262.0\n\n\nNorth America\n\n\nCanada\n\n\nCAN\n\n\n1736425\n\n\nMULTIPOLYGON (((-122.84000 49.00000, -122.9742…\n\n\n\n\n4\n\n\n328239523.0\n\n\nNorth America\n\n\nUnited States of America\n\n\nUSA\n\n\n21433226\n\n\nMULTIPOLYGON (((-122.84000 49.00000, -120.0000…\n\n\n\n\n\n\n\n3.1 world 데이터셋 시각화\nworld.plot()\n<Axes: >\n\n\n\npng\n\n\n\n\n3.2 World and World_loans GeoDataFrames를 사용하여 전 세계 Kiva 대출 위치 시각화하기\n### Your code here\nworld_data = world.plot()\nworld_loans.plot(ax=world_data, color='red', markersize=0.1)\n<Axes: >\n\n\n\npng"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#select-loans-based-in-the-philippines.",
    "href": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#select-loans-based-in-the-philippines.",
    "title": "Data_Mining_Kaggle",
    "section": "4 Select loans based in the Philippines.",
    "text": "4 Select loans based in the Philippines.\n\n다음으로, 당신은 필리핀에 기반을 둔 대출에 초점을 맞출 것입니다. 다음 코드 셀을 사용하여 필리핀에 기반을 둔 대출이 있는 world_loans의 모든 행을 포함하는 GeoDataFrame PHL_loans를 생성합니다\n\n# Your code here\nPHL_loans = world_loans.loc[world_loans['country'] =='Philippines']\nPHL_loans.head()\n\n\n\n\n\n\n\n\n\nPartner ID\n\n\nField Part\n\n\nsector\n\n\nLoan Theme\n\n\ncountry\n\n\namount\n\n\ngeometry\n\n\n\n\n\n\n2859\n\n\n123\n\n\nAlalay sa Kaunlaran (ASKI)\n\n\nGeneral Financial Inclusion\n\n\nGeneral\n\n\nPhilippines\n\n\n400\n\n\nPOINT (121.73961 17.64228)\n\n\n\n\n2860\n\n\n123\n\n\nAlalay sa Kaunlaran (ASKI)\n\n\nGeneral Financial Inclusion\n\n\nGeneral\n\n\nPhilippines\n\n\n400\n\n\nPOINT (121.74169 17.63235)\n\n\n\n\n2861\n\n\n123\n\n\nAlalay sa Kaunlaran (ASKI)\n\n\nGeneral Financial Inclusion\n\n\nGeneral\n\n\nPhilippines\n\n\n400\n\n\nPOINT (121.46667 16.60000)\n\n\n\n\n2862\n\n\n123\n\n\nAlalay sa Kaunlaran (ASKI)\n\n\nGeneral Financial Inclusion\n\n\nGeneral\n\n\nPhilippines\n\n\n6050\n\n\nPOINT (121.73333 17.83333)\n\n\n\n\n2863\n\n\n123\n\n\nAlalay sa Kaunlaran (ASKI)\n\n\nGeneral Financial Inclusion\n\n\nGeneral\n\n\nPhilippines\n\n\n625\n\n\nPOINT (121.51800 16.72368)"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#understand-loans-in-the-philippines.",
    "href": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#understand-loans-in-the-philippines.",
    "title": "Data_Mining_Kaggle",
    "section": "5 Understand loans in the Philippines.",
    "text": "5 Understand loans in the Philippines.\n\n변경 없이 다음 코드 셀을 실행하여 필리핀의 모든 섬에 대한 경계가 포함된 GeoDataFrame “PHL”을 로드합니다\n\n# Load a KML file containing island boundaries\ngpd.io.file.fiona.drvsupport.supported_drivers['KML'] = 'rw'\nPHL = gpd.read_file(\"C:/Users\\seong taek/Desktop/archive/Philippines_AL258.kml\", driver='KML')\nPHL.head()\n\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\ngeometry\n\n\n\n\n\n\n0\n\n\nAutonomous Region in Muslim Mindanao\n\n\n\n\nMULTIPOLYGON (((119.46690 4.58718, 119.46653 4…\n\n\n\n\n1\n\n\nBicol Region\n\n\n\n\nMULTIPOLYGON (((124.04577 11.57862, 124.04594 …\n\n\n\n\n2\n\n\nCagayan Valley\n\n\n\n\nMULTIPOLYGON (((122.51581 17.04436, 122.51568 …\n\n\n\n\n3\n\n\nCalabarzon\n\n\n\n\nMULTIPOLYGON (((120.49202 14.05403, 120.49201 …\n\n\n\n\n4\n\n\nCaraga\n\n\n\n\nMULTIPOLYGON (((126.45401 8.24400, 126.45407 8…\n\n\n\n\n\n\n\n5.1 PHL’ 및 ‘PHL_loans’ GeoDataFrames를 사용하여 필리핀의 대출을 시각화할 수 있습니다.\n# Your code here\nPHL = PHL.plot()\nPHL_loans.plot(ax=PHL, color='red', markersize=0.2)\n<Axes: >\n\n\n\npng\n\n\n새로운 Field Partners를 모집하는 데 유용한 섬을 찾을 수 있습니까? 현재 키바의 손이 닿지 않는 곳에 보이는 섬이 있습니까?\nthis map 은 질문에 대답하는 데 유용할 수 있습니다."
  },
  {
    "objectID": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#keep-going",
    "href": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#keep-going",
    "title": "Data_Mining_Kaggle",
    "section": "6 Keep going",
    "text": "6 Keep going\nContinue to learn about coordinate reference systems.\n\nHave questions or comments? Visit the course discussion forum to chat with other learners."
  },
  {
    "objectID": "posts_work/Data_Mining_exercise2/exercise2-coordinate-reference-systems.html",
    "href": "posts_work/Data_Mining_exercise2/exercise2-coordinate-reference-systems.html",
    "title": "Data_Mining_Kaggle",
    "section": "",
    "text": "Exercise 2 - Coordinate Reference Systems\nThis notebook is an exercise in the Geospatial Analysis course. You can reference the tutorial at this link."
  },
  {
    "objectID": "posts_work/Data_Mining_exercise2/exercise2-coordinate-reference-systems.html#introduction",
    "href": "posts_work/Data_Mining_exercise2/exercise2-coordinate-reference-systems.html#introduction",
    "title": "Data_Mining_Kaggle",
    "section": "1 Introduction",
    "text": "1 Introduction\nYou are a bird conservation expert and want to understand migration patterns of purple martins. In your research, you discover that these birds typically spend the summer breeding season in the eastern United States, and then migrate to South America for the winter. But since this bird is under threat of endangerment, you’d like to take a closer look at the locations that these birds are more likely to visit.\n\n\n\nThere are several protected areas in South America, which operate under special regulations to ensure that species that migrate (or live) there have the best opportunity to thrive. You’d like to know if purple martins tend to visit these areas. To answer this question, you’ll use some recently collected data that tracks the year-round location of eleven different birds.\nBefore you get started, run the code cell below to set everything up.\nimport pandas as pd\nimport geopandas as gpd\nfrom shapely.geometry import LineString\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise2/exercise2-coordinate-reference-systems.html#exercises",
    "href": "posts_work/Data_Mining_exercise2/exercise2-coordinate-reference-systems.html#exercises",
    "title": "Data_Mining_Kaggle",
    "section": "2 Exercises",
    "text": "2 Exercises\n\n2.1 Load the data.\n다음 코드 셀을 (변경 없이) 실행하여 GPS 데이터를 Panda DataFrame birds_df에 로드합니다.\n# Load the data and print the first 5 rows\nbirds_df = pd.read_csv(\"C:/Users\\seong taek/Desktop/archive/purple_martin.csv\", parse_dates=['timestamp']) #  날짜/시간 객체로 읽기\nprint(\"There are {} different birds in the dataset.\".format(birds_df[\"tag-local-identifier\"].nunique()))\n\nbirds_df.head()\nThere are 11 different birds in the dataset.\n\n\n\n\n\n\n\n\n\ntimestamp\n\n\nlocation-long\n\n\nlocation-lat\n\n\ntag-local-identifier\n\n\n\n\n\n\n0\n\n\n2014-08-15 05:56:00\n\n\n-88.146014\n\n\n17.513049\n\n\n30448\n\n\n\n\n1\n\n\n2014-09-01 05:59:00\n\n\n-85.243501\n\n\n13.095782\n\n\n30448\n\n\n\n\n2\n\n\n2014-10-30 23:58:00\n\n\n-62.906089\n\n\n-7.852436\n\n\n30448\n\n\n\n\n3\n\n\n2014-11-15 04:59:00\n\n\n-61.776826\n\n\n-11.723898\n\n\n30448\n\n\n\n\n4\n\n\n2014-11-30 09:59:00\n\n\n-61.241538\n\n\n-11.612237\n\n\n30448\n\n\n\n\n\n\n데이터 세트에는 11마리의 새가 있으며, 각 새는 “태그-로컬-식별자” 열에서 고유한 값으로 식별됩니다. 각각의 새들은 일년 중 다른 시기에 수집된 여러 개의 측정치를 가지고 있습니다.\n다음 코드 셀을 사용하여 GeoDataFrame 새를 만듭니다.\n- birds는 birds_df의 모든 열과 (경도, 위도) 위치를 가진 Point 객체를 포함하는 “기하학” 열을 가져야 합니다 - 새의 CRS를 {init}: ‘epsg:4326’}(으)로 설정합니다..\n# Your code here: Create the GeoDataFrame\ngeometry = [Point(xy) for xy in zip(birds_df[\"location-long\"], birds_df[\"location-lat\"])]\nbirds = gpd.GeoDataFrame(birds_df, crs=\"EPSG:4326\", geometry=geometry)\n\n# Your code here: Set the CRS to {'init': 'epsg:4326'}\nbirds.crs = {'init': 'epsg:4326'}\nC:\\Users\\seong taek\\anaconda3\\lib\\site-packages\\pyproj\\crs\\crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n  in_crs_string = _prepare_from_proj_string(in_crs_string)\nbirds.head()\n\n\n\n\n\n\n\n\n\ntimestamp\n\n\nlocation-long\n\n\nlocation-lat\n\n\ntag-local-identifier\n\n\ngeometry\n\n\n\n\n\n\n0\n\n\n2014-08-15 05:56:00\n\n\n-88.146014\n\n\n17.513049\n\n\n30448\n\n\nPOINT (-88.14601 17.51305)\n\n\n\n\n1\n\n\n2014-09-01 05:59:00\n\n\n-85.243501\n\n\n13.095782\n\n\n30448\n\n\nPOINT (-85.24350 13.09578)\n\n\n\n\n2\n\n\n2014-10-30 23:58:00\n\n\n-62.906089\n\n\n-7.852436\n\n\n30448\n\n\nPOINT (-62.90609 -7.85244)\n\n\n\n\n3\n\n\n2014-11-15 04:59:00\n\n\n-61.776826\n\n\n-11.723898\n\n\n30448\n\n\nPOINT (-61.77683 -11.72390)\n\n\n\n\n4\n\n\n2014-11-30 09:59:00\n\n\n-61.241538\n\n\n-11.612237\n\n\n30448\n\n\nPOINT (-61.24154 -11.61224)\n\n\n\n\n\n\n\n\n2.2 Plot the data.\n다음으로 GeoPandas의 ‘naturalearth_lowres’ 데이터 세트를 로드하고 미주(북남미 모두)의 모든 국가 경계를 포함하는 GeoDataFrame으로 미주를 설정합니다. 변경하지 않고 다음 코드 셀을 실행합니다.\n# Load a GeoDataFrame with country boundaries in North/South America, print the first 5 rows\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\namericas = world.loc[world['continent'].isin(['North America', 'South America'])]\namericas.head()\n\n\n\n\n\n\n\n\n\npop_est\n\n\ncontinent\n\n\nname\n\n\niso_a3\n\n\ngdp_md_est\n\n\ngeometry\n\n\n\n\n\n\n3\n\n\n37589262.0\n\n\nNorth America\n\n\nCanada\n\n\nCAN\n\n\n1736425\n\n\nMULTIPOLYGON (((-122.84000 49.00000, -122.9742…\n\n\n\n\n4\n\n\n328239523.0\n\n\nNorth America\n\n\nUnited States of America\n\n\nUSA\n\n\n21433226\n\n\nMULTIPOLYGON (((-122.84000 49.00000, -120.0000…\n\n\n\n\n9\n\n\n44938712.0\n\n\nSouth America\n\n\nArgentina\n\n\nARG\n\n\n445445\n\n\nMULTIPOLYGON (((-68.63401 -52.63637, -68.25000…\n\n\n\n\n10\n\n\n18952038.0\n\n\nSouth America\n\n\nChile\n\n\nCHL\n\n\n282318\n\n\nMULTIPOLYGON (((-68.63401 -52.63637, -68.63335…\n\n\n\n\n16\n\n\n11263077.0\n\n\nNorth America\n\n\nHaiti\n\n\nHTI\n\n\n14332\n\n\nPOLYGON ((-71.71236 19.71446, -71.62487 19.169…\n\n\n\n\n\n\n\n다음 코드 셀을 사용하여 (1) Americas GeoDataFrame의 국가 경계와 (2) birds_gdf GeoDataFrame의 모든 점을 모두 표시하는 단일 플롯을 만듭니다.\n여기서는 특별한 스타일에 대해 걱정하지 말고 모든 데이터가 올바르게 로드되었는지 신속하게 확인하기 위해 예비 플롯을 작성하면 됩니다. 특히 새를 구별하기 위해 포인트를 컬러 코딩하는 것에 대해 걱정할 필요가 없으며, 시작 포인트와 끝점을 구분할 필요가 없습니다. 우리는 연습의 다음 부분에서 그것을 할 것입니다.\n\n### Your code here\n\n# figure 객체와 axis 객체를 생성합니다.\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# americas GeoDataFrame의 경계를 표시합니다.\namericas.plot(ax=ax, color='white', edgecolor='black')\n\n# birds GeoDataFrame의 점을 표시합니다.\nbirds.plot(ax=ax, markersize=10, color='red')\n\n# 그래프를 출력합니다.\nplt.show()\n\n\n\npng\n\n\n\n\n2.3 Where does each bird start and end its journey? (Part 1)\n이제, 우리는 각각의 새들의 경로를 더 자세히 볼 준비가 되었습니다. 다음 코드 셀을 실행하여 두 개의 GeoDataFrames를 만듭니다: - path_gdf에는 각 새의 경로를 표시하는 LineString 개체가 포함되어 있습니다. - LineString() 메서드를 사용하여 점 객체 목록에서 LineString 객체를 만듭니다. - start_gdf는 각 새의 시작점을 포함합니다.\n# GeoDataFrame showing path for each bird\npath_df = birds.groupby(\"tag-local-identifier\")['geometry'].apply(list).apply(lambda x: LineString(x)).reset_index()\npath_gdf = gpd.GeoDataFrame(path_df, geometry=path_df.geometry)\npath_gdf.crs = {'init' :'epsg:4326'}\n\n# GeoDataFrame showing starting point for each bird\nstart_df = birds.groupby(\"tag-local-identifier\")['geometry'].apply(list).apply(lambda x: x[0]).reset_index()\nstart_gdf = gpd.GeoDataFrame(start_df, geometry=start_df.geometry)\nstart_gdf.crs = {'init' :'epsg:4326'}\n\n# Show first five rows of GeoDataFrame\nstart_gdf.head()\nC:\\Users\\seong taek\\anaconda3\\lib\\site-packages\\pyproj\\crs\\crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n  in_crs_string = _prepare_from_proj_string(in_crs_string)\nC:\\Users\\seong taek\\anaconda3\\lib\\site-packages\\pyproj\\crs\\crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n  in_crs_string = _prepare_from_proj_string(in_crs_string)\n\n\n\n\n\n\n\n\n\ntag-local-identifier\n\n\ngeometry\n\n\n\n\n\n\n0\n\n\n30048\n\n\nPOINT (-90.12992 20.73242)\n\n\n\n\n1\n\n\n30054\n\n\nPOINT (-93.60861 46.50563)\n\n\n\n\n2\n\n\n30198\n\n\nPOINT (-80.31036 25.92545)\n\n\n\n\n3\n\n\n30263\n\n\nPOINT (-76.78146 42.99209)\n\n\n\n\n4\n\n\n30275\n\n\nPOINT (-76.78213 42.99207)\n\n\n\n\n\n\n다음 코드 셀을 사용하여 각 새의 최종 위치를 포함하는 GeoDataFrame end_gdf를 만듭니다.\n- 형식은 start_gdf의 형식과 동일해야 하며 두 개의 열(“태그-로컬 식별자”) 및 (“기하학”)열에 점 객체가 포함되어 있어야 합니다. - end_gdf의 CRS를 {init}: ‘epsg:4326’}(으)로 설정합니다.\n# Your code here\nend_df = birds.groupby(\"tag-local-identifier\")['geometry'].apply(list).apply(lambda x: x[-1]).reset_index()\nend_gdf = gpd.GeoDataFrame(end_df, geometry=end_df.geometry)\nend_gdf.columns = ['tag-local-identifier', 'geometry']\n\nend_gdf\n\n\n\n\n\n\n\n\n\ntag-local-identifier\n\n\ngeometry\n\n\n\n\n\n\n0\n\n\n30048\n\n\nPOINT (-47.53632 -4.43758)\n\n\n\n\n1\n\n\n30054\n\n\nPOINT (-62.47914 -5.03840)\n\n\n\n\n2\n\n\n30198\n\n\nPOINT (-57.46417 -2.77617)\n\n\n\n\n3\n\n\n30263\n\n\nPOINT (-50.19230 -5.70504)\n\n\n\n\n4\n\n\n30275\n\n\nPOINT (-57.70404 -16.72336)\n\n\n\n\n5\n\n\n30300\n\n\nPOINT (-50.22547 -9.84450)\n\n\n\n\n6\n\n\n30304\n\n\nPOINT (-52.55503 -5.85648)\n\n\n\n\n7\n\n\n30380\n\n\nPOINT (-63.98744 -2.93250)\n\n\n\n\n8\n\n\n30384\n\n\nPOINT (-51.85126 -2.90570)\n\n\n\n\n9\n\n\n30445\n\n\nPOINT (-53.97454 -2.35599)\n\n\n\n\n10\n\n\n30448\n\n\nPOINT (-59.50059 -3.91805)\n\n\n\n\n\n\n\n\n2.4 Where does each bird start and end its journey? (Part 2)\n위 질문(path_gdf, start_gdf 및 end_gdf)의 GeoDataFrames를 사용하여 모든 새의 경로를 단일 맵에 시각화합니다. 또한 미주 지역 데이터 프레임을 사용할 수도 있습니다.\n### Your code here\n\n# americas GeoDataFrame을 사용하여 미주 지역 지도를 만듭니다\nax = americas.plot(figsize=(12,8), color='white', edgecolor='black')\n\n# path_gdf, start_gdf, end_gdf GeoDataFrame을 사용하여 모든 새의 이동 경로, 출발점 및 도착점을 지도에 추가합니다\npath_gdf.plot(ax=ax, color='red', linewidth=0.5)\nstart_gdf.plot(ax=ax, color='blue', markersize=10)\nend_gdf.plot(ax=ax, color='green', markersize=10)\n\n# 제목, 범례 추가\nax.set_title(\"Migration of Purple Martins in Americas\")\nax.legend(['Bird Path', 'Starting Point', 'Ending Point'])\n\n# 출력\nplt.show()\n\n\n\npng\n\n\n\n\n2.5 Where are the protected areas in South America? (Part 1)\n\n모든 새들이 결국 남아메리카 어딘가에 도착하는 것처럼 보입니다. 하지만 그들은 보호구역으로 갈 것입니까?\n다음 코드 셀에서는 남미의 모든 보호 영역의 위치를 포함하는 GeoDataFrame protected_areas를 만듭니다. 해당 셰이프 파일은 filepath protected_filepath에 있습니다\n\n# Path of the shapefile to load\nprotected_filepath = \"C:/Users\\seong taek/Desktop/archive/SAPA_Aug2019-shapefile/SAPA_Aug2019-shapefile/SAPA_Aug2019-shapefile-polygons.shp\"\n\n# Your code here\nprotected_areas = gpd.read_file(protected_filepath)\nprotected_areas.head()\n\n\n\n\n\n\n\n\n\nWDPAID\n\n\nWDPA_PID\n\n\nPA_DEF\n\n\nNAME\n\n\nORIG_NAME\n\n\nDESIG\n\n\nDESIG_ENG\n\n\nDESIG_TYPE\n\n\nIUCN_CAT\n\n\nINT_CRIT\n\n\n…\n\n\nGOV_TYPE\n\n\nOWN_TYPE\n\n\nMANG_AUTH\n\n\nMANG_PLAN\n\n\nVERIF\n\n\nMETADATAID\n\n\nSUB_LOC\n\n\nPARENT_ISO\n\n\nISO3\n\n\ngeometry\n\n\n\n\n\n\n0\n\n\n14067.0\n\n\n14067\n\n\n1\n\n\nHet Spaans Lagoen\n\n\nHet Spaans Lagoen\n\n\nRamsar Site, Wetland of International Importance\n\n\nRamsar Site, Wetland of International Importance\n\n\nInternational\n\n\nNot Reported\n\n\nNot Reported\n\n\n…\n\n\nNot Reported\n\n\nNot Reported\n\n\nNot Reported\n\n\nManagement plan is not implemented and not ava…\n\n\nState Verified\n\n\n1856\n\n\nNot Reported\n\n\nNLD\n\n\nABW\n\n\nPOLYGON ((-69.97523 12.47379, -69.97523 12.473…\n\n\n\n\n1\n\n\n14003.0\n\n\n14003\n\n\n1\n\n\nBubali Pond Bird Sanctuary\n\n\nBubali Pond Bird Sanctuary\n\n\nBird Sanctuary\n\n\nBird Sanctuary\n\n\nNational\n\n\nNot Reported\n\n\nNot Applicable\n\n\n…\n\n\nNot Reported\n\n\nNot Reported\n\n\nNot Reported\n\n\nNot Reported\n\n\nState Verified\n\n\n1899\n\n\nNot Reported\n\n\nNLD\n\n\nABW\n\n\nPOLYGON ((-70.04734 12.56329, -70.04615 12.563…\n\n\n\n\n2\n\n\n555624439.0\n\n\n555624439\n\n\n1\n\n\nArikok National Park\n\n\nArikok National Park\n\n\nNational Park\n\n\nNational Park\n\n\nNational\n\n\nNot Reported\n\n\nNot Applicable\n\n\n…\n\n\nNon-profit organisations\n\n\nNon-profit organisations\n\n\nFundacion Parke Nacional Arikok\n\n\nNot Reported\n\n\nState Verified\n\n\n1899\n\n\nNot Reported\n\n\nNLD\n\n\nABW\n\n\nMULTIPOLYGON (((-69.96302 12.48384, -69.96295 …\n\n\n\n\n3\n\n\n303894.0\n\n\n303894\n\n\n1\n\n\nMadidi\n\n\nMadidi\n\n\nArea Natural de Manejo Integrado\n\n\nNatural Integrated Management Area\n\n\nNational\n\n\nNot Reported\n\n\nNot Applicable\n\n\n…\n\n\nFederal or national ministry or agency\n\n\nNot Reported\n\n\nNot Reported\n\n\nNot Reported\n\n\nState Verified\n\n\n1860\n\n\nBO-L\n\n\nBOL\n\n\nBOL\n\n\nPOLYGON ((-68.59060 -14.43388, -68.59062 -14.4…\n\n\n\n\n4\n\n\n303893.0\n\n\n303893\n\n\n1\n\n\nApolobamba\n\n\nApolobamba\n\n\nArea Natural de Manejo Integado Nacional\n\n\nNational Natural Integrated Management Area\n\n\nNational\n\n\nNot Reported\n\n\nNot Applicable\n\n\n…\n\n\nFederal or national ministry or agency\n\n\nNot Reported\n\n\nNot Reported\n\n\nNot Reported\n\n\nState Verified\n\n\n1860\n\n\nBO-L\n\n\nBOL\n\n\nBOL\n\n\nPOLYGON ((-69.20949 -14.73334, -69.20130 -14.7…\n\n\n\n\n\n\n5 rows × 29 columns\n\n\n\n\n2.6 Where are the protected areas in South America? (Part 2)\nprotected_areas GeoDataFrame을 사용하여 남미의 보호지역 위치를 표시하는 플롯을 만듭니다. (일부 보호지역은 육지에, 다른 보호지역은 해양에 있음을 알 수 있습니다.)\n# Country boundaries in South America\nsouth_america = americas.loc[americas['continent']=='South America']\n\n### Your code here: plot protected areas in South America\n\n# 보호지역 데이터를 지도에 그리기\nax = south_america.plot(color='white', edgecolor='black')\nprotected_areas.plot(ax=ax, alpha=0.5, color='green')\n\n# 플롯 출력하기\nplt.show()\n\n\n\npng\n\n\n\n\n2.7 What percentage of South America is protected?\n\n여러분은 남아메리카의 몇 퍼센트가 보호되고 있는지를 결정하는 데 관심이 있습니다. 그래서 여러분은 남아메리카의 어느 정도가 새들에게 적합한지를 알 수 있습니다\n첫 번째 단계로 남아메리카의 모든 보호 지역(해양 지역 제외)의 총 면적을 계산합니다. 이렇게 하려면 “REP_AREA” 및 “REP_M_AREA” 열을 사용합니다. 여기에는 각각 총 면적과 총 해양 면적이 평방 킬로미터로 포함됩니다.\n아래 코드 셀을 변경하지 않고 실행합니다.\n\nP_Area = sum(protected_areas['REP_AREA']-protected_areas['REP_M_AREA'])\nprint(\"South America has {} square kilometers of protected areas.\".format(P_Area))\nSouth America has 5396761.9116883585 square kilometers of protected areas.\n그런 다음 계산을 마치려면 south_america GeoDataFrame을 사용합니다.\nsouth_america.head()\n\n\n\n\n\n\n\n\n\npop_est\n\n\ncontinent\n\n\nname\n\n\niso_a3\n\n\ngdp_md_est\n\n\ngeometry\n\n\n\n\n\n\n9\n\n\n44938712.0\n\n\nSouth America\n\n\nArgentina\n\n\nARG\n\n\n445445\n\n\nMULTIPOLYGON (((-68.63401 -52.63637, -68.25000…\n\n\n\n\n10\n\n\n18952038.0\n\n\nSouth America\n\n\nChile\n\n\nCHL\n\n\n282318\n\n\nMULTIPOLYGON (((-68.63401 -52.63637, -68.63335…\n\n\n\n\n20\n\n\n3398.0\n\n\nSouth America\n\n\nFalkland Is.\n\n\nFLK\n\n\n282\n\n\nPOLYGON ((-61.20000 -51.85000, -60.00000 -51.2…\n\n\n\n\n28\n\n\n3461734.0\n\n\nSouth America\n\n\nUruguay\n\n\nURY\n\n\n56045\n\n\nPOLYGON ((-57.62513 -30.21629, -56.97603 -30.1…\n\n\n\n\n29\n\n\n211049527.0\n\n\nSouth America\n\n\nBrazil\n\n\nBRA\n\n\n1839758\n\n\nPOLYGON ((-53.37366 -33.76838, -53.65054 -33.2…\n\n\n\n\n\n\n다음 단계를 수행하여 남미의 총 면적을 계산합니다: - 각 폴리곤의 면적 속성(CRS로 EPSG 3035 사용)을 사용하여 각 국가의 면적을 계산하고 결과를 합산합니다. 계산된 면적은 제곱미터 단위가 될 것입니다. - 제곱킬로미터의 단위를 갖도록 답변을 변환합니다\n### Your code here: Calculate the total area of South America (in square kilometers)\n\n# CRS를 EPSG 3035로 설정합니다.\nsouth_america = south_america.to_crs(epsg=3035)\n\n# 남미의 면적을 계산합니다.\nsouth_america_area = south_america.area/10**6  # 제곱미터에서 제곱킬로미터로 변환\n\n# 결과를 합산합니다.\ntotal_area = south_america_area.sum()\n\nprint(\"남미의 총 면적은 {:.2f} 제곱킬로미터입니다.\".format(total_area))\n남미의 총 면적은 17759005.82 제곱킬로미터입니다.\n아래 코드 셀을 실행하여 보호되는 남미의 백분율을 계산합니다.\n# What percentage of South America is protected?\npercentage_protected = P_Area/total_area\nprint('Approximately {}% of South America is protected.'.format(round(percentage_protected*100, 2)))\nApproximately 30.39% of South America is protected.\n\n\n2.8 Where are the birds in South America?\n그렇다면, 그 새들은 보호 구역에 있을까요?\n모든 새들과 남아메리카에서 발견된 모든 위치를 보여주는 플롯을 만듭니다. 또한 남미의 모든 보호 지역의 위치를 표시합니다\n순수하게 해양 영역(육지 구성 요소가 없음)인 보호 영역을 제외하려면 “MARINE” 열을 사용하면 됩니다 - To exclude protected areas that are purely marine areas (with no land component), you can use the “MARINE” column (and plot only the rows in protected_areas[protected_areas[‘MARINE’]!=‘2’], instead of every row in the protected_areas GeoDataFrame).\n### Your code here\n\n# 플롯 만들기\nfig, ax = plt.subplots(figsize=(12,8))\n\n# 보호구역 (protected_areas[protected_areas['MARINE']!='2'])\nprotected_areas[protected_areas['MARINE']!='2'].plot(ax=ax, color='green', alpha=0.2)\n\n# 새 위치\nbirds.plot(ax=ax, markersize=10, color='blue', alpha=0.5)\n\n# 제목\nax.set_title(\"Bird locations and protected areas in South America\")\nax.set_xlabel(\"Longitude\")\nax.set_ylabel(\"Latitude\")\n\n# 그래프 출력\nplt.show()\n\n\n\npng"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise2/exercise2-coordinate-reference-systems.html#keep-going",
    "href": "posts_work/Data_Mining_exercise2/exercise2-coordinate-reference-systems.html#keep-going",
    "title": "Data_Mining_Kaggle",
    "section": "3 Keep going",
    "text": "3 Keep going\nCreate stunning interactive maps with your geospatial data.\n\nHave questions or comments? Visit the course discussion forum to chat with other learners."
  },
  {
    "objectID": "posts_work/Data_Mining_exercise4/exercise4-manipulating-geospatial-data.html",
    "href": "posts_work/Data_Mining_exercise4/exercise4-manipulating-geospatial-data.html",
    "title": "Data_Mining_Kaggle",
    "section": "",
    "text": "Exercise 4 - Manipulating Geospatial Data\nThis notebook is an exercise in the Geospatial Analysis course. You can reference the tutorial at this link."
  },
  {
    "objectID": "posts_work/Data_Mining_exercise4/exercise4-manipulating-geospatial-data.html#introduction",
    "href": "posts_work/Data_Mining_exercise4/exercise4-manipulating-geospatial-data.html#introduction",
    "title": "Data_Mining_Kaggle",
    "section": "1 Introduction",
    "text": "1 Introduction\nYou are a Starbucks big data analyst (that’s a real job!) looking to find the next store into a Starbucks Reserve Roastery. These roasteries are much larger than a typical Starbucks store and have several additional features, including various food and wine options, along with upscale lounge areas. You’ll investigate the demographics of various counties in the state of California, to determine potentially suitable locations.\n\n\n\nBefore you get started, run the code cell below to set everything up.\n\n당신은 스타벅스의 빅데이터 분석가입니다. (그것은 진정한 직업입니다!) 스타벅스 리저브 로스터리에서 다음 매장을 찾고 있습니다. 이 로스터리는 일반적인 스타벅스 매장보다 훨씬 크고 고급 라운지 공간과 함께 다양한 음식과 와인 옵션을 포함한 몇 가지 추가 기능을 갖추고 있습니다. 캘리포니아 주의 다양한 카운티의 인구 통계를 조사하여 잠재적으로 적합한 위치를 결정합니다.\n시작하기 전에 아래의 코드 셀을 실행하여 모든 설정을 수행합니다\n\n#!pip install geopy\nimport math\nimport pandas as pd\nimport geopandas as gpd\nfrom geopy.geocoders import Nominatim\nimport folium \nfrom folium import Marker\nfrom folium.plugins import MarkerCluster\n이전 연습의 embed_map() 함수를 사용하여 지도를 시각화합니다.\ndef embed_map(m, file_name):\n    from IPython.display import IFrame\n    m.save(file_name)\n    return IFrame(file_name, width='100%', height='500px')"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise4/exercise4-manipulating-geospatial-data.html#exercises",
    "href": "posts_work/Data_Mining_exercise4/exercise4-manipulating-geospatial-data.html#exercises",
    "title": "Data_Mining_Kaggle",
    "section": "2 Exercises",
    "text": "2 Exercises\n\n2.1 누락된 위치를 지오코드합니다\n다음 코드 셀을 실행하여 캘리포니아 주에 있는 스타벅스 위치가 포함된 데이터 프레임 스타벅스를 만듭니다.\n# Load and preview Starbucks locations in California\nstarbucks = pd.read_csv(\"C:/Users\\seong taek/Desktop/archive/starbucks_locations.csv\")\nstarbucks.head()\n\n\n\n\n\n\n\n\n\nStore Number\n\n\nStore Name\n\n\nAddress\n\n\nCity\n\n\nLongitude\n\n\nLatitude\n\n\n\n\n\n\n0\n\n\n10429-100710\n\n\nPalmdale & Hwy 395\n\n\n14136 US Hwy 395 Adelanto CA\n\n\nAdelanto\n\n\n-117.40\n\n\n34.51\n\n\n\n\n1\n\n\n635-352\n\n\nKanan & Thousand Oaks\n\n\n5827 Kanan Road Agoura CA\n\n\nAgoura\n\n\n-118.76\n\n\n34.16\n\n\n\n\n2\n\n\n74510-27669\n\n\nVons-Agoura Hills #2001\n\n\n5671 Kanan Rd. Agoura Hills CA\n\n\nAgoura Hills\n\n\n-118.76\n\n\n34.15\n\n\n\n\n3\n\n\n29839-255026\n\n\nTarget Anaheim T-0677\n\n\n8148 E SANTA ANA CANYON ROAD AHAHEIM CA\n\n\nAHAHEIM\n\n\n-117.75\n\n\n33.87\n\n\n\n\n4\n\n\n23463-230284\n\n\nSafeway - Alameda 3281\n\n\n2600 5th Street Alameda CA\n\n\nAlameda\n\n\n-122.28\n\n\n37.79\n\n\n\n\n\n\n대부분의 상점은 알려진 위치(위도, 경도)를 가지고 있습니다. 하지만, 버클리 시의 모든 장소가 사라졌습니다\n# How many rows in each column have missing values?\nprint(starbucks.isnull().sum())\n\n# View rows with missing locations\nrows_with_missing = starbucks[starbucks[\"City\"]==\"Berkeley\"]\nrows_with_missing\nStore Number    0\nStore Name      0\nAddress         0\nCity            0\nLongitude       5\nLatitude        5\ndtype: int64\n\n\n\n\n\n\n\n\n\nStore Number\n\n\nStore Name\n\n\nAddress\n\n\nCity\n\n\nLongitude\n\n\nLatitude\n\n\n\n\n\n\n153\n\n\n5406-945\n\n\n2224 Shattuck - Berkeley\n\n\n2224 Shattuck Avenue Berkeley CA\n\n\nBerkeley\n\n\nNaN\n\n\nNaN\n\n\n\n\n154\n\n\n570-512\n\n\nSolano Ave\n\n\n1799 Solano Avenue Berkeley CA\n\n\nBerkeley\n\n\nNaN\n\n\nNaN\n\n\n\n\n155\n\n\n17877-164526\n\n\nSafeway - Berkeley #691\n\n\n1444 Shattuck Place Berkeley CA\n\n\nBerkeley\n\n\nNaN\n\n\nNaN\n\n\n\n\n156\n\n\n19864-202264\n\n\nTelegraph & Ashby\n\n\n3001 Telegraph Avenue Berkeley CA\n\n\nBerkeley\n\n\nNaN\n\n\nNaN\n\n\n\n\n157\n\n\n9217-9253\n\n\n2128 Oxford St.\n\n\n2128 Oxford Street Berkeley CA\n\n\nBerkeley\n\n\nNaN\n\n\nNaN\n\n\n\n\n\n\n아래 코드 셀을 사용하여 이러한 값을 Nominatim 지오코더로 채웁니다.\n튜토리얼에서 Nominatim()(geopy.geocoders에서)을 사용하여 값을 지오코딩했으며, 이는 본 과정 이외의 프로젝트에서 사용할 수 있는 것입니다.\n이 연습에서는 (learn tools.geospatic에서) 약간 다른 함수 Nominatim()을 사용합니다.도구). 이 기능은 노트북 상단에 가져온 것으로 GeoPandas의 기능과 동일하게 작동합니다.\n즉, 다음과 같은 경우에 한합니다:\n노트북 상단에 있는 가져오기 문을 변경하지 않습니다 당신은 아래의 코드 셀에서 지오코딩 함수를 지오코딩이라고 부릅니다, 코드가 의도한 대로 작동합니다!\n# Create the geocoder\ngeolocator = Nominatim(user_agent=\"kaggle_learn\")\n\n# Your code here\ndef my_geocoder(row):\n    point = geolocator.geocode(row).point\n    return pd.Series({'Latitude': point.latitude, 'Longitude': point.longitude})\n\nberkeley_locations = rows_with_missing.apply(lambda x: my_geocoder(x['Address']), axis=1)\nstarbucks.update(berkeley_locations)\n\nstarbucks\n\n\n\n\n\n\n\n\n\nStore Number\n\n\nStore Name\n\n\nAddress\n\n\nCity\n\n\nLongitude\n\n\nLatitude\n\n\n\n\n\n\n0\n\n\n10429-100710\n\n\nPalmdale & Hwy 395\n\n\n14136 US Hwy 395 Adelanto CA\n\n\nAdelanto\n\n\n-117.40\n\n\n34.51\n\n\n\n\n1\n\n\n635-352\n\n\nKanan & Thousand Oaks\n\n\n5827 Kanan Road Agoura CA\n\n\nAgoura\n\n\n-118.76\n\n\n34.16\n\n\n\n\n2\n\n\n74510-27669\n\n\nVons-Agoura Hills #2001\n\n\n5671 Kanan Rd. Agoura Hills CA\n\n\nAgoura Hills\n\n\n-118.76\n\n\n34.15\n\n\n\n\n3\n\n\n29839-255026\n\n\nTarget Anaheim T-0677\n\n\n8148 E SANTA ANA CANYON ROAD AHAHEIM CA\n\n\nAHAHEIM\n\n\n-117.75\n\n\n33.87\n\n\n\n\n4\n\n\n23463-230284\n\n\nSafeway - Alameda 3281\n\n\n2600 5th Street Alameda CA\n\n\nAlameda\n\n\n-122.28\n\n\n37.79\n\n\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n\n\n2816\n\n\n14071-108147\n\n\nHwy 20 & Tharp - Yuba City\n\n\n1615 Colusa Hwy, Ste 100 Yuba City CA\n\n\nYuba City\n\n\n-121.64\n\n\n39.14\n\n\n\n\n2817\n\n\n9974-98559\n\n\nYucaipa & Hampton, Yucaipa\n\n\n31364 Yucaipa Blvd., A Yucaipa CA\n\n\nYucaipa\n\n\n-117.12\n\n\n34.03\n\n\n\n\n2818\n\n\n79654-108478\n\n\nVons - Yucaipa #1796\n\n\n33644 YUCAIPA BLVD YUCAIPA CA\n\n\nYUCAIPA\n\n\n-117.07\n\n\n34.04\n\n\n\n\n2819\n\n\n6438-245084\n\n\nYucaipa & 6th\n\n\n34050 Yucaipa Blvd., 200 Yucaipa CA\n\n\nYucaipa\n\n\n-117.06\n\n\n34.03\n\n\n\n\n2820\n\n\n6829-82142\n\n\nHighway 62 & Warren Vista\n\n\n57744 29 Palms Highway Yucca Valley CA\n\n\nYucca Valley\n\n\n-116.40\n\n\n34.13\n\n\n\n\n\n\n2821 rows × 6 columns\n\n\n\n\n2.2 2) Berkeley 위치를 봅니다.\n방금 찾은 위치를 살펴보겠습니다. OpenStreetMap 스타일로 Berkeley의 (위도, 경도) 위치를 시각화합니다.\n# Create a base map\nm_2 = folium.Map(location=[37.88,-122.26], zoom_start=13)\n\n# Your code here: Add a marker for each Berkeley location\nfor idx, row in starbucks[starbucks[\"City\"]=='Berkeley'].iterrows():\n    Marker([row['Latitude'], row['Longitude']]).add_to(m_2)\n\n# Show the map\nembed_map(m_2, 'q_2.html')\nm_2\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\nConsidering only the five locations in Berkeley, how many of the (latitude, longitude) locations seem potentially correct (are located in the correct city)?\n\n\n2.3 3) 데이터를 통합합니다.\n아래 코드를 실행하여 캘리포니아 주의 각 카운티에 대한 이름, 면적(제곱킬로미터) 및 고유 ID(“GEOID” 열)가 포함된 GeoDataFrame “CA_counties”를 로드합니다. 지오메트리 열에는 카운티 경계가 있는 폴리곤이 포함되어 있습니다.\nCA_counties = gpd.read_file(\"C:/Users\\seong taek/Desktop/archive/CA_county_boundaries/CA_county_boundaries/CA_county_boundaries.shp\")\nCA_counties.crs = {'init': 'epsg:4326'}\nCA_counties.head()\nC:\\Users\\seong taek\\anaconda3\\lib\\site-packages\\pyproj\\crs\\crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n  in_crs_string = _prepare_from_proj_string(in_crs_string)\n\n\n\n\n\n\n\n\n\nGEOID\n\n\nname\n\n\narea_sqkm\n\n\ngeometry\n\n\n\n\n\n\n0\n\n\n6091\n\n\nSierra County\n\n\n2491.995494\n\n\nPOLYGON ((-120.65560 39.69357, -120.65554 39.6…\n\n\n\n\n1\n\n\n6067\n\n\nSacramento County\n\n\n2575.258262\n\n\nPOLYGON ((-121.18858 38.71431, -121.18732 38.7…\n\n\n\n\n2\n\n\n6083\n\n\nSanta Barbara County\n\n\n9813.817958\n\n\nMULTIPOLYGON (((-120.58191 34.09856, -120.5822…\n\n\n\n\n3\n\n\n6009\n\n\nCalaveras County\n\n\n2685.626726\n\n\nPOLYGON ((-120.63095 38.34111, -120.63058 38.3…\n\n\n\n\n4\n\n\n6111\n\n\nVentura County\n\n\n5719.321379\n\n\nMULTIPOLYGON (((-119.63631 33.27304, -119.6360…\n\n\n\n\n\n\n다음으로 세 가지 데이터 프레임을 만듭니다:\n\nCA_pop에는 각 카운티의 인구 추정치가 포함되어 있습니다.\nCA_high_earner에는 연간 $150,000 이상의 소득을 가진 가구 수가 포함되어 있습니다.\nCA_median_age에는 각 카운티의 중위수 연령이 포함됩니다.\n\nCA_pop = pd.read_csv(\"C:/Users\\seong taek/Desktop/archive/CA_county_population.csv\", index_col=\"GEOID\")\nCA_high_earners = pd.read_csv(\"C:/Users\\seong taek/Desktop/archive/CA_county_high_earners.csv\", index_col=\"GEOID\")\nCA_median_age = pd.read_csv(\"C:/Users\\seong taek/Desktop/archive/CA_county_median_age.csv\", index_col=\"GEOID\")\n다음 코드 셀을 사용하여 CA_pop, CA_high_earners 및 CA_median_age와 함께 CA_counties GeoDataFrame에 join 합니다.\n결과 GeoDataFrame CA_stats의 이름을 지정하고 “GEOID”, “name”, “area_sqkm”, “geometry”, “population”, “high_earners” 및 “median_age”의 8개 열이 있는지 확인합니다.\n# Your code here\ncols_to_add = CA_pop.join([CA_high_earners, CA_median_age]).reset_index()\nCA_stats = CA_counties.merge(cols_to_add, on=\"GEOID\")\n\nCA_stats.head()\n\n\n\n\n\n\n\n\n\nGEOID\n\n\nname\n\n\narea_sqkm\n\n\ngeometry\n\n\npopulation\n\n\nhigh_earners\n\n\nmedian_age\n\n\n\n\n\n\n0\n\n\n6091\n\n\nSierra County\n\n\n2491.995494\n\n\nPOLYGON ((-120.65560 39.69357, -120.65554 39.6…\n\n\n2987\n\n\n111\n\n\n55.0\n\n\n\n\n1\n\n\n6067\n\n\nSacramento County\n\n\n2575.258262\n\n\nPOLYGON ((-121.18858 38.71431, -121.18732 38.7…\n\n\n1540975\n\n\n65768\n\n\n35.9\n\n\n\n\n2\n\n\n6083\n\n\nSanta Barbara County\n\n\n9813.817958\n\n\nMULTIPOLYGON (((-120.58191 34.09856, -120.5822…\n\n\n446527\n\n\n25231\n\n\n33.7\n\n\n\n\n3\n\n\n6009\n\n\nCalaveras County\n\n\n2685.626726\n\n\nPOLYGON ((-120.63095 38.34111, -120.63058 38.3…\n\n\n45602\n\n\n2046\n\n\n51.6\n\n\n\n\n4\n\n\n6111\n\n\nVentura County\n\n\n5719.321379\n\n\nMULTIPOLYGON (((-119.63631 33.27304, -119.6360…\n\n\n850967\n\n\n57121\n\n\n37.5\n\n\n\n\n\n\n이제 모든 데이터가 한 곳에 있으므로 열 조합을 사용하는 통계량을 계산하는 것이 훨씬 쉬워졌습니다. 다음 코드 셀을 실행하여 모집단 밀도가 있는 “밀도” 열을 만듭니다.\nCA_stats[\"density\"] = CA_stats[\"population\"] / CA_stats[\"area_sqkm\"]\n\n\n2.4 4) 어느 카운티가 유망해 보이나요?\n모든 정보를 단일 GeoDataFrame으로 통합하면 특정 기준을 충족하는 카운티를 훨씬 쉽게 선택할 수 있습니다.\n다음 코드 셀을 사용하여 CA_stats GeoDataFrame에서 행의 하위 집합(및 모든 열)을 포함하는 GeoDataFramesel_counties를 만듭니다. 특히 다음과 같은 국가를 선택해야 합니다:\n\n매년 15만 달러를 버는 최소 10만 가구가 있습니다,\n중위연령은 38.5세 미만이고\n거주자의 밀도는 최소 285(제곱킬로미터당)입니다.\n\n또한 선택된 카운티는 다음 기준 중 하나 이상을 충족해야 합니다:\n\n매년 15만 달러를 버는 최소 50만 가구가 있습니다,\n중위연령이 35.5세 미만인 경우\n거주자의 밀도는 적어도 1400(평방킬로미터당)입니다.\n\n# Your code here\n# Your code here\nsel_counties = CA_stats[((CA_stats.high_earners > 100000) &\n                         (CA_stats.median_age < 38.5) &\n                         (CA_stats.density > 285) &\n                         ((CA_stats.median_age < 35.5) |\n                         (CA_stats.density > 1400) |\n                         (CA_stats.high_earners > 500000)))]\n\nsel_counties.head()\n\n\n\n\n\n\n\n\n\nGEOID\n\n\nname\n\n\narea_sqkm\n\n\ngeometry\n\n\npopulation\n\n\nhigh_earners\n\n\nmedian_age\n\n\ndensity\n\n\n\n\n\n\n5\n\n\n6037\n\n\nLos Angeles County\n\n\n12305.376879\n\n\nMULTIPOLYGON (((-118.66761 33.47749, -118.6682…\n\n\n10105518\n\n\n501413\n\n\n36.0\n\n\n821.227834\n\n\n\n\n8\n\n\n6073\n\n\nSan Diego County\n\n\n11721.342229\n\n\nPOLYGON ((-117.43744 33.17953, -117.44955 33.1…\n\n\n3343364\n\n\n194676\n\n\n35.4\n\n\n285.237299\n\n\n\n\n10\n\n\n6075\n\n\nSan Francisco County\n\n\n600.588247\n\n\nMULTIPOLYGON (((-122.60025 37.80249, -122.6123…\n\n\n883305\n\n\n114989\n\n\n38.3\n\n\n1470.733077\n\n\n\n\n\n\n\n\n2.5 5) 당신은 몇 개의 상점을 확인했습니까?\n다음 스타벅스 리저브 로스터리 위치를 찾을 때는 선택한 카운티 내의 모든 매장을 고려해야 합니다. 그렇다면, 선택된 카운티 내에 몇 개의 상점이 있을까요?\n이 질문에 대한 답변을 준비하려면 다음 코드 셀을 실행하여 모든 스타벅스 위치와 함께 GeoDataFrame stabs_gdf를 만듭니다.\nstarbucks_gdf = gpd.GeoDataFrame(starbucks, geometry=gpd.points_from_xy(starbucks.Longitude, starbucks.Latitude))\nstarbucks_gdf.crs = {'init': 'epsg:4326'}\nC:\\Users\\seong taek\\anaconda3\\lib\\site-packages\\pyproj\\crs\\crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n  in_crs_string = _prepare_from_proj_string(in_crs_string)\n그렇다면, 당신이 선택한 county에는 몇 개의 가게가 있나요?\n# Fill in your answer\nlocations_of_interest = gpd.sjoin(starbucks_gdf, sel_counties)\nnum_stores = len(locations_of_interest)\nnum_stores\n1043\n\n\n2.6 6) 저장소 위치를 시각화합니다.\n이전 질문에서 식별한 상점의 위치를 보여주는 맵을 만듭니다.\n# Create a base map\nm_6 = folium.Map(location=[37,-120], zoom_start=6)\n\n# Your code here: show selected store locations\nmc = MarkerCluster()\n\nlocations_of_interest = gpd.sjoin(starbucks_gdf, sel_counties)\nfor idx, row in locations_of_interest.iterrows():\n    if not math.isnan(row['Longitude']) and not math.isnan(row['Latitude']):\n        mc.add_child(folium.Marker([row['Latitude'], row['Longitude']]))\nm_6.add_child(mc)\n\n# Show the map\nembed_map(m_6, 'q_6.html')\nm_6\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise4/exercise4-manipulating-geospatial-data.html#keep-going",
    "href": "posts_work/Data_Mining_exercise4/exercise4-manipulating-geospatial-data.html#keep-going",
    "title": "Data_Mining_Kaggle",
    "section": "3 Keep going",
    "text": "3 Keep going\nLearn about how proximity analysis can help you to understand the relationships between points on a map.\n\nHave questions or comments? Visit the course discussion forum to chat with other learners."
  },
  {
    "objectID": "posts_work/Data_Mining_exercise5/exercise5-proximity-analysis.html",
    "href": "posts_work/Data_Mining_exercise5/exercise5-proximity-analysis.html",
    "title": "Data_Mining_Kaggle",
    "section": "",
    "text": "Exercise 5 - Proximity Analysis\nThis notebook is an exercise in the Geospatial Analysis course. You can reference the tutorial at this link."
  },
  {
    "objectID": "posts_work/Data_Mining_exercise5/exercise5-proximity-analysis.html#introduction",
    "href": "posts_work/Data_Mining_exercise5/exercise5-proximity-analysis.html#introduction",
    "title": "Data_Mining_Kaggle",
    "section": "1 Introduction",
    "text": "1 Introduction\nYou are part of a crisis response team, and you want to identify how hospitals have been responding to crash collisions in New York City.\n\n\n\nBefore you get started, run the code cell below to set everything up.\n여러분은 위기 대응 팀의 일원이며, 뉴욕시에서 발생한 충돌 사고에 대해 병원이 어떻게 대응해 왔는지를 파악하려고 합니다. 시작하기 전에 아래의 코드 셀을 실행하여 모든 설정을 수행합니다.\nimport math\nimport geopandas as gpd\nimport pandas as pd\nfrom shapely.geometry import MultiPolygon\n\nimport folium\nfrom folium import Choropleth, Marker\nfrom folium.plugins import HeatMap, MarkerCluster\nembed_map() 함수를 사용하여 지도를 시각화합니다.\ndef embed_map(m, file_name):\n    from IPython.display import IFrame\n    m.save(file_name)\n    return IFrame(file_name, width='100%', height='500px')"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise5/exercise5-proximity-analysis.html#exercises",
    "href": "posts_work/Data_Mining_exercise5/exercise5-proximity-analysis.html#exercises",
    "title": "Data_Mining_Kaggle",
    "section": "2 Exercises",
    "text": "2 Exercises\n\n2.1 1) 충돌 데이터를 시각화합니다.\n아래 코드 셀을 실행하여 2013-2018년 주요 자동차 충돌을 추적하는 GeoDataFrame 충돌을 로드합니다.\ncollisions = gpd.read_file(\"C:/Users\\seong taek/Desktop/archive/NYPD_Motor_Vehicle_Collisions/NYPD_Motor_Vehicle_Collisions/NYPD_Motor_Vehicle_Collisions.shp\")\ncollisions.head()\n\n\n\n\n\n\n\n\n\nDATE\n\n\nTIME\n\n\nBOROUGH\n\n\nZIP CODE\n\n\nLATITUDE\n\n\nLONGITUDE\n\n\nLOCATION\n\n\nON STREET\n\n\nCROSS STRE\n\n\nOFF STREET\n\n\n…\n\n\nCONTRIBU_2\n\n\nCONTRIBU_3\n\n\nCONTRIBU_4\n\n\nUNIQUE KEY\n\n\nVEHICLE TY\n\n\nVEHICLE _1\n\n\nVEHICLE _2\n\n\nVEHICLE _3\n\n\nVEHICLE _4\n\n\ngeometry\n\n\n\n\n\n\n0\n\n\n07/30/2019\n\n\n0:00\n\n\nBRONX\n\n\n10464\n\n\n40.841100\n\n\n-73.784960\n\n\n(40.8411, -73.78496)\n\n\nNaN\n\n\nNaN\n\n\n121 PILOT STREET\n\n\n…\n\n\nUnspecified\n\n\nNaN\n\n\nNaN\n\n\n4180045\n\n\nSedan\n\n\nStation Wagon/Sport Utility Vehicle\n\n\nStation Wagon/Sport Utility Vehicle\n\n\nNaN\n\n\nNaN\n\n\nPOINT (1043750.211 245785.815)\n\n\n\n\n1\n\n\n07/30/2019\n\n\n0:10\n\n\nQUEENS\n\n\n11423\n\n\n40.710827\n\n\n-73.770660\n\n\n(40.710827, -73.77066)\n\n\nJAMAICA AVENUE\n\n\n188 STREET\n\n\nNaN\n\n\n…\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n4180007\n\n\nSedan\n\n\nSedan\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nPOINT (1047831.185 198333.171)\n\n\n\n\n2\n\n\n07/30/2019\n\n\n0:25\n\n\nNaN\n\n\nNaN\n\n\n40.880318\n\n\n-73.841286\n\n\n(40.880318, -73.841286)\n\n\nBOSTON ROAD\n\n\nNaN\n\n\nNaN\n\n\n…\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n4179575\n\n\nSedan\n\n\nStation Wagon/Sport Utility Vehicle\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nPOINT (1028139.293 260041.178)\n\n\n\n\n3\n\n\n07/30/2019\n\n\n0:35\n\n\nMANHATTAN\n\n\n10036\n\n\n40.756744\n\n\n-73.984590\n\n\n(40.756744, -73.98459)\n\n\nNaN\n\n\nNaN\n\n\n155 WEST 44 STREET\n\n\n…\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n4179544\n\n\nBox Truck\n\n\nStation Wagon/Sport Utility Vehicle\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nPOINT (988519.261 214979.320)\n\n\n\n\n4\n\n\n07/30/2019\n\n\n10:00\n\n\nBROOKLYN\n\n\n11223\n\n\n40.600090\n\n\n-73.965910\n\n\n(40.60009, -73.96591)\n\n\nAVENUE T\n\n\nOCEAN PARKWAY\n\n\nNaN\n\n\n…\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n4180660\n\n\nStation Wagon/Sport Utility Vehicle\n\n\nBike\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nPOINT (993716.669 157907.212)\n\n\n\n\n\n\n5 rows × 30 columns\n\n\n충돌 데이터를 시각화하기 위해 대화형 맵을 만들려면 “LATITUITUITY” 및 “LONGITUITY” 열을 사용합니다. 어떤 종류의 지도가 가장 효과적이라고 생각합니까?\nm_1 = folium.Map(location=[40.7, -74], zoom_start=11) \n\n# Your code here: Visualize the collision data\nHeatMap(data=collisions[['LATITUDE', 'LONGITUDE']], radius=9).add_to(m_1)\n\n# Show the map\nembed_map(m_1, \"q_1.html\")\nm_1\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\n\n2.2 2) 병원 범위를 이해합니다.\n다음 코드 셀을 실행하여 병원 데이터를 로드합니다.\nhospitals = gpd.read_file(\"C:/Users\\seong taek/Desktop/archive/nyu_2451_34494/nyu_2451_34494/nyu_2451_34494.shp\")\nhospitals.head()\n\n\n\n\n\n\n\n\n\nid\n\n\nname\n\n\naddress\n\n\nzip\n\n\nfactype\n\n\nfacname\n\n\ncapacity\n\n\ncapname\n\n\nbcode\n\n\nxcoord\n\n\nycoord\n\n\nlatitude\n\n\nlongitude\n\n\ngeometry\n\n\n\n\n\n\n0\n\n\n317000001H1178\n\n\nBRONX-LEBANON HOSPITAL CENTER - CONCOURSE DIVI…\n\n\n1650 Grand Concourse\n\n\n10457\n\n\n3102\n\n\nHospital\n\n\n415\n\n\nBeds\n\n\n36005\n\n\n1008872.0\n\n\n246596.0\n\n\n40.843490\n\n\n-73.911010\n\n\nPOINT (1008872.000 246596.000)\n\n\n\n\n1\n\n\n317000001H1164\n\n\nBRONX-LEBANON HOSPITAL CENTER - FULTON DIVISION\n\n\n1276 Fulton Ave\n\n\n10456\n\n\n3102\n\n\nHospital\n\n\n164\n\n\nBeds\n\n\n36005\n\n\n1011044.0\n\n\n242204.0\n\n\n40.831429\n\n\n-73.903178\n\n\nPOINT (1011044.000 242204.000)\n\n\n\n\n2\n\n\n317000011H1175\n\n\nCALVARY HOSPITAL INC\n\n\n1740-70 Eastchester Rd\n\n\n10461\n\n\n3102\n\n\nHospital\n\n\n225\n\n\nBeds\n\n\n36005\n\n\n1027505.0\n\n\n248287.0\n\n\n40.848060\n\n\n-73.843656\n\n\nPOINT (1027505.000 248287.000)\n\n\n\n\n3\n\n\n317000002H1165\n\n\nJACOBI MEDICAL CENTER\n\n\n1400 Pelham Pkwy\n\n\n10461\n\n\n3102\n\n\nHospital\n\n\n457\n\n\nBeds\n\n\n36005\n\n\n1027042.0\n\n\n251065.0\n\n\n40.855687\n\n\n-73.845311\n\n\nPOINT (1027042.000 251065.000)\n\n\n\n\n4\n\n\n317000008H1172\n\n\nLINCOLN MEDICAL & MENTAL HEALTH CENTER\n\n\n234 E 149 St\n\n\n10451\n\n\n3102\n\n\nHospital\n\n\n362\n\n\nBeds\n\n\n36005\n\n\n1005154.0\n\n\n236853.0\n\n\n40.816758\n\n\n-73.924478\n\n\nPOINT (1005154.000 236853.000)\n\n\n\n\n\n\n“위도” 및 “경도” 열을 사용하여 병원 위치를 시각화합니다.\nm_2 = folium.Map(location=[40.7, -74], zoom_start=11) \n\n# Your code here: Visualize the hospital locations\nfor idx, row in hospitals.iterrows():\n    Marker([row['latitude'], row['longitude']], popup=row['name']).add_to(m_2)\n\n# Show the map\nembed_map(m_2, \"q_2.html\")\nm_2\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\n\n2.3 3) 가장 가까운 병원이 10킬로미터 이상 떨어진 때는 언제였습니까?\n가장 가까운 병원에서 10km 이상 떨어진 곳에서 발생한 충돌로 인한 모든 행을 포함하는 DataFrame outside_range를 만듭니다.\n병원과 충돌은 모두 EPSG 2263을 좌표계로 사용하고 EPSG 2263은 미터 단위를 사용합니다.\n# Your code here\ncoverage = gpd.GeoDataFrame(geometry=hospitals.geometry).buffer(10000)\nmy_union = coverage.geometry.unary_union\noutside_range = collisions.loc[~collisions[\"geometry\"].apply(lambda x: my_union.contains(x))]\n다음 코드 셀은 가장 가까운 병원에서 10킬로미터 이상 떨어진 곳에서 발생한 충돌의 비율을 계산합니다.\npercentage = round(100*len(outside_range)/len(collisions), 2)\nprint(\"Percentage of collisions more than 10 km away from the closest hospital: {}%\".format(percentage))\nPercentage of collisions more than 10 km away from the closest hospital: 15.12%\n\n\n2.4 4) 추천자를 만들어 보세요.\n먼 곳에서 충돌이 발생할 경우 부상자를 가장 가까운 병원으로 이송하는 것이 더욱 중요합니다.\n이를 고려하여 다음과 같은 추천인을 생성하기로 결정합니다:\n\n충돌 위치(EPSG 2263)를 입력으로 사용합니다,\n가장 가까운 병원을 찾습니다(EPSG 2263에서 거리 계산이 수행되는 곳)\n가장 가까운 병원의 이름을 반환합니다.\n\ndef best_hospital(collision_location):\n    # Your code here\n    idx_min = hospitals.geometry.distance(collision_location).idxmin()\n    my_hospital = hospitals.iloc[idx_min]\n    name = my_hospital[\"name\"]\n    return name\n# Test your function: this should suggest CALVARY HOSPITAL INC\nprint(best_hospital(outside_range.geometry.iloc[0]))\nCALVARY HOSPITAL INC\n\n\n2.5 5) 가장 수요가 많은 병원은 어디입니까?\nOutside_range DataFrame에서 충돌만 고려할 때 가장 권장되는 병원은 무엇입니까?\n4)에서 생성한 함수가 반환한 병원 이름과 정확히 일치하는 파이썬 문자열이어야 합니다.\n# Your code here\nhighest_demand = outside_range.geometry.apply(best_hospital).value_counts().idxmax()\nhighest_demand\n'JAMAICA HOSPITAL MEDICAL CENTER'\n\n\n2.6 6) 서울시는 어디에 새로운 병원을 지어야 합니까?\n가장 가까운 병원에서 10km 이상 떨어진 곳에서 발생한 충돌 외에도 병원 위치를 시각화하려면 다음 코드 셀을 (변경 없이) 실행합니다.\nm_6 = folium.Map(location=[40.7, -74], zoom_start=11) \n\ncoverage = gpd.GeoDataFrame(geometry=hospitals.geometry).buffer(10000)\nfolium.GeoJson(coverage.geometry.to_crs(epsg=4326)).add_to(m_6)\nHeatMap(data=outside_range[['LATITUDE', 'LONGITUDE']], radius=9).add_to(m_6)\nfolium.LatLngPopup().add_to(m_6)\n\nembed_map(m_6, 'm_6.html')\nm_6\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n지도의 아무 곳이나 클릭하면 위도와 경도의 해당 위치가 있는 팝업이 나타납니다.\n뉴욕시는 두 개의 새로운 병원의 위치를 결정하는 데 도움을 요청합니다. 그들은 특히 3) 단계에서 계산된 백분율을 10% 미만으로 만들기 위해 위치를 식별하는 데 도움을 받기를 원합니다. 지도를 사용하여(그리고 구역법이나 병원을 짓기 위해 어떤 잠재적인 건물을 제거해야 할지에 대한 걱정 없이), 도시가 이 목표를 달성하는 데 도움이 될 두 곳을 식별할 수 있습니까?\n병원 1에 대해 제안된 위도와 경도를 각각 ’lat_1’과 ’long_1’에 입력합니다. (병원 2도 마찬가지입니다.)\n그런 다음 새 병원의 효과를 확인하기 위해 나머지 셀을 그대로 실행합니다. 만약 두 개의 새로운 병원이 그 비율을 10% 미만으로 만든다면, 당신의 대답은 정확하다고 표시될 것입니다.\n# Your answer here: proposed location of hospital 1\nlat_1 = 37\nlong_1 = 126\n\n# Your answer here: proposed location of hospital 2\nlat_2 = 37\nlong_2 = 126\n\n\n# Do not modify the code below this line\ntry:\n    new_df = pd.DataFrame(\n        {'Latitude': [lat_1, lat_2],\n         'Longitude': [long_1, long_2]})\n    new_gdf = gpd.GeoDataFrame(new_df, geometry=gpd.points_from_xy(new_df.Longitude, new_df.Latitude))\n    new_gdf.crs = {'init' :'epsg:4326'}\n    new_gdf = new_gdf.to_crs(epsg=2263)\n    # get new percentage\n    new_coverage = gpd.GeoDataFrame(geometry=new_gdf.geometry).buffer(10000)\n    new_my_union = new_coverage.geometry.unary_union\n    new_outside_range = outside_range.loc[~outside_range[\"geometry\"].apply(lambda x: new_my_union.contains(x))]\n    new_percentage = round(100*len(new_outside_range)/len(collisions), 2)\n    print(\"(NEW) Percentage of collisions more than 10 km away from the closest hospital: {}%\".format(new_percentage))\n\n    # make the map\n    m = folium.Map(location=[40.7, -74], zoom_start=11) \n    folium.GeoJson(coverage.geometry.to_crs(epsg=4326)).add_to(m)\n    folium.GeoJson(new_coverage.geometry.to_crs(epsg=4326)).add_to(m)\n    for idx, row in new_gdf.iterrows():\n        Marker([row['Latitude'], row['Longitude']]).add_to(m)\n    HeatMap(data=new_outside_range[['LATITUDE', 'LONGITUDE']], radius=9).add_to(m)\n    folium.LatLngPopup().add_to(m)\n    display(embed_map(m, 'q_6.html'))\nexcept:\n    q_6.hint()\n\nm\nC:\\Users\\seong taek\\anaconda3\\lib\\site-packages\\pyproj\\crs\\crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n  in_crs_string = _prepare_from_proj_string(in_crs_string)\n\n\n(NEW) Percentage of collisions more than 10 km away from the closest hospital: 15.12%\n\n\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise5/exercise5-proximity-analysis.html#congratulations",
    "href": "posts_work/Data_Mining_exercise5/exercise5-proximity-analysis.html#congratulations",
    "title": "Data_Mining_Kaggle",
    "section": "3 Congratulations!",
    "text": "3 Congratulations!\nYou have just completed the Geospatial Analysis micro-course! Great job!\n\nHave questions or comments? Visit the course discussion forum to chat with other learners."
  },
  {
    "objectID": "posts_work/Data_Mining_exercise3/exercise3-interactive-maps.html",
    "href": "posts_work/Data_Mining_exercise3/exercise3-interactive-maps.html",
    "title": "Data_Mining_Kaggle",
    "section": "",
    "text": "Exercise 3 - Interactive Maps\nThis notebook is an exercise in the Geospatial Analysis course. You can reference the tutorial at this link."
  },
  {
    "objectID": "posts_work/Data_Mining_exercise3/exercise3-interactive-maps.html#introduction",
    "href": "posts_work/Data_Mining_exercise3/exercise3-interactive-maps.html#introduction",
    "title": "Data_Mining_Kaggle",
    "section": "1 Introduction",
    "text": "1 Introduction\nYou are an urban safety planner in Japan, and you are analyzing which areas of Japan need extra earthquake reinforcement. Which areas are both high in population density and prone to earthquakes?\n\n\n\nBefore you get started, run the code cell below to set everything up.\n\n당신은 일본의 도시 안전 계획자이고, 당신은 일본의 어느 지역에서 추가적인 지진 보강이 필요한지 분석하고 있습니다. 인구 밀도가 높고 지진이 일어나기 쉬운 지역은 어디입니까?\n\nimport pandas as pd\nimport geopandas as gpd\n\n#!pip install folium\nimport folium\nfrom folium import Choropleth\nfrom folium.plugins import HeatMap\n\n대화형 맵을 표시하기 위한 함수 embed_map()을 정의합니다. 맵을 포함하는 변수와 맵이 저장될 HTML 파일의 이름이라는 두 가지 인수를 사용할 수 있습니다.\n이 기능을 사용하면 모든 웹 브라우저에서 지도를 볼 수 있습니다. 지도 보기.\n\ndef embed_map(m, file_name):\n    from IPython.display import IFrame\n    m.save(file_name)\n    return IFrame(file_name, width='100%', height='500px')"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise3/exercise3-interactive-maps.html#exercises",
    "href": "posts_work/Data_Mining_exercise3/exercise3-interactive-maps.html#exercises",
    "title": "Data_Mining_Kaggle",
    "section": "2 Exercises",
    "text": "2 Exercises\n\n2.1 지진은 판의 경계와 일치합니까?\n\n아래 코드 셀을 실행하여 전역 플레이트 경계를 표시하는 DataFrame plate_boundaries를 만듭니다. 좌표 열은 경계를 따라 위치(위도, 경도)의 목록입니다\n\nplate_boundaries = gpd.read_file(\"C:/Users\\seong taek/Desktop/archive/Plate_Boundaries/Plate_Boundaries/Plate_Boundaries.shp\")\nplate_boundaries['coordinates'] = plate_boundaries.apply(lambda x: [(b,a) for (a,b) in list(x.geometry.coords)], axis='columns')\nplate_boundaries.drop('geometry', axis=1, inplace=True)\n\nplate_boundaries.head()\n\n\n\n\n\n\n\n\n\nHAZ_PLATES\n\n\nHAZ_PLAT_1\n\n\nHAZ_PLAT_2\n\n\nShape_Leng\n\n\ncoordinates\n\n\n\n\n\n\n0\n\n\nTRENCH\n\n\nSERAM TROUGH (ACTIVE)\n\n\n6722\n\n\n5.843467\n\n\n[(-5.444200361999947, 133.6808931800001), (-5….\n\n\n\n\n1\n\n\nTRENCH\n\n\nWETAR THRUST\n\n\n6722\n\n\n1.829013\n\n\n[(-7.760600482999962, 125.47879802900002), (-7…\n\n\n\n\n2\n\n\nTRENCH\n\n\nTRENCH WEST OF LUZON (MANILA TRENCH) NORTHERN …\n\n\n6621\n\n\n6.743604\n\n\n[(19.817899819000047, 120.09999798800004), (19…\n\n\n\n\n3\n\n\nTRENCH\n\n\nBONIN TRENCH\n\n\n9821\n\n\n8.329381\n\n\n[(26.175899215000072, 143.20620700100005), (26…\n\n\n\n\n4\n\n\nTRENCH\n\n\nNEW GUINEA TRENCH\n\n\n8001\n\n\n11.998145\n\n\n[(0.41880004000006466, 132.8273013480001), (0….\n\n\n\n\n\n\n그런 다음 변경 없이 아래 코드 셀을 실행하여 과거 지진 데이터를 DataFrame earthquakes에 로드합니다\n# Load the data and print the first 5 rows\nearthquakes = pd.read_csv(\"C:/Users\\seong taek/Desktop/archive/earthquakes1970-2014.csv\", parse_dates=[\"DateTime\"])\nearthquakes.head()\n\n\n\n\n\n\n\n\n\nDateTime\n\n\nLatitude\n\n\nLongitude\n\n\nDepth\n\n\nMagnitude\n\n\nMagType\n\n\nNbStations\n\n\nGap\n\n\nDistance\n\n\nRMS\n\n\nSource\n\n\nEventID\n\n\n\n\n\n\n0\n\n\n1970-01-04 17:00:40.200\n\n\n24.139\n\n\n102.503\n\n\n31.0\n\n\n7.5\n\n\nMs\n\n\n90.0\n\n\nNaN\n\n\nNaN\n\n\n0.0\n\n\nNEI\n\n\n1.970010e+09\n\n\n\n\n1\n\n\n1970-01-06 05:35:51.800\n\n\n-9.628\n\n\n151.458\n\n\n8.0\n\n\n6.2\n\n\nMs\n\n\n85.0\n\n\nNaN\n\n\nNaN\n\n\n0.0\n\n\nNEI\n\n\n1.970011e+09\n\n\n\n\n2\n\n\n1970-01-08 17:12:39.100\n\n\n-34.741\n\n\n178.568\n\n\n179.0\n\n\n6.1\n\n\nMb\n\n\n59.0\n\n\nNaN\n\n\nNaN\n\n\n0.0\n\n\nNEI\n\n\n1.970011e+09\n\n\n\n\n3\n\n\n1970-01-10 12:07:08.600\n\n\n6.825\n\n\n126.737\n\n\n73.0\n\n\n6.1\n\n\nMb\n\n\n91.0\n\n\nNaN\n\n\nNaN\n\n\n0.0\n\n\nNEI\n\n\n1.970011e+09\n\n\n\n\n4\n\n\n1970-01-16 08:05:39.000\n\n\n60.280\n\n\n-152.660\n\n\n85.0\n\n\n6.0\n\n\nML\n\n\n0.0\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nAK\n\n\nNaN\n\n\n\n\n\n\n아래 코드 셀은 지도에서 플레이트 경계를 시각화합니다. 모든 지진 데이터를 사용하여 동일한 지도에 열 지도를 추가하고 지진이 판 경계와 일치하는지 여부를 확인할 수 있습니다\n# Create a base map with plate boundaries\nm_1 = folium.Map(location=[35,136], tiles='cartodbpositron', zoom_start=5)\nfor i in range(len(plate_boundaries)):\n    folium.PolyLine(locations=plate_boundaries.coordinates.iloc[i], weight=2, color='black').add_to(m_1)\n\n### Your code here: Add a heatmap to the map\n\n# 표시할 데이터로 HeatMap 레이어를 생성합니다.\ndata = [[row['Latitude'], row['Longitude']] for index, row in earthquakes.iterrows()]\nheatmap_layer = HeatMap(data=data, radius=20)\n\n# HeatMap 레이어를 지도에 추가합니다.\nheatmap_layer.add_to(m_1)\n\n# Show the map\nembed_map(m_1, 'q_1.html')\nm_1\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n그러면 위의 지도를 보면 지진은 판의 경계와 일치합니까?\n정답 : 일치한다\n\n\n2.2 일본에서 지진 깊이와 판 경계에 근접하는 것 사이에 관계가 있습니까?\n당신은 최근에 지진의 깊이가 우리에게 말해주는 것을 읽었습니다 important information 지구의 구조에 관하여. 여러분은 흥미로운 세계적인 패턴이 있는지 알고 싶어하고, 일본에서 깊이가 어떻게 다른지 알고 싶어합니다.\n# Create a base map with plate boundaries\nm_2 = folium.Map(location=[35,136], tiles='cartodbpositron', zoom_start=5)\nfor i in range(len(plate_boundaries)):\n    folium.PolyLine(locations=plate_boundaries.coordinates.iloc[i], weight=2, color='black').add_to(m_2)\n\n### Your code here: Add a map to visualize earthquake depth\nfor index, row in earthquakes.iterrows():\n    depth = row['Depth']  # Get the depth of the earthquake\n    if depth > 0:  # Exclude earthquakes with depth 0 (unknown depth)\n        color = 'red'  # Set color based on depth (you can modify this based on your preference)\n        radius = depth / 10  # Adjust the radius based on depth (you can modify this based on your preference)\n        folium.CircleMarker(location=[row['Latitude'], row['Longitude']],\n                            radius=radius,\n                            color=color,\n                            fill=True,\n                            fill_color=color).add_to(m_2)\n    \n# View the map\nembed_map(m_2, 'q_2.html')\nm_2\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n판 경계에 대한 근접성과 지진 깊이 사이의 관계를 감지할 수 있습니까? 이 패턴은 세계적으로 통용됩니까?\n정답 : 대체적으로 판 경계와 가까울수록 깊이가 얕고 멀어질수록 깊이가 깊다\n\n\n2.3 인구 밀도가 높은 현은 어디입니까?\n다음 코드 셀을 변경하지 않고 실행하여 일본 현의 지리적 경계가 포함된 GeoDataFrame “현”을 만듭니다.\n# GeoDataFrame with prefecture boundaries\nprefectures = gpd.read_file(\"C:/Users\\seong taek/Desktop/archive/japan-prefecture-boundaries/japan-prefecture-boundaries/japan-prefecture-boundaries.shp\")\nprefectures.set_index('prefecture', inplace=True)\nprefectures.head()\n\n\n\n\n\n\n\n\n\ngeometry\n\n\n\n\nprefecture\n\n\n\n\n\n\n\n\nAichi\n\n\nMULTIPOLYGON (((137.09523 34.65330, 137.09546 …\n\n\n\n\nAkita\n\n\nMULTIPOLYGON (((139.55725 39.20330, 139.55765 …\n\n\n\n\nAomori\n\n\nMULTIPOLYGON (((141.39860 40.92472, 141.39806 …\n\n\n\n\nChiba\n\n\nMULTIPOLYGON (((139.82488 34.98967, 139.82434 …\n\n\n\n\nEhime\n\n\nMULTIPOLYGON (((132.55859 32.91224, 132.55904 …\n\n\n\n\n\n\n다음 코드 셀은 각 일본 현에 대한 인구, 면적(제곱킬로미터) 및 인구 밀도(제곱킬로미터당)를 포함하는 데이터 프레임 통계를 만듭니다. 코드 셀을 변경하지 않고 실행합니다.\n# DataFrame containing population of each prefecture\npopulation = pd.read_csv(\"C:/Users\\seong taek/Desktop/archive/japan-prefecture-population.csv\")\npopulation.set_index('prefecture', inplace=True)\n\n# Calculate area (in square kilometers) of each prefecture\narea_sqkm = pd.Series(prefectures.geometry.to_crs(epsg=32654).area / 10**6, name='area_sqkm')\nstats = population.join(area_sqkm)\n\n# Add density (per square kilometer) of each prefecture\nstats['density'] = stats[\"population\"] / stats[\"area_sqkm\"]\nstats.head()\n\n\n\n\n\n\n\n\n\npopulation\n\n\narea_sqkm\n\n\ndensity\n\n\n\n\nprefecture\n\n\n\n\n\n\n\n\n\n\n\n\nTokyo\n\n\n12868000\n\n\n1800.614782\n\n\n7146.448049\n\n\n\n\nKanagawa\n\n\n8943000\n\n\n2383.038975\n\n\n3752.771186\n\n\n\n\nOsaka\n\n\n8801000\n\n\n1923.151529\n\n\n4576.342460\n\n\n\n\nAichi\n\n\n7418000\n\n\n5164.400005\n\n\n1436.372085\n\n\n\n\nSaitama\n\n\n7130000\n\n\n3794.036890\n\n\n1879.264806\n\n\n\n\n\n\n다음 코드 셀을 사용하여 모집단 밀도를 시각화하는 코로플레스 맵을 작성합니다.\n# Create a base map\nm_3 = folium.Map(location=[35,136], tiles='cartodbpositron', zoom_start=5)\n\n### Your code here: create a choropleth map to visualize population density\n\n# Create choropleth map\nChoropleth(geo_data=prefectures['geometry'],\n           data=stats['density'],\n           key_on=\"feature.id\",\n           fill_color='YlGnBu',\n           legend_name='Population density (per square kilometer)'\n          ).add_to(m_3)\n\n# View the map\nembed_map(m_3, 'q_3.html')\nm_3\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n다른 현들보다 상대적으로 밀도가 높은 현은 어디입니까? 그들은 전국적으로 퍼져 있습니까, 아니면 모두 대략 같은 지리적 지역에 위치하고 있습니까? (일본 지리에 익숙하지 않은 경우 이 지도가 질문에 대답하는 데 유용할 수 있습니다.) 지도\n정답 : 도쿄,오사카등 중심도시\n\n\n2.4 고밀도 현 중 규모가 큰 지진이 발생하기 쉬운 곳은 어디입니까?\n지진 보강의 혜택을 받을 수 있는 한 현을 제안하는 지도를 작성합니다. 지도는 밀도와 지진 규모를 모두 시각화해야 합니다.\n규모 7이상을 규모가 큰 지진으로 설정\n# Create a base map\nm_4 = folium.Map(location=[35,136], tiles='cartodbpositron', zoom_start=5)\n\n### Your code here: create a map\n\ndef color_producer(val):\n    if val <=7:\n        return 'forestgreen'\n    else:\n        return 'blue'\n    \nChoropleth(\n    geo_data=prefectures['geometry'].__geo_interface__,\n    data=stats['density'],\n    key_on=\"feature.id\",\n    fill_color='BuPu',\n    legend_name='Population density (per square kilometer)').add_to(m_4)\n\nfor i in range(0,len(earthquakes)):\n    folium.Circle(\n        location=[earthquakes.iloc[i]['Latitude'], earthquakes.iloc[i]['Longitude']],\n        popup=(\"{} ({})\").format(\n            earthquakes.iloc[i]['Magnitude'],\n            earthquakes.iloc[i]['DateTime'].year),\n        radius=earthquakes.iloc[i]['Magnitude']**5.5,\n        color=color_producer(earthquakes.iloc[i]['Magnitude'])).add_to(m_4)\n\n# View the map\nembed_map(m_4, 'q_4.html')\nm_4\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n추가 지진 보강을 위해 어느 현을 추천하십니까?\nIwate현 추천"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise3/exercise3-interactive-maps.html#keep-going",
    "href": "posts_work/Data_Mining_exercise3/exercise3-interactive-maps.html#keep-going",
    "title": "Data_Mining_Kaggle",
    "section": "3 Keep going",
    "text": "3 Keep going\nLearn how to convert names of places to geographic coordinates with geocoding. You’ll also explore special ways to join information from multiple GeoDataFrames.\n\nHave questions or comments? Visit the course discussion forum to chat with other learners."
  },
  {
    "objectID": "posts/Spatial_Info_Analysis final_exam/20191536_기말고사.html",
    "href": "posts/Spatial_Info_Analysis final_exam/20191536_기말고사.html",
    "title": "Spatial_Info_Analysis Tasu_Data",
    "section": "",
    "text": "HTML파일로 보기\nFinal Exam"
  },
  {
    "objectID": "posts/Spatial_Info_Analysis final_exam/20191536_기말고사.html#패키지",
    "href": "posts/Spatial_Info_Analysis final_exam/20191536_기말고사.html#패키지",
    "title": "Spatial_Info_Analysis Tasu_Data",
    "section": "1 패키지",
    "text": "1 패키지\n\nlibrary(sf)\nlibrary(sp)\nlibrary(maptools)\nlibrary(broom)\nlibrary(ggplot2)\nlibrary(tmap)   \nlibrary(leaflet)"
  },
  {
    "objectID": "posts/Spatial_Info_Analysis final_exam/20191536_기말고사.html#가",
    "href": "posts/Spatial_Info_Analysis final_exam/20191536_기말고사.html#가",
    "title": "Spatial_Info_Analysis Tasu_Data",
    "section": "2 가",
    "text": "2 가\n\n2.1 a\n\ngetwd()\n#> [1] \"G:/내 드라이브/taek_blog/posts/Spatial_Info_Analysis final_exam\"\n\n\n\n2.2 b\n\ntasu_station <- read.csv(\"C:/Users/seong taek/Desktop/3-1 Spatial_Info_Analysis/Spatial_Info_Analysis/data/data/tasu_station.csv\", fileEncoding = \"cp949\")\ntasu_2020 <- read.csv(\"C:/Users/seong taek/Desktop/3-1 Spatial_Info_Analysis/Spatial_Info_Analysis/data/data/tasu_2020.csv\", fileEncoding = \"cp949\")\n\nlibrary(rgdal)\n\ndeajeon_area <- readOGR('C:/Users/seong taek/Desktop/3-1 Spatial_Info_Analysis/Spatial_Info_Analysis/LSMD_ADM_SECT_UMD_30.shp', encoding = \"euc-kr\")\n#> OGR data source with driver: ESRI Shapefile \n#> Source: \"C:\\Users\\seong taek\\Desktop\\3-1 Spatial_Info_Analysis\\Spatial_Info_Analysis\\LSMD_ADM_SECT_UMD_30.shp\", layer: \"LSMD_ADM_SECT_UMD_30\"\n#> with 177 features\n#> It has 5 fields"
  },
  {
    "objectID": "posts/Spatial_Info_Analysis final_exam/20191536_기말고사.html#나",
    "href": "posts/Spatial_Info_Analysis final_exam/20191536_기말고사.html#나",
    "title": "Spatial_Info_Analysis Tasu_Data",
    "section": "3 나",
    "text": "3 나\n\n3.1 a\n\nlibrary(dplyr)\n#> Warning: package 'dplyr' was built under R version 4.2.2\n#> \n#> Attaching package: 'dplyr'\n#> The following objects are masked from 'package:stats':\n#> \n#>     filter, lag\n#> The following objects are masked from 'package:base':\n#> \n#>     intersect, setdiff, setequal, union\n\ntasu_2020 %>% head()\n#>   borrowStation  borrowTime returnStaion  returnTime distance\n#> 1           174 2.02001e+13          224 2.02001e+13      640\n#> 2           174 2.02001e+13          224 2.02001e+13      640\n#> 3           117 2.02001e+13          115 2.02001e+13     1070\n#> 4           167 2.02001e+13           94 2.02001e+13     1490\n#> 5           203 2.02001e+13          203 2.02001e+13        0\n#> 6           167 2.02001e+13           94 2.02001e+13     1540\ntasu_2020 %>% tail()\n#>        borrowStation   borrowTime returnStaion   returnTime distance\n#> 604441            56 2.020123e+13          148 2.020123e+13        0\n#> 604442            87 2.020123e+13          118 2.021010e+13        0\n#> 604443           182 2.020123e+13          182 2.020123e+13        0\n#> 604444            42 2.020123e+13           83 2.021010e+13     2470\n#> 604445           115 2.020123e+13          196 2.021010e+13     1730\n#> 604446            60 2.020123e+13          108 2.021010e+13     1590\n\ntasu_station %>% head()\n#>   ID                  stationName holder                         address\n#> 1  1   무역전시관입구(택시승강장)     14    대전광역시 유성구 도룡동 3-8\n#> 2  2               대전컨벤션센터     20   대전광역시 유성구 도룡동 4-19\n#> 3  3                  한밭수목원1     19      대전광역시 서구 만년동 396\n#> 4  4 초원아파트(104동 버스정류장)     12      대전광역시 서구 만년동 401\n#> 5  5  둔산대공원 입구(버스정류장)     13 대전광역시 서구 둔산2동 1521-10\n#> 6  6             백합네거리(농협)     12     대전광역시 서구 월평2동 266\ntasu_station %>% tail()\n#>      ID                   stationName holder                        address\n#> 256 256      신성동 수천이들 근린공원     15   대전광역시 유성구 신성동 494\n#> 257 257                대전테크노파크     15   대전광역시 유성구 용산동 605\n#> 258 258                    천문대입구     12   대전광역시 유성구 신성동 458\n#> 259 259                    대덕대학교     14      대전광역시 유성구 장동 48\n#> 260 260         오정농수산물 도매시장     15  대전광역시 대덕구 오정동 45-1\n#> 261 261 도로교통공단(건너편 라도무스)     15 대전광역시 유성구 원신흥동 608\n\ndeajeon_area %>% head()\n#> class       : SpatialPolygonsDataFrame \n#> features    : 6 \n#> extent      : 992033.8, 998440.7, 1817026, 1828730  (xmin, xmax, ymin, ymax)\n#> crs         : +proj=tmerc +lat_0=38 +lon_0=127.5 +k=0.9996 +x_0=1000000 +y_0=2000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n#> variables   : 5\n#> names       :   EMD_CD, EMD_NM, SGG_OID, COL_ADM_SE,  GID \n#> min values  : 30230105, 갈전동,     115,      30230, 3446 \n#> max values  : 30230124,   장동,     433,      30230, 3451\ndeajeon_area %>% tail()\n#> class       : SpatialPolygonsDataFrame \n#> features    : 6 \n#> extent      : 993453.6, 996143.8, 1808061, 1816426  (xmin, xmax, ymin, ymax)\n#> crs         : +proj=tmerc +lat_0=38 +lon_0=127.5 +k=0.9996 +x_0=1000000 +y_0=2000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n#> variables   : 5\n#> names       :   EMD_CD, EMD_NM, SGG_OID, COL_ADM_SE,  GID \n#> min values  : 30110102,   대동,     158,      30110, 3617 \n#> max values  : 30110138, 자양동,    3026,      30110, 3622\n\n\n\n3.2 b\n\ntasu_station %>% str()\n#> 'data.frame':    261 obs. of  4 variables:\n#>  $ ID         : int  1 2 3 4 5 6 7 8 9 10 ...\n#>  $ stationName: chr  \"무역전시관입구(택시승강장)\" \"대전컨벤션센터\" \"한밭수목원1\" \"초원아파트(104동 버스정류장)\" ...\n#>  $ holder     : int  14 20 19 12 13 12 13 12 12 12 ...\n#>  $ address    : chr  \"대전광역시 유성구 도룡동 3-8\" \"대전광역시 유성구 도룡동 4-19\" \"대전광역시 서구 만년동 396\" \"대전광역시 서구 만년동 401\" ...\n\ntasu_2020 %>% str()\n#> 'data.frame':    604446 obs. of  5 variables:\n#>  $ borrowStation: int  174 174 117 167 203 167 92 203 154 110 ...\n#>  $ borrowTime   : num  2.02e+13 2.02e+13 2.02e+13 2.02e+13 2.02e+13 ...\n#>  $ returnStaion : num  224 224 115 94 203 94 83 55 169 16 ...\n#>  $ returnTime   : num  2.02e+13 2.02e+13 2.02e+13 2.02e+13 2.02e+13 ...\n#>  $ distance     : num  640 640 1070 1490 0 1540 1190 750 1110 1490 ...\n\n\n\n3.3 c\n\ntasu_2020 %>% dim()\n#> [1] 604446      5\n\ntasu_station %>% dim()\n#> [1] 261   4\n\ndeajeon_area %>% dim()\n#> [1] 177   5\n\n\n\n3.4 d\n\nnames(tasu_station) <- c('번호', '대여소명', '거치대', '주소')\ntasu_station %>% head()\n#>   번호                     대여소명 거치대                            주소\n#> 1    1   무역전시관입구(택시승강장)     14    대전광역시 유성구 도룡동 3-8\n#> 2    2               대전컨벤션센터     20   대전광역시 유성구 도룡동 4-19\n#> 3    3                  한밭수목원1     19      대전광역시 서구 만년동 396\n#> 4    4 초원아파트(104동 버스정류장)     12      대전광역시 서구 만년동 401\n#> 5    5  둔산대공원 입구(버스정류장)     13 대전광역시 서구 둔산2동 1521-10\n#> 6    6             백합네거리(농협)     12     대전광역시 서구 월평2동 266\n\nnames(tasu_2020) <- c('대여스테이션', '대여일시', '반납스테이션', '반납일시', '이동거리')\ntasu_2020 %>% head()\n#>   대여스테이션    대여일시 반납스테이션    반납일시 이동거리\n#> 1          174 2.02001e+13          224 2.02001e+13      640\n#> 2          174 2.02001e+13          224 2.02001e+13      640\n#> 3          117 2.02001e+13          115 2.02001e+13     1070\n#> 4          167 2.02001e+13           94 2.02001e+13     1490\n#> 5          203 2.02001e+13          203 2.02001e+13        0\n#> 6          167 2.02001e+13           94 2.02001e+13     1540"
  },
  {
    "objectID": "posts/Spatial_Info_Analysis final_exam/20191536_기말고사.html#다",
    "href": "posts/Spatial_Info_Analysis final_exam/20191536_기말고사.html#다",
    "title": "Spatial_Info_Analysis Tasu_Data",
    "section": "4 다",
    "text": "4 다\n\n4.1 a\n\nlibrary(ggmap)\nregister_google(key = 'AIzaSyCQhISmZrGYjMTh5J42qmSVytOVgzs6YlQ')\n\n\n\n4.2 b\n\ntasu_station <- mutate_geocode(data = tasu_station, location = 주소, source = \"google\")\n\ntasu_station\n#>     번호                             대여소명 거치대\n#> 1      1           무역전시관입구(택시승강장)     14\n#> 2      2                       대전컨벤션센터     20\n#> 3      3                          한밭수목원1     19\n#> 4      4         초원아파트(104동 버스정류장)     12\n#> 5      5          둔산대공원 입구(버스정류장)     13\n#> 6      6                     백합네거리(농협)     12\n#> 7      7              정부청사 입구(대덕대로)     13\n#> 8      8                정부청사 입구(샘머리)     12\n#> 9      9             황실아파트(성룡초등학교)     12\n#> 10    10            만년동 KBS 부근(기업은행)     12\n#> 11    11          누리아파트(후문 버스정류장)     12\n#> 12    12                   정부청사역 4번출구     13\n#> 13    13              삼천중학교(정문 맞은편)     12\n#> 14    14                        둔산 하이마트     20\n#> 15    15       둔산 홈플러스(법원 버스정류장)     13\n#> 16    16                    국화아파트(501동)     12\n#> 17    17                             타임월드     20\n#> 18    18                             대전시청     17\n#> 19    19           현대아이텔(시청역 6번출구)     13\n#> 20    20            크로바아파트(정문 맞은편)     12\n#> 21    21                    카이스트 학사식당     28\n#> 22    22                  카이스트 창의학습관     28\n#> 23    23                        카이스트 정문     14\n#> 24    24                           화폐박물관     12\n#> 25    25                        카이스트 후문     13\n#> 26    26                엑스포과학공원 주차장     13\n#> 27    27                       엑스포과학공원     13\n#> 28    28                    스마트시티(201동)     14\n#> 29    29                       만년동주민센터     16\n#> 30    30                 선사유적지공용주차장     12\n#> 31    31                             유성구청     20\n#> 32    32                     홈플러스(유성점)     20\n#> 33    33               월평역 2번출구(육교밑)     20\n#> 34    34                  진달래아파트(107동)     13\n#> 35    35                       갈마역 2번출구     13\n#> 36    36                      가람아파트(3동)     13\n#> 37    37                 수정타운아파트(13동)     13\n#> 38    38                       갑천역 1번출구     13\n#> 39    39                             패션월드     13\n#> 40    40                             월평타운     13\n#> 41    41                             대전일보     13\n#> 42    42                           갈마네거리     12\n#> 43    43                             둔산여고     13\n#> 44    44                         을지대학병원     13\n#> 45    45                      청솔아파트(9동)     13\n#> 46    46                           경성큰마을     13\n#> 47    47                         오페라웨딩홀     12\n#> 48    48 대전종합고용지원센터(탄방역 4번출구)     12\n#> 49    49                       한국농어촌공사     12\n#> 50    50                         한가람아파트     12\n#> 51    51                   남선공원종합체육관     10\n#> 52    52                           유승기업사     12\n#> 53    53                         탄방지하차도     12\n#> 54    54                           궁동네거리     13\n#> 55    55                충대정문오거리1(정문)     20\n#> 56    56              충대정문오거리2(건너편)     18\n#> 57    57                         한진오피스텔     13\n#> 58    58                       구암역 3번출구     13\n#> 59    59                   유성온천역 6번출구     10\n#> 60    60                   유성온천역 3번출구     13\n#> 61    61                     만년교(코젤병원)     16\n#> 62    62                    도안휴먼시아1단지     10\n#> 63    63                         상대초등학교     13\n#> 64    64                 유성생명과학고등학교     13\n#> 65    65                      도안 센트롤시티     15\n#> 66    66                   도안 휴먼시아6단지     11\n#> 67    67                      도안 한라비발디     15\n#> 68    68                도안 신안인스빌리베라     13\n#> 69    69   도안 트리풀시티9단지(504동 맞은편)     13\n#> 70    70                  도안 휴먼시아10단지     14\n#> 71    71                       대전지방국세청     12\n#> 72    72                       대전동부경찰서     12\n#> 73    73                         대전중앙병원     10\n#> 74    74                             중리시장     12\n#> 75    75                           보람아파트     12\n#> 76    76                         선비마을입구     12\n#> 77    77                        선비마을3단지     12\n#> 78    78                   중리동(하나로병원)     12\n#> 79    79                   수도시설관리사업소     12\n#> 80    80                           송촌소방서     12\n#> 81    81                           동춘당공원     14\n#> 82    82                        선비마을5단지     12\n#> 83    83                         유평초등학교     12\n#> 84    84                           강남한의원     12\n#> 85    85                      태평1동주민센터     12\n#> 86    86                           삼부프라자     12\n#> 87    87                       쌍용예가아파트     14\n#> 88    88                         태평초등학교     12\n#> 89    89                       버드내초등학교     12\n#> 90    90                               유등교     12\n#> 91    91                         버드내네거리     10\n#> 92    92                           서대전농협     12\n#> 93    93                           서대전육교     12\n#> 94    94                         미리내아파트     12\n#> 95    95                       판암역 2번출구     12\n#> 96    96                       판암역 4번출구     12\n#> 97    97                         가오고등학교     11\n#> 98    98                       은어송마을입구     12\n#> 99    99              홈플러스 가오점(건너편)     13\n#> 100  100                      홈플러스 가오점     12\n#> 101  101                      은어송마을4단지     12\n#> 102  102                      은어송마을2단지      9\n#> 103  103                   대전남부여성가족원     15\n#> 104  104                       국립중앙과학관     10\n#> 105  105                   카이스트 서쪽 쪽문     15\n#> 106  106                      카이스트 다솜관     15\n#> 107  107                      카이스트 세종관     15\n#> 108  108                      목원대학교 입구     15\n#> 109  109                         서부농협본점     15\n#> 110  110           용문네거리(용문역 3번출구)      9\n#> 111  111                   순복음교회(수침교)     13\n#> 112  112                  나르메아파트 길건너     15\n#> 113  113                       가장교(성은사)     13\n#> 114  114                           태평동성당     13\n#> 115  115    한전 대전세종충남지역본부(건너편)     13\n#> 116  116                   홈플러스(동대전점)     13\n#> 117  117                           동부네거리     13\n#> 118  118                           복합터미널     13\n#> 119  119                      용전동 천주교회     13\n#> 120  120                    한국통신 용전지점     13\n#> 121  121                 용전네거리(하나은행)     12\n#> 122  122                      한남대후문 입구     13\n#> 123  123                           대덕경찰서     12\n#> 124  124                       목상동주민센터     12\n#> 125  125                           엑슬루타워     10\n#> 126  126                     신탄진동주민센터     10\n#> 127  127                             신탄진역     13\n#> 128  128                     과선교버스정류장     13\n#> 129  129                       신탄진고네거리     12\n#> 130  130                         용정초등학교     13\n#> 131  131                             에코공원     12\n#> 132  132                           삼정삼거리     13\n#> 133  133                       오룡역 7번출구     13\n#> 134  134                             중도일보      8\n#> 135  135                       서대전역네거리     13\n#> 136  136         중구청역 1번출구(중구청의회)     13\n#> 137  137                    센트럴파크(302동)     12\n#> 138  138                    센트럴파크(105동)     13\n#> 139  139               서대전네거리역 3번출구     13\n#> 140  140                    대전시민대학 정문     16\n#> 141  141                           대전세무서     13\n#> 142  142         선화참좋은아파트(유안타증권)     13\n#> 143  143                     중앙로역 3번출구     13\n#> 144  144                        타슈 관제센터     11\n#> 145  145             도안 호반베르디움(201동)     13\n#> 146  146             도안 호반베르디움(101동)     13\n#> 147  147              도안 계룡리슈빌(1704동)     13\n#> 148  148                 도안 금성백조(701동)     13\n#> 149  149          도안 트리풀시티5단지(509동)     13\n#> 150  150                  도안 우미린(1806동)     13\n#> 151  151                  우송대 정문(건너편)     14\n#> 152  152              대전역(대한통운 맞은편)     12\n#> 153  153                       대동역 4번출구     13\n#> 154  154                           한남오거리     13\n#> 155  155                      오정동 운암빌딩     12\n#> 156  156          중촌네거리(목동우체국 방면)     13\n#> 157  157                 중촌초등학교(건너편)     12\n#> 158  158                       전자통신연구원     12\n#> 159  159                       연구단지네거리     13\n#> 160  160               연구단지운동장(건너편)     11\n#> 161  161                연구단지 KT_G(건너편)     12\n#> 162  162                           송강체육관     13\n#> 163  163                         송강초등학교     13\n#> 164  164                     롯데마트(관평점)     12\n#> 165  165                           배울네거리     13\n#> 166  166                           인동네거리     11\n#> 167  167                           원동네거리      9\n#> 168  168                           성남네거리     10\n#> 169  169                           삼성네거리     13\n#> 170  170                         대전고오거리     11\n#> 171  171                           대흥네거리     11\n#> 172  172                           부사네거리     10\n#> 173  173                         무지개아파트     12\n#> 174  174          가수원네거리(전통시장 입구)     11\n#> 175  175                         건양대네거리     13\n#> 176  176                      관저2동주민센터     11\n#> 177  177                      관저1동주민센터     11\n#> 178  178                       노은역 3번출구     11\n#> 179  179                       반석역 1번출구     12\n#> 180  180               전민동주민센터(건너편)     10\n#> 181  181            엑스포아파트4단지(건너편)     10\n#> 182  182                          한밭대 입구     15\n#> 183  183                     현충원역 3번출구     15\n#> 184  184                   오정우체국(건너편)     11\n#> 185  185                      비래동 산림조합     12\n#> 186  186                          한밭수목원2     20\n#> 187  187                      양우건설 내안애     13\n#> 188  188                 구봉초등학교(건너편)     12\n#> 189  189                샘물타운아파트(301동)     12\n#> 190  190                  교촌제이파크(101동)     12\n#> 191  191                신흥마을아파트(102동)     12\n#> 192  192                         보문산오거리     12\n#> 193  193                       석교동주민센터     12\n#> 194  194                   호동우체국(건너편)     10\n#> 195  195                           한밭도서관     11\n#> 196  196                           대덕문화원     12\n#> 197  197                         농도원네거리     12\n#> 198  198                           도마네거리     12\n#> 199  199                      노은1동주민센터     12\n#> 200  200               지족역 2번출구(건너편)     13\n#> 201  201                      노은3동주민센터     13\n#> 202  202                         도안초등학교     11\n#> 203  203                        죽동 금성백조     13\n#> 204  204        낭월 오투그란데(108동 맞은편)     14\n#> 205  205                           대성삼거리     14\n#> 206  206                          대전대 후문     15\n#> 207  207                         가양초등학교     15\n#> 208  208                     회덕농협(건너편)     15\n#> 209  209                       동부평생교육원     15\n#> 210  210                     읍내동우편취급국     12\n#> 211  211                         석봉문화센터     15\n#> 212  212         대덕구보건소네거리(드림마트)     13\n#> 213  213                           송림네거리     14\n#> 214  214                    외삼네거리(603동)     15\n#> 215  215                         지족초등학교     15\n#> 216  216                       건양대학교병원     15\n#> 217  217                  초록마을아파트3단지     15\n#> 218  218                 충대병원입구(건너편)     15\n#> 219  219                   문화초등학교네거리     10\n#> 220  220                           머티네거리     15\n#> 221  221             갈마중학교(서부장로교회)     15\n#> 222  222                갈마아파트 한마음동산     15\n#> 223  223                   가양비래공원네거리     13\n#> 224  224                           정림삼거리     15\n#> 225  225                           대전보건대     14\n#> 226  226                    대정동 모다아울렛     15\n#> 227  227                      죽동 대원칸타빌     13\n#> 228  228      노은3지구 트리풀시티포레(105동)     13\n#> 229  229                 송림마을5단지(502동)     14\n#> 230  230            노은3지구 꿈에그린(201동)     14\n#> 231  231             덕명동 하우스토리(101동)     14\n#> 232  232                      온천2동주민센터     12\n#> 233  233               대덕산업단지 BRT정류장     14\n#> 234  234            와동 현대아파트(대덕의원)     14\n#> 235  235               비래동 금성백조(102동)     14\n#> 236  236   가양2동주민센터(건너편 한산아파트)     12\n#> 237  237             변동네거리(복음천하교회)     13\n#> 238  238             내동네거리(컨벤션웨딩홀)     14\n#> 239  239                       느리울중네거리     14\n#> 240  240                           서부경찰서     14\n#> 241  241               사정동 웰빙24시 사우나     14\n#> 242  242                             서대전역     12\n#> 243  243                    솔브릿지 국제대학     14\n#> 244  244                  우송대 서문(건너편)     13\n#> 245  245                         천동초등학교     13\n#> 246  246                용방마을아파트(301동)     14\n#> 247  247             목동 한사랑아파트(109동)     12\n#> 248  248                    옥계동 새마을금고     12\n#> 249  249                 관저 금성백조(114동)     13\n#> 250  250          노은3지구 영무예다음(102동)     13\n#> 251  251                     관저 더샵(109동)     13\n#> 252  252                    대전정부청사 남문     15\n#> 253  253                 가수원파출소(건너편)     15\n#> 254  254              대전과학기술대학교 정문     15\n#> 255  255                       용운국제수영장     15\n#> 256  256             신성동 수천이들 근린공원     15\n#> 257  257                       대전테크노파크     15\n#> 258  258                           천문대입구     12\n#> 259  259                           대덕대학교     14\n#> 260  260                오정농수산물 도매시장     15\n#> 261  261        도로교통공단(건너편 라도무스)     15\n#>                                     주소      lon      lat\n#> 1           대전광역시 유성구 도룡동 3-8 127.3894 36.37513\n#> 2          대전광역시 유성구 도룡동 4-19 127.3917 36.37502\n#> 3             대전광역시 서구 만년동 396 127.3878 36.36793\n#> 4             대전광역시 서구 만년동 401 127.3795 36.36799\n#> 5        대전광역시 서구 둔산2동 1521-10 127.3846 36.35531\n#> 6            대전광역시 서구 월평2동 266 127.3752 36.36170\n#> 7          대전광역시 서구 둔산2동 920-2 127.3861 36.35112\n#> 8           대전광역시 서구 둔산2동 1518 127.3846 36.35531\n#> 9            대전광역시 서구 월평2동 304 127.3752 36.36170\n#> 10            대전광역시 서구 만년동 300 127.3807 36.37037\n#> 11           대전광역시 서구 월평3동 301 127.3688 36.36005\n#> 12         대전광역시 서구 둔산2동 949-1 127.3846 36.35531\n#> 13           대전광역시 서구 둔산2동 911 127.3846 36.35531\n#> 14           대전광역시 서구 둔산2동 962 127.3846 36.35531\n#> 15        대전광역시 서구 둔산1동 1380-5 127.3899 36.35269\n#> 16          대전광역시 서구 둔산3동 1386 127.3989 36.35251\n#> 17          대전광역시 서구 둔산2동 1036 127.3846 36.35531\n#> 18          대전광역시 서구 둔산1동 1420 127.3899 36.35269\n#> 19          대전광역시 서구 둔산1동 1457 127.3899 36.35269\n#> 20        대전광역시 서구 둔산1동 1554-1 127.3865 36.35077\n#> 21           대전광역시 유성구 어은동 44 127.3588 36.37340\n#> 22           대전광역시 유성구 구성동 23 127.3639 36.36886\n#> 23        대전광역시 유성구 구성동 284-4 127.3637 36.36538\n#> 24           대전광역시 유성구 가정동 35 127.3694 36.37754\n#> 25          대전광역시 유성구 구성동 145 127.3677 36.37118\n#> 26         대전광역시 유성구 가정동 39-2 127.3785 36.37820\n#> 27          대전광역시 유성구 도룡동 3-1 127.3843 36.37736\n#> 28         대전광역시 유성구 도룡동 4-32 127.3917 36.37762\n#> 29             대전광역시 서구 만년동 13 127.3720 36.36684\n#> 30          대전광역시 서구 월평2동 2243 127.3752 36.36170\n#> 31        대전광역시 유성구 어은동 59-12 127.3574 36.36181\n#> 32          대전광역시 유성구 봉명동 669 127.3543 36.35847\n#> 33            대전광역시 서구 월평동 428 127.3618 36.35820\n#> 34            대전광역시 서구 월평동 604 127.3659 36.35768\n#> 35         대전광역시 서구 둔산동 1515-2 127.3754 36.35765\n#> 36           대전광역시 서구 둔산동 2156 127.3986 36.35578\n#> 37           대전광역시 서구 둔산동 1515 127.3980 36.35776\n#> 38           대전광역시 서구 월평동 1534 127.3546 36.35438\n#> 39          대전광역시 서구 월평1동 1498 127.3587 36.34959\n#> 40           대전광역시 서구 월평동 1543 127.3593 36.35383\n#> 41           대전광역시 서구 월평동 41-3 127.3632 36.35371\n#> 42         대전광역시 서구 갈마동 292-20 127.3677 36.35351\n#> 43           대전광역시 서구 둔산동 1526 127.3742 36.35410\n#> 44           대전광역시 서구 둔산동 1542 127.3830 36.35447\n#> 45           대전광역시 서구 둔산동 2161 127.3984 36.35125\n#> 46           대전광역시 서구 갈마동 1438 127.3772 36.34707\n#> 47           대전광역시 서구 둔산동 1257 127.3826 36.34880\n#> 48         대전광역시 서구 탄방동 1453-1 127.3849 36.34646\n#> 49            대전광역시 서구 탄방동 735 127.3898 36.34743\n#> 50           대전광역시 서구 탄방동 1447 127.3934 36.34708\n#> 51           대전광역시 서구 탄방동 1458 127.3986 36.34891\n#> 52          대전광역시 서구 탄방동 521-2 127.3811 36.34357\n#> 53           대전광역시 서구 탄방동 1452 127.3834 36.34341\n#> 54        대전광역시 유성구 장대동 312-3 127.3387 36.36481\n#> 55          대전광역시 유성구 궁동 258-8 127.3441 36.36255\n#> 56         대전광역시 유성구 궁동 376-1  127.3451 36.36183\n#> 57        대전광역시 유성구 봉명동 535-5 127.3419 36.35661\n#> 58         대전광역시 유성구 구암동 96-9 127.3311 36.35643\n#> 59        대전광역시 유성구 봉명동 552-5 127.3413 36.35432\n#> 60       대전광역시 유성구 봉명동 326-95 127.3461 36.35358\n#> 61       대전광역시 유성구 봉명동 328-22 127.3461 36.35358\n#> 62         대전광역시 유성구 봉명동 1024 127.3423 36.35040\n#> 63       대전광역시 유성구 상대동 138-67 127.3364 36.34766\n#> 64        대전광역시 유성구 상대동 425-9 127.3334 36.34712\n#> 65        대전광역시 유성구 봉명동 385-1 127.3461 36.35358\n#> 66          대전광역시 유성구 상대동 7-1 127.3328 36.34234\n#> 67          대전광역시 유성구 상대동 173 127.3328 36.34234\n#> 68      대전광역시 유성구 원신흥동 204-8 127.3451 36.33766\n#> 69         대전광역시 유성구 상대동 72-5 127.3328 36.34234\n#> 70      대전광역시 유성구 원신흥동 183-2 127.3451 36.33766\n#> 71            대전광역시 대덕구 법동 186 127.4290 36.37248\n#> 72            대전광역시 대덕구 법동 212 127.4294 36.36982\n#> 73          대전광역시 대덕구 법동 285-3 127.4285 36.36858\n#> 74       대전광역시 대덕구 중리동 370-24 127.4260 36.36640\n#> 75          대전광역시 대덕구 법동 202-4 127.4305 36.36688\n#> 76        대전광역시 대덕구 송촌동 446-3 127.4365 36.36731\n#> 77        대전광역시 대덕구 송촌동 461-2 127.4411 36.36839\n#> 78        대전광역시 대덕구 중리동 107-8 127.4315 36.36314\n#> 79       대전광역시 대덕구 중리동 118-12 127.4348 36.36225\n#> 80          대전광역시 대덕구 송촌동 539 127.4411 36.36356\n#> 81        대전광역시 대덕구 송촌동 192-2 127.4411 36.36481\n#> 82          대전광역시 대덕구 송촌동 510 127.4463 36.36716\n#> 83         대전광역시 중구 태평동 254-15 127.3985 36.33018\n#> 84       대전광역시 중구 태평2동 2409-21 127.3922 36.32368\n#> 85         대전광역시 중구 태평동 331-41 127.3966 36.32608\n#> 86        대전광역시 중구 태평2동 2395-1 127.3922 36.32368\n#> 87         대전광역시 중구 유천동 198-15 127.3985 36.32254\n#> 88          대전광역시 중구 유천동 319-1 127.3954 36.32160\n#> 89         대전광역시 중구 태평동 422-33 127.3921 36.31948\n#> 90         대전광역시 중구 유천동 338-13 127.3878 36.31572\n#> 91         대전광역시 중구 유천동 306-18 127.3926 36.31688\n#> 92          대전광역시 중구 유천동 308-7 127.3947 36.31806\n#> 93          대전광역시 중구 유천동 186-7 127.4003 36.31855\n#> 94         대전광역시 동구 판암동 451-10 127.4542 36.31702\n#> 95          대전광역시 동구 판암동 323-2 127.4591 36.31689\n#> 96         대전광역시 동구 판암동 303-25 127.4740 36.30346\n#> 97            대전광역시 동구 가오동 465 127.4556 36.31045\n#> 98          대전광역시 동구 가오동 217-4 127.4584 36.30766\n#> 99            대전광역시 동구 가오동 644 127.4570 36.30628\n#> 100           대전광역시 동구 가오동 552 127.4571 36.30740\n#> 101           대전광역시 동구 가오동 555 127.4618 36.30987\n#> 102         대전광역시 동구 대성동 130-1 127.4578 36.30375\n#> 103         대전광역시 동구 가오동 559-1 127.4594 36.30413\n#> 104        대전광역시 유성구 가정동 54-4 127.3781 36.37516\n#> 105          대전광역시 유성구 구성동 23 127.3639 36.36886\n#> 106          대전광역시 유성구 구성동 23 127.3639 36.36886\n#> 107          대전광역시 유성구 구성동 23 127.3639 36.36886\n#> 108       대전광역시 유성구 용계동 664-4 127.3376 36.33165\n#> 109          대전광역시 서구 탄방동 1455 127.3879 36.34240\n#> 110        대전광역시 서구 용문동 594-10 127.3921 36.33774\n#> 111        대전광역시 서구 용문동 249-11 127.3969 36.33587\n#> 112          대전광역시 서구 가장동 45-8 127.3854 36.33187\n#> 113          대전광역시 서구 가장동 31-7 127.3881 36.32862\n#> 114         대전광역시 중구 태평동 346-1 127.3969 36.32972\n#> 115   대전광역시 동구 용전동 45-1        127.4341 36.35725\n#> 116   대전광역시 동구 용전동 51-17       127.4365 36.35514\n#> 117   대전광역시 동구 용전동 111-26      127.4389 36.35061\n#> 118   대전광역시 동구 용전동 143-16      127.4348 36.34884\n#> 119   대전광역시 동구 용전동 144-1       127.4327 36.34939\n#> 120   대전광역시 동구 용전동 167-20      127.4322 36.35297\n#> 121   대전광역시 동구 용전동 44-2        127.4332 36.35787\n#> 122 대전광역시 대덕구 중리동 231-5       127.4236 36.35852\n#> 123        대전광역시 대덕구 문평동 83-2 127.4060 36.44680\n#> 124       대전광역시 대덕구 목상동 185-1 127.4132 36.44828\n#> 125         대전광역시 대덕구 석봉동 336 127.4245 36.44910\n#> 126     대전광역시 대덕구 신탄진동 120-1 127.4292 36.45166\n#> 127     대전광역시 대덕구 신탄진동 147-6 127.4290 36.44846\n#> 128      대전광역시 대덕구 평촌동 264-64 127.4260 36.43190\n#> 129     대전광역시 대덕구 신탄진동 149-6 127.4360 36.44833\n#> 130      대전광역시 대덕구 신탄진동 52-1 127.4365 36.45393\n#> 131     대전광역시 대덕구 신탄진동 산1-7 127.4444 36.44877\n#> 132      대전광역시 대덕구 삼정동 산27-4 127.4567 36.44950\n#> 133        대전광역시 중구 용두동 113-12 127.4058 36.32837\n#> 134         대전광역시 중구 오류동 175-3 127.4078 36.32592\n#> 135         대전광역시 중구 오류동 168-7 127.4059 36.32105\n#> 136         대전광역시 중구 대흥동 499-1 127.4214 36.32548\n#> 137         대전광역시 중구 문화동 1-256 127.4115 36.31869\n#> 138       대전광역시 중구 문화동 284-168 127.4066 36.31628\n#> 139         대전광역시 중구 오류동 152-5 127.4110 36.32265\n#> 140         대전광역시 중구 선화동 287-2 127.4204 36.32675\n#> 141         대전광역시 중구 선화동 184-1 127.4191 36.33068\n#> 142          대전광역시 중구 선화동 83-1 127.4223 36.33205\n#> 143         대전광역시 중구 대흥동 198-1 127.4260 36.32778\n#> 144        대전광역시 유성구 원촌동 76-1 127.4064 36.37924\n#> 145         대전광역시 유성구 봉명동 972 127.3461 36.35358\n#> 146         대전광역시 서구 가수원동 394 127.3517 36.30271\n#> 147          대전광역시 서구 도안동 1370 127.3441 36.31518\n#> 148      대전광역시 유성구 봉명동 1038-1 127.3447 36.34817\n#> 149         대전광역시 유성구 상대동 495 127.3389 36.34553\n#> 150        대전광역시 서구 가수원동 1363 127.3517 36.30271\n#> 151         대전광역시 동구 자양동 58-12 127.4478 36.33698\n#> 152           대전광역시 동구 정동 15-23 127.4319 36.33240\n#> 153        대전광역시 동구 대동 148-112  127.4424 36.32968\n#> 154         대전광역시 대덕구 오정동 731 127.4154 36.34988\n#> 155      대전광역시 대덕구 오정동 61-13  127.4112 36.35861\n#> 156        대전광역시 중구 중촌동 398-14 127.4149 36.33600\n#> 157           대전광역시 중구 중촌동 462 127.4111 36.34050\n#> 158      대전광역시 유성구 가정동 160-2  127.3682 36.38397\n#> 159      대전광역시 유성구 도룡동 393-2  127.3769 36.38539\n#> 160       대전광역시 유성구 신성동 108-2 127.3537 36.38541\n#> 161     대전광역시 유성구 신성동 산19-3  127.3491 36.38482\n#> 162      대전광역시 유성구 송강동 200-2  127.3869 36.43172\n#> 163         대전광역시 유성구 송강동 199 127.3823 36.43218\n#> 164        대전광역시 유성구 관평동 1286 127.3921 36.42900\n#> 165         대전광역시 유성구 관평동 912 127.3878 36.42192\n#> 166          대전광역시 동구 인동 116-18 127.4380 36.32200\n#> 167            대전광역시 동구 원동 36-1 127.4346 36.32706\n#> 168          대전광역시 동구 성남동 50-1 127.4354 36.34099\n#> 169         대전광역시 동구 삼성동 112-1 127.4252 36.33945\n#> 170         대전광역시 중구 대흥동 320-2 127.4247 36.32221\n#> 171         대전광역시 중구 대흥동 173-5 127.4285 36.32367\n#> 172         대전광역시 중구 부사동 129-5 127.4339 36.31345\n#> 173           대전광역시 서구 월평동 298 127.3769 36.35819\n#> 174      대전광역시 서구 가수원동 764-11 127.3530 36.30472\n#> 175           대전광역시 서구 관저동 999 127.3389 36.30340\n#> 176          대전광역시 서구 관저동 1104 127.3353 36.29923\n#> 177         대전광역시 서구 관저동 999-3 127.3373 36.30381\n#> 178       대전광역시 유성구 지족동 901-5 127.3184 36.37447\n#> 179         대전광역시 유성구 반석동 694 127.3149 36.39123\n#> 180       대전광역시 유성구 전민동 304-5 127.4018 36.39938\n#> 181       대전광역시 유성구 전민동 385-8 127.4046 36.39698\n#> 182        대전광역시 유성구 덕명동 16-1 127.3011 36.35092\n#> 183      대전광역시 유성구 구암동 424-67 127.3204 36.35971\n#> 184       대전광역시 대덕구 오정동 432-4 127.4158 36.35260\n#> 185       대전광역시 대덕구 비래동 123-7 127.4473 36.35504\n#> 186           대전광역시 서구 만년동 396 127.3878 36.36793\n#> 187     대전광역시 유성구 원신흥동 485-3 127.3485 36.34456\n#> 188          대전광역시 서구 관저동 1147 127.3297 36.29866\n#> 189         대전광역시 유성구 원내동 349 127.3201 36.29900\n#> 190         대전광역시 유성구 교촌동 617 127.3190 36.30455\n#> 191           대전광역시 동구 신흥동 212 127.4450 36.32031\n#> 192         대전광역시 중구 대사동 118-9 127.4255 36.31767\n#> 193          대전광역시 중구 석교동 12-7 127.4420 36.30992\n#> 194           대전광역시 중구 호동 10-14 127.4489 36.30502\n#> 195           대전광역시 중구 문화동 141 127.4093 36.31150\n#> 196       대전광역시 대덕구 읍내동 324-5 127.4206 36.37411\n#> 197         대전광역시 서구 도마동 65-56 127.3775 36.32032\n#> 198        대전광역시 서구 도마동 172-13 127.3793 36.31394\n#> 199         대전광역시 유성구 노은동 546 127.3185 36.36827\n#> 200       대전광역시 유성구 지족동 840-2 127.3191 36.38314\n#> 201      대전광역시 유성구 지족동 1024-2 127.3080 36.38680\n#> 202          대전광역시 서구 도안동 1364 127.3459 36.31965\n#> 203         대전광역시 유성구 죽동 108-4 127.3332 36.37694\n#> 204         대전광역시 동구 낭월동 215-2 127.4658 36.28516\n#> 205         대전광역시 동구 대성동 200-4 127.4603 36.29522\n#> 206           대전광역시 동구 용운동 631 127.4568 36.33461\n#> 207         대전광역시 동구 가양동 288-6 127.4426 36.34356\n#> 208       대전광역시 대덕구 읍내동 573-4 127.4271 36.37875\n#> 209         대전광역시 대덕구 법동 440-1 127.4283 36.37435\n#> 210         대전광역시 대덕구 읍내 215-5 127.4401 36.41228\n#> 211       대전광역시 대덕구 석봉동 184-1 127.4262 36.44715\n#> 212        대전광역시 대덕구 덕암동 12-1 127.4251 36.44383\n#> 213         대전광역시 유성구 하기동 516 127.3206 36.38727\n#> 214         대전광역시 유성구 반석동 613 127.3091 36.39428\n#> 215         대전광역시 유성구 지족동 853 127.3167 36.37918\n#> 216          대전광역시 서구 관저동 1900 127.3416 36.30435\n#> 217           대전광역시 서구 복수동 613 127.3790 36.30052\n#> 218        대전광역시 중구 대사동 248-29 127.4183 36.31578\n#> 219         대전광역시 중구 유천동 168-8 127.3996 36.31308\n#> 220         대전광역시 중구 산성동 160-9 127.3882 36.30913\n#> 221         대전광역시 서구 갈마동 338-1 127.3686 36.34949\n#> 222         대전광역시 서구 갈마동 392-6 127.3680 36.34413\n#> 223        대전광역시 대덕구 비래동 47-1 127.4553 36.35380\n#> 224           대전광역시 서구 정림동 497 127.3638 36.30708\n#> 225          대전광역시 동구 가양동 88-1 127.4521 36.34905\n#> 226       대전광역시 유성구 대정동 303-2 127.3190 36.31265\n#> 227         대전광역시 유성구 죽동 141-3 127.3332 36.37694\n#> 228        대전광역시 유성구 지족동 1043 127.3051 36.38051\n#> 229         대전광역시 유성구 하기동 545 127.3301 36.38990\n#> 230        대전광역시 유성구 지족동 1093 127.3049 36.38793\n#> 231         대전광역시 유성구 덕명동 525 127.3035 36.35640\n#> 232        대전광역시 유성구 장대동 40-2 127.3334 36.36527\n#> 233        대전광역시 대덕구 문평동 92-1 127.3950 36.43865\n#> 234         대전광역시 대덕구 와동 372-7 127.4231 36.40083\n#> 235       대전광역시 대덕구 비래동 130-7 127.4506 36.35797\n#> 236          대전광역시 동구 가양동 55-3 127.4482 36.34891\n#> 237            대전광역시 서구 변동 60-2 127.3781 36.32451\n#> 238            대전광역시 서구 변동 70-9 127.3768 36.33066\n#> 239          대전광역시 서구 관저동 1394 127.3425 36.29625\n#> 240        대전광역시 서구 복수동 292-14 127.3731 36.30871\n#> 241           대전광역시 중구 사정동 401 127.3849 36.29651\n#> 242         대전광역시 중구 오류동 170-1 127.4047 36.32212\n#> 243        대전광역시 동구 삼성동 151-13 127.4252 36.33945\n#> 244         대전광역시 동구 가양동 307-3 127.4460 36.34014\n#> 245          대전광역시 동구 천동 199-64 127.4439 36.31672\n#> 246           대전광역시 동구 용운동 460 127.4524 36.32644\n#> 247          대전광역시 중구 목동 112-12 127.4088 36.33370\n#> 248         대전광역시 중구 옥계동 46-15 127.4541 36.29886\n#> 249          대전광역시 서구 관저동 1574 127.3343 36.29599\n#> 250        대전광역시 유성구 지족동 1052 127.3070 36.37444\n#> 251          대전광역시 서구 관저동 1985 127.3293 36.29457\n#> 252          대전광역시 서구 둔산동 1517 127.3849 36.35950\n#> 253        대전광역시 서구 가수원동 1373 127.3516 36.30836\n#> 254         대전광역시 서구 복수동 257-5 127.3748 36.30454\n#> 255        대전광역시 동구 용운동 301-12 127.4648 36.32388\n#> 256         대전광역시 유성구 신성동 494 127.3537 36.39403\n#> 257         대전광역시 유성구 용산동 605 127.4053 36.42330\n#> 258         대전광역시 유성구 신성동 458 127.3546 36.38272\n#> 259            대전광역시 유성구 장동 48 127.3654 36.39067\n#> 260        대전광역시 대덕구 오정동 45-1 127.4073 36.35783\n#> 261       대전광역시 유성구 원신흥동 608 127.3329 36.33296\n\n\n\n4.3 c\n\nmap <- qmap(location = \"대전\", zoom = 12, maptype = \"roadmap\")\np <- map + geom_point(data = tasu_station, aes(x = lon, y = lat, colour=factor(거치대)),\n                      size = 3, alpha = 0.7)\np + ggtitle(\"타슈 대여소별 거치대 수\")"
  },
  {
    "objectID": "posts/Spatial_Info_Analysis final_exam/20191536_기말고사.html#라",
    "href": "posts/Spatial_Info_Analysis final_exam/20191536_기말고사.html#라",
    "title": "Spatial_Info_Analysis Tasu_Data",
    "section": "5 라",
    "text": "5 라\n\n5.1 a\n\noptions(scipen = 100)\n\n\n\n5.2 b\n\ntasu_2020$대여년월일 <- substr(tasu_2020$대여일시,1,8)\ntasu_2020 %>% head()\n#>   대여스테이션       대여일시 반납스테이션       반납일시 이동거리 대여년월일\n#> 1          174 20200101000100          224 20200101001137      640   20200101\n#> 2          174 20200101000109          224 20200101001210      640   20200101\n#> 3          117 20200101050735          115 20200101051922     1070   20200101\n#> 4          167 20200101051348           94 20200101054627     1490   20200101\n#> 5          203 20200101052002          203 20200101052058        0   20200101\n#> 6          167 20200101052101           94 20200101054640     1540   20200101\n\n\n\n5.3 c\n\ntop1_day <- \ntasu_2020 %>% group_by(대여년월일) %>% \n  summarise(최대대여반납수 = n())\n\ntop1_day <- top1_day %>% arrange(-최대대여반납수)\ntop1_day <- top1_day[1,]\n\ntop1_day\n#> # A tibble: 1 × 2\n#>   대여년월일 최대대여반납수\n#>   <chr>               <int>\n#> 1 20200913             4048\n\n\n\n5.4 d\n\ntasu_top1_day <- \n  tasu_2020 %>% filter(대여년월일 == 20200913)\n\ntasu_top1_day %>% dim()\n#> [1] 4048    6\n\n\n\n5.5 e\n\ntasu_top1_day <- \ntasu_top1_day %>% filter(대여스테이션 != 262,\n                         반납스테이션 != 262)\n\ntasu_top1_day %>% dim()\n#> [1] 3982    6\n\n\n\n5.6 f\n\nborrow_count <- \ntasu_top1_day %>% group_by(대여스테이션) %>% \n  summarise(대여스테이션별개수 = n()) %>% na.omit()\n\nborrow_count %>% head()\n#> # A tibble: 6 × 2\n#>   대여스테이션 대여스테이션별개수\n#>          <int>              <int>\n#> 1            1                 54\n#> 2            2                 60\n#> 3            3                281\n#> 4            4                 24\n#> 5            5                 53\n#> 6            6                 25\n\n\n\n5.7 g\n\nborrow_count\n#> # A tibble: 254 × 2\n#>    대여스테이션 대여스테이션별개수\n#>           <int>              <int>\n#>  1            1                 54\n#>  2            2                 60\n#>  3            3                281\n#>  4            4                 24\n#>  5            5                 53\n#>  6            6                 25\n#>  7            7                 12\n#>  8            8                 67\n#>  9           10                 24\n#> 10           11                 25\n#> # … with 244 more rows\n\ntasu_station <- \ntasu_station %>% merge(borrow_count, by.x=\"번호\", by.y=\"대여스테이션\",all=T)\n\ntasu_station[is.na(tasu_station)] <- 0\n\ntasu_station\n#>     번호                             대여소명 거치대\n#> 1      1           무역전시관입구(택시승강장)     14\n#> 2      2                       대전컨벤션센터     20\n#> 3      3                          한밭수목원1     19\n#> 4      4         초원아파트(104동 버스정류장)     12\n#> 5      5          둔산대공원 입구(버스정류장)     13\n#> 6      6                     백합네거리(농협)     12\n#> 7      7              정부청사 입구(대덕대로)     13\n#> 8      8                정부청사 입구(샘머리)     12\n#> 9      9             황실아파트(성룡초등학교)     12\n#> 10    10            만년동 KBS 부근(기업은행)     12\n#> 11    11          누리아파트(후문 버스정류장)     12\n#> 12    12                   정부청사역 4번출구     13\n#> 13    13              삼천중학교(정문 맞은편)     12\n#> 14    14                        둔산 하이마트     20\n#> 15    15       둔산 홈플러스(법원 버스정류장)     13\n#> 16    16                    국화아파트(501동)     12\n#> 17    17                             타임월드     20\n#> 18    18                             대전시청     17\n#> 19    19           현대아이텔(시청역 6번출구)     13\n#> 20    20            크로바아파트(정문 맞은편)     12\n#> 21    21                    카이스트 학사식당     28\n#> 22    22                  카이스트 창의학습관     28\n#> 23    23                        카이스트 정문     14\n#> 24    24                           화폐박물관     12\n#> 25    25                        카이스트 후문     13\n#> 26    26                엑스포과학공원 주차장     13\n#> 27    27                       엑스포과학공원     13\n#> 28    28                    스마트시티(201동)     14\n#> 29    29                       만년동주민센터     16\n#> 30    30                 선사유적지공용주차장     12\n#> 31    31                             유성구청     20\n#> 32    32                     홈플러스(유성점)     20\n#> 33    33               월평역 2번출구(육교밑)     20\n#> 34    34                  진달래아파트(107동)     13\n#> 35    35                       갈마역 2번출구     13\n#> 36    36                      가람아파트(3동)     13\n#> 37    37                 수정타운아파트(13동)     13\n#> 38    38                       갑천역 1번출구     13\n#> 39    39                             패션월드     13\n#> 40    40                             월평타운     13\n#> 41    41                             대전일보     13\n#> 42    42                           갈마네거리     12\n#> 43    43                             둔산여고     13\n#> 44    44                         을지대학병원     13\n#> 45    45                      청솔아파트(9동)     13\n#> 46    46                           경성큰마을     13\n#> 47    47                         오페라웨딩홀     12\n#> 48    48 대전종합고용지원센터(탄방역 4번출구)     12\n#> 49    49                       한국농어촌공사     12\n#> 50    50                         한가람아파트     12\n#> 51    51                   남선공원종합체육관     10\n#> 52    52                           유승기업사     12\n#> 53    53                         탄방지하차도     12\n#> 54    54                           궁동네거리     13\n#> 55    55                충대정문오거리1(정문)     20\n#> 56    56              충대정문오거리2(건너편)     18\n#> 57    57                         한진오피스텔     13\n#> 58    58                       구암역 3번출구     13\n#> 59    59                   유성온천역 6번출구     10\n#> 60    60                   유성온천역 3번출구     13\n#> 61    61                     만년교(코젤병원)     16\n#> 62    62                    도안휴먼시아1단지     10\n#> 63    63                         상대초등학교     13\n#> 64    64                 유성생명과학고등학교     13\n#> 65    65                      도안 센트롤시티     15\n#> 66    66                   도안 휴먼시아6단지     11\n#> 67    67                      도안 한라비발디     15\n#> 68    68                도안 신안인스빌리베라     13\n#> 69    69   도안 트리풀시티9단지(504동 맞은편)     13\n#> 70    70                  도안 휴먼시아10단지     14\n#> 71    71                       대전지방국세청     12\n#> 72    72                       대전동부경찰서     12\n#> 73    73                         대전중앙병원     10\n#> 74    74                             중리시장     12\n#> 75    75                           보람아파트     12\n#> 76    76                         선비마을입구     12\n#> 77    77                        선비마을3단지     12\n#> 78    78                   중리동(하나로병원)     12\n#> 79    79                   수도시설관리사업소     12\n#> 80    80                           송촌소방서     12\n#> 81    81                           동춘당공원     14\n#> 82    82                        선비마을5단지     12\n#> 83    83                         유평초등학교     12\n#> 84    84                           강남한의원     12\n#> 85    85                      태평1동주민센터     12\n#> 86    86                           삼부프라자     12\n#> 87    87                       쌍용예가아파트     14\n#> 88    88                         태평초등학교     12\n#> 89    89                       버드내초등학교     12\n#> 90    90                               유등교     12\n#> 91    91                         버드내네거리     10\n#> 92    92                           서대전농협     12\n#> 93    93                           서대전육교     12\n#> 94    94                         미리내아파트     12\n#> 95    95                       판암역 2번출구     12\n#> 96    96                       판암역 4번출구     12\n#> 97    97                         가오고등학교     11\n#> 98    98                       은어송마을입구     12\n#> 99    99              홈플러스 가오점(건너편)     13\n#> 100  100                      홈플러스 가오점     12\n#> 101  101                      은어송마을4단지     12\n#> 102  102                      은어송마을2단지      9\n#> 103  103                   대전남부여성가족원     15\n#> 104  104                       국립중앙과학관     10\n#> 105  105                   카이스트 서쪽 쪽문     15\n#> 106  106                      카이스트 다솜관     15\n#> 107  107                      카이스트 세종관     15\n#> 108  108                      목원대학교 입구     15\n#> 109  109                         서부농협본점     15\n#> 110  110           용문네거리(용문역 3번출구)      9\n#> 111  111                   순복음교회(수침교)     13\n#> 112  112                  나르메아파트 길건너     15\n#> 113  113                       가장교(성은사)     13\n#> 114  114                           태평동성당     13\n#> 115  115    한전 대전세종충남지역본부(건너편)     13\n#> 116  116                   홈플러스(동대전점)     13\n#> 117  117                           동부네거리     13\n#> 118  118                           복합터미널     13\n#> 119  119                      용전동 천주교회     13\n#> 120  120                    한국통신 용전지점     13\n#> 121  121                 용전네거리(하나은행)     12\n#> 122  122                      한남대후문 입구     13\n#> 123  123                           대덕경찰서     12\n#> 124  124                       목상동주민센터     12\n#> 125  125                           엑슬루타워     10\n#> 126  126                     신탄진동주민센터     10\n#> 127  127                             신탄진역     13\n#> 128  128                     과선교버스정류장     13\n#> 129  129                       신탄진고네거리     12\n#> 130  130                         용정초등학교     13\n#> 131  131                             에코공원     12\n#> 132  132                           삼정삼거리     13\n#> 133  133                       오룡역 7번출구     13\n#> 134  134                             중도일보      8\n#> 135  135                       서대전역네거리     13\n#> 136  136         중구청역 1번출구(중구청의회)     13\n#> 137  137                    센트럴파크(302동)     12\n#> 138  138                    센트럴파크(105동)     13\n#> 139  139               서대전네거리역 3번출구     13\n#> 140  140                    대전시민대학 정문     16\n#> 141  141                           대전세무서     13\n#> 142  142         선화참좋은아파트(유안타증권)     13\n#> 143  143                     중앙로역 3번출구     13\n#> 144  144                        타슈 관제센터     11\n#> 145  145             도안 호반베르디움(201동)     13\n#> 146  146             도안 호반베르디움(101동)     13\n#> 147  147              도안 계룡리슈빌(1704동)     13\n#> 148  148                 도안 금성백조(701동)     13\n#> 149  149          도안 트리풀시티5단지(509동)     13\n#> 150  150                  도안 우미린(1806동)     13\n#> 151  151                  우송대 정문(건너편)     14\n#> 152  152              대전역(대한통운 맞은편)     12\n#> 153  153                       대동역 4번출구     13\n#> 154  154                           한남오거리     13\n#> 155  155                      오정동 운암빌딩     12\n#> 156  156          중촌네거리(목동우체국 방면)     13\n#> 157  157                 중촌초등학교(건너편)     12\n#> 158  158                       전자통신연구원     12\n#> 159  159                       연구단지네거리     13\n#> 160  160               연구단지운동장(건너편)     11\n#> 161  161                연구단지 KT_G(건너편)     12\n#> 162  162                           송강체육관     13\n#> 163  163                         송강초등학교     13\n#> 164  164                     롯데마트(관평점)     12\n#> 165  165                           배울네거리     13\n#> 166  166                           인동네거리     11\n#> 167  167                           원동네거리      9\n#> 168  168                           성남네거리     10\n#> 169  169                           삼성네거리     13\n#> 170  170                         대전고오거리     11\n#> 171  171                           대흥네거리     11\n#> 172  172                           부사네거리     10\n#> 173  173                         무지개아파트     12\n#> 174  174          가수원네거리(전통시장 입구)     11\n#> 175  175                         건양대네거리     13\n#> 176  176                      관저2동주민센터     11\n#> 177  177                      관저1동주민센터     11\n#> 178  178                       노은역 3번출구     11\n#> 179  179                       반석역 1번출구     12\n#> 180  180               전민동주민센터(건너편)     10\n#> 181  181            엑스포아파트4단지(건너편)     10\n#> 182  182                          한밭대 입구     15\n#> 183  183                     현충원역 3번출구     15\n#> 184  184                   오정우체국(건너편)     11\n#> 185  185                      비래동 산림조합     12\n#> 186  186                          한밭수목원2     20\n#> 187  187                      양우건설 내안애     13\n#> 188  188                 구봉초등학교(건너편)     12\n#> 189  189                샘물타운아파트(301동)     12\n#> 190  190                  교촌제이파크(101동)     12\n#> 191  191                신흥마을아파트(102동)     12\n#> 192  192                         보문산오거리     12\n#> 193  193                       석교동주민센터     12\n#> 194  194                   호동우체국(건너편)     10\n#> 195  195                           한밭도서관     11\n#> 196  196                           대덕문화원     12\n#> 197  197                         농도원네거리     12\n#> 198  198                           도마네거리     12\n#> 199  199                      노은1동주민센터     12\n#> 200  200               지족역 2번출구(건너편)     13\n#> 201  201                      노은3동주민센터     13\n#> 202  202                         도안초등학교     11\n#> 203  203                        죽동 금성백조     13\n#> 204  204        낭월 오투그란데(108동 맞은편)     14\n#> 205  205                           대성삼거리     14\n#> 206  206                          대전대 후문     15\n#> 207  207                         가양초등학교     15\n#> 208  208                     회덕농협(건너편)     15\n#> 209  209                       동부평생교육원     15\n#> 210  210                     읍내동우편취급국     12\n#> 211  211                         석봉문화센터     15\n#> 212  212         대덕구보건소네거리(드림마트)     13\n#> 213  213                           송림네거리     14\n#> 214  214                    외삼네거리(603동)     15\n#> 215  215                         지족초등학교     15\n#> 216  216                       건양대학교병원     15\n#> 217  217                  초록마을아파트3단지     15\n#> 218  218                 충대병원입구(건너편)     15\n#> 219  219                   문화초등학교네거리     10\n#> 220  220                           머티네거리     15\n#> 221  221             갈마중학교(서부장로교회)     15\n#> 222  222                갈마아파트 한마음동산     15\n#> 223  223                   가양비래공원네거리     13\n#> 224  224                           정림삼거리     15\n#> 225  225                           대전보건대     14\n#> 226  226                    대정동 모다아울렛     15\n#> 227  227                      죽동 대원칸타빌     13\n#> 228  228      노은3지구 트리풀시티포레(105동)     13\n#> 229  229                 송림마을5단지(502동)     14\n#> 230  230            노은3지구 꿈에그린(201동)     14\n#> 231  231             덕명동 하우스토리(101동)     14\n#> 232  232                      온천2동주민센터     12\n#> 233  233               대덕산업단지 BRT정류장     14\n#> 234  234            와동 현대아파트(대덕의원)     14\n#> 235  235               비래동 금성백조(102동)     14\n#> 236  236   가양2동주민센터(건너편 한산아파트)     12\n#> 237  237             변동네거리(복음천하교회)     13\n#> 238  238             내동네거리(컨벤션웨딩홀)     14\n#> 239  239                       느리울중네거리     14\n#> 240  240                           서부경찰서     14\n#> 241  241               사정동 웰빙24시 사우나     14\n#> 242  242                             서대전역     12\n#> 243  243                    솔브릿지 국제대학     14\n#> 244  244                  우송대 서문(건너편)     13\n#> 245  245                         천동초등학교     13\n#> 246  246                용방마을아파트(301동)     14\n#> 247  247             목동 한사랑아파트(109동)     12\n#> 248  248                    옥계동 새마을금고     12\n#> 249  249                 관저 금성백조(114동)     13\n#> 250  250          노은3지구 영무예다음(102동)     13\n#> 251  251                     관저 더샵(109동)     13\n#> 252  252                    대전정부청사 남문     15\n#> 253  253                 가수원파출소(건너편)     15\n#> 254  254              대전과학기술대학교 정문     15\n#> 255  255                       용운국제수영장     15\n#> 256  256             신성동 수천이들 근린공원     15\n#> 257  257                       대전테크노파크     15\n#> 258  258                           천문대입구     12\n#> 259  259                           대덕대학교     14\n#> 260  260                오정농수산물 도매시장     15\n#> 261  261        도로교통공단(건너편 라도무스)     15\n#>                                     주소      lon      lat 대여스테이션별개수\n#> 1           대전광역시 유성구 도룡동 3-8 127.3894 36.37513                 54\n#> 2          대전광역시 유성구 도룡동 4-19 127.3917 36.37502                 60\n#> 3             대전광역시 서구 만년동 396 127.3878 36.36793                281\n#> 4             대전광역시 서구 만년동 401 127.3795 36.36799                 24\n#> 5        대전광역시 서구 둔산2동 1521-10 127.3846 36.35531                 53\n#> 6            대전광역시 서구 월평2동 266 127.3752 36.36170                 25\n#> 7          대전광역시 서구 둔산2동 920-2 127.3861 36.35112                 12\n#> 8           대전광역시 서구 둔산2동 1518 127.3846 36.35531                 67\n#> 9            대전광역시 서구 월평2동 304 127.3752 36.36170                  0\n#> 10            대전광역시 서구 만년동 300 127.3807 36.37037                 24\n#> 11           대전광역시 서구 월평3동 301 127.3688 36.36005                 25\n#> 12         대전광역시 서구 둔산2동 949-1 127.3846 36.35531                 25\n#> 13           대전광역시 서구 둔산2동 911 127.3846 36.35531                 18\n#> 14           대전광역시 서구 둔산2동 962 127.3846 36.35531                 29\n#> 15        대전광역시 서구 둔산1동 1380-5 127.3899 36.35269                 24\n#> 16          대전광역시 서구 둔산3동 1386 127.3989 36.35251                 16\n#> 17          대전광역시 서구 둔산2동 1036 127.3846 36.35531                 52\n#> 18          대전광역시 서구 둔산1동 1420 127.3899 36.35269                 29\n#> 19          대전광역시 서구 둔산1동 1457 127.3899 36.35269                 32\n#> 20        대전광역시 서구 둔산1동 1554-1 127.3865 36.35077                 13\n#> 21           대전광역시 유성구 어은동 44 127.3588 36.37340                  6\n#> 22           대전광역시 유성구 구성동 23 127.3639 36.36886                 12\n#> 23        대전광역시 유성구 구성동 284-4 127.3637 36.36538                  7\n#> 24           대전광역시 유성구 가정동 35 127.3694 36.37754                  7\n#> 25          대전광역시 유성구 구성동 145 127.3677 36.37118                 10\n#> 26         대전광역시 유성구 가정동 39-2 127.3785 36.37820                 15\n#> 27          대전광역시 유성구 도룡동 3-1 127.3843 36.37736                 17\n#> 28         대전광역시 유성구 도룡동 4-32 127.3917 36.37762                 26\n#> 29             대전광역시 서구 만년동 13 127.3720 36.36684                 34\n#> 30          대전광역시 서구 월평2동 2243 127.3752 36.36170                 42\n#> 31        대전광역시 유성구 어은동 59-12 127.3574 36.36181                 97\n#> 32          대전광역시 유성구 봉명동 669 127.3543 36.35847                 50\n#> 33            대전광역시 서구 월평동 428 127.3618 36.35820                 41\n#> 34            대전광역시 서구 월평동 604 127.3659 36.35768                 24\n#> 35         대전광역시 서구 둔산동 1515-2 127.3754 36.35765                 19\n#> 36           대전광역시 서구 둔산동 2156 127.3986 36.35578                  7\n#> 37           대전광역시 서구 둔산동 1515 127.3980 36.35776                 14\n#> 38           대전광역시 서구 월평동 1534 127.3546 36.35438                 13\n#> 39          대전광역시 서구 월평1동 1498 127.3587 36.34959                  7\n#> 40           대전광역시 서구 월평동 1543 127.3593 36.35383                  1\n#> 41           대전광역시 서구 월평동 41-3 127.3632 36.35371                  9\n#> 42         대전광역시 서구 갈마동 292-20 127.3677 36.35351                 14\n#> 43           대전광역시 서구 둔산동 1526 127.3742 36.35410                 36\n#> 44           대전광역시 서구 둔산동 1542 127.3830 36.35447                 10\n#> 45           대전광역시 서구 둔산동 2161 127.3984 36.35125                 22\n#> 46           대전광역시 서구 갈마동 1438 127.3772 36.34707                 29\n#> 47           대전광역시 서구 둔산동 1257 127.3826 36.34880                 11\n#> 48         대전광역시 서구 탄방동 1453-1 127.3849 36.34646                 13\n#> 49            대전광역시 서구 탄방동 735 127.3898 36.34743                 25\n#> 50           대전광역시 서구 탄방동 1447 127.3934 36.34708                 15\n#> 51           대전광역시 서구 탄방동 1458 127.3986 36.34891                 23\n#> 52          대전광역시 서구 탄방동 521-2 127.3811 36.34357                 10\n#> 53           대전광역시 서구 탄방동 1452 127.3834 36.34341                  9\n#> 54        대전광역시 유성구 장대동 312-3 127.3387 36.36481                  0\n#> 55          대전광역시 유성구 궁동 258-8 127.3441 36.36255                 46\n#> 56         대전광역시 유성구 궁동 376-1  127.3451 36.36183                 55\n#> 57        대전광역시 유성구 봉명동 535-5 127.3419 36.35661                 45\n#> 58         대전광역시 유성구 구암동 96-9 127.3311 36.35643                 10\n#> 59        대전광역시 유성구 봉명동 552-5 127.3413 36.35432                 25\n#> 60       대전광역시 유성구 봉명동 326-95 127.3461 36.35358                 23\n#> 61       대전광역시 유성구 봉명동 328-22 127.3461 36.35358                 12\n#> 62         대전광역시 유성구 봉명동 1024 127.3423 36.35040                  6\n#> 63       대전광역시 유성구 상대동 138-67 127.3364 36.34766                 10\n#> 64        대전광역시 유성구 상대동 425-9 127.3334 36.34712                  7\n#> 65        대전광역시 유성구 봉명동 385-1 127.3461 36.35358                  5\n#> 66          대전광역시 유성구 상대동 7-1 127.3328 36.34234                 18\n#> 67          대전광역시 유성구 상대동 173 127.3328 36.34234                  8\n#> 68      대전광역시 유성구 원신흥동 204-8 127.3451 36.33766                 14\n#> 69         대전광역시 유성구 상대동 72-5 127.3328 36.34234                 15\n#> 70      대전광역시 유성구 원신흥동 183-2 127.3451 36.33766                 29\n#> 71            대전광역시 대덕구 법동 186 127.4290 36.37248                 12\n#> 72            대전광역시 대덕구 법동 212 127.4294 36.36982                 11\n#> 73          대전광역시 대덕구 법동 285-3 127.4285 36.36858                 12\n#> 74       대전광역시 대덕구 중리동 370-24 127.4260 36.36640                  0\n#> 75          대전광역시 대덕구 법동 202-4 127.4305 36.36688                  3\n#> 76        대전광역시 대덕구 송촌동 446-3 127.4365 36.36731                  1\n#> 77        대전광역시 대덕구 송촌동 461-2 127.4411 36.36839                  3\n#> 78        대전광역시 대덕구 중리동 107-8 127.4315 36.36314                  7\n#> 79       대전광역시 대덕구 중리동 118-12 127.4348 36.36225                  3\n#> 80          대전광역시 대덕구 송촌동 539 127.4411 36.36356                  7\n#> 81        대전광역시 대덕구 송촌동 192-2 127.4411 36.36481                 18\n#> 82          대전광역시 대덕구 송촌동 510 127.4463 36.36716                  7\n#> 83         대전광역시 중구 태평동 254-15 127.3985 36.33018                 14\n#> 84       대전광역시 중구 태평2동 2409-21 127.3922 36.32368                  2\n#> 85         대전광역시 중구 태평동 331-41 127.3966 36.32608                  5\n#> 86        대전광역시 중구 태평2동 2395-1 127.3922 36.32368                  9\n#> 87         대전광역시 중구 유천동 198-15 127.3985 36.32254                  9\n#> 88          대전광역시 중구 유천동 319-1 127.3954 36.32160                  4\n#> 89         대전광역시 중구 태평동 422-33 127.3921 36.31948                 13\n#> 90         대전광역시 중구 유천동 338-13 127.3878 36.31572                 19\n#> 91         대전광역시 중구 유천동 306-18 127.3926 36.31688                  8\n#> 92          대전광역시 중구 유천동 308-7 127.3947 36.31806                  3\n#> 93          대전광역시 중구 유천동 186-7 127.4003 36.31855                 14\n#> 94         대전광역시 동구 판암동 451-10 127.4542 36.31702                  4\n#> 95          대전광역시 동구 판암동 323-2 127.4591 36.31689                  3\n#> 96         대전광역시 동구 판암동 303-25 127.4740 36.30346                  8\n#> 97            대전광역시 동구 가오동 465 127.4556 36.31045                  4\n#> 98          대전광역시 동구 가오동 217-4 127.4584 36.30766                  4\n#> 99            대전광역시 동구 가오동 644 127.4570 36.30628                  3\n#> 100           대전광역시 동구 가오동 552 127.4571 36.30740                  2\n#> 101           대전광역시 동구 가오동 555 127.4618 36.30987                  1\n#> 102         대전광역시 동구 대성동 130-1 127.4578 36.30375                  3\n#> 103         대전광역시 동구 가오동 559-1 127.4594 36.30413                  4\n#> 104        대전광역시 유성구 가정동 54-4 127.3781 36.37516                 10\n#> 105          대전광역시 유성구 구성동 23 127.3639 36.36886                 27\n#> 106          대전광역시 유성구 구성동 23 127.3639 36.36886                  6\n#> 107          대전광역시 유성구 구성동 23 127.3639 36.36886                  4\n#> 108       대전광역시 유성구 용계동 664-4 127.3376 36.33165                 25\n#> 109          대전광역시 서구 탄방동 1455 127.3879 36.34240                 30\n#> 110        대전광역시 서구 용문동 594-10 127.3921 36.33774                 24\n#> 111        대전광역시 서구 용문동 249-11 127.3969 36.33587                 18\n#> 112          대전광역시 서구 가장동 45-8 127.3854 36.33187                 21\n#> 113          대전광역시 서구 가장동 31-7 127.3881 36.32862                 19\n#> 114         대전광역시 중구 태평동 346-1 127.3969 36.32972                  0\n#> 115   대전광역시 동구 용전동 45-1        127.4341 36.35725                  7\n#> 116   대전광역시 동구 용전동 51-17       127.4365 36.35514                  3\n#> 117   대전광역시 동구 용전동 111-26      127.4389 36.35061                 13\n#> 118   대전광역시 동구 용전동 143-16      127.4348 36.34884                 13\n#> 119   대전광역시 동구 용전동 144-1       127.4327 36.34939                  1\n#> 120   대전광역시 동구 용전동 167-20      127.4322 36.35297                 11\n#> 121   대전광역시 동구 용전동 44-2        127.4332 36.35787                 10\n#> 122 대전광역시 대덕구 중리동 231-5       127.4236 36.35852                 19\n#> 123        대전광역시 대덕구 문평동 83-2 127.4060 36.44680                  0\n#> 124       대전광역시 대덕구 목상동 185-1 127.4132 36.44828                  5\n#> 125         대전광역시 대덕구 석봉동 336 127.4245 36.44910                  6\n#> 126     대전광역시 대덕구 신탄진동 120-1 127.4292 36.45166                  3\n#> 127     대전광역시 대덕구 신탄진동 147-6 127.4290 36.44846                  4\n#> 128      대전광역시 대덕구 평촌동 264-64 127.4260 36.43190                  3\n#> 129     대전광역시 대덕구 신탄진동 149-6 127.4360 36.44833                  2\n#> 130      대전광역시 대덕구 신탄진동 52-1 127.4365 36.45393                  6\n#> 131     대전광역시 대덕구 신탄진동 산1-7 127.4444 36.44877                  6\n#> 132      대전광역시 대덕구 삼정동 산27-4 127.4567 36.44950                  7\n#> 133        대전광역시 중구 용두동 113-12 127.4058 36.32837                 10\n#> 134         대전광역시 중구 오류동 175-3 127.4078 36.32592                  3\n#> 135         대전광역시 중구 오류동 168-7 127.4059 36.32105                 11\n#> 136         대전광역시 중구 대흥동 499-1 127.4214 36.32548                  8\n#> 137         대전광역시 중구 문화동 1-256 127.4115 36.31869                  7\n#> 138       대전광역시 중구 문화동 284-168 127.4066 36.31628                  4\n#> 139         대전광역시 중구 오류동 152-5 127.4110 36.32265                 18\n#> 140         대전광역시 중구 선화동 287-2 127.4204 36.32675                 10\n#> 141         대전광역시 중구 선화동 184-1 127.4191 36.33068                  1\n#> 142          대전광역시 중구 선화동 83-1 127.4223 36.33205                  7\n#> 143         대전광역시 중구 대흥동 198-1 127.4260 36.32778                 30\n#> 144        대전광역시 유성구 원촌동 76-1 127.4064 36.37924                 35\n#> 145         대전광역시 유성구 봉명동 972 127.3461 36.35358                 14\n#> 146         대전광역시 서구 가수원동 394 127.3517 36.30271                 16\n#> 147          대전광역시 서구 도안동 1370 127.3441 36.31518                  5\n#> 148      대전광역시 유성구 봉명동 1038-1 127.3447 36.34817                  8\n#> 149         대전광역시 유성구 상대동 495 127.3389 36.34553                  7\n#> 150        대전광역시 서구 가수원동 1363 127.3517 36.30271                 18\n#> 151         대전광역시 동구 자양동 58-12 127.4478 36.33698                 11\n#> 152           대전광역시 동구 정동 15-23 127.4319 36.33240                 15\n#> 153        대전광역시 동구 대동 148-112  127.4424 36.32968                 15\n#> 154         대전광역시 대덕구 오정동 731 127.4154 36.34988                  8\n#> 155      대전광역시 대덕구 오정동 61-13  127.4112 36.35861                 15\n#> 156        대전광역시 중구 중촌동 398-14 127.4149 36.33600                 10\n#> 157           대전광역시 중구 중촌동 462 127.4111 36.34050                 16\n#> 158      대전광역시 유성구 가정동 160-2  127.3682 36.38397                  0\n#> 159      대전광역시 유성구 도룡동 393-2  127.3769 36.38539                 23\n#> 160       대전광역시 유성구 신성동 108-2 127.3537 36.38541                 15\n#> 161     대전광역시 유성구 신성동 산19-3  127.3491 36.38482                 14\n#> 162      대전광역시 유성구 송강동 200-2  127.3869 36.43172                 12\n#> 163         대전광역시 유성구 송강동 199 127.3823 36.43218                 11\n#> 164        대전광역시 유성구 관평동 1286 127.3921 36.42900                  2\n#> 165         대전광역시 유성구 관평동 912 127.3878 36.42192                 22\n#> 166          대전광역시 동구 인동 116-18 127.4380 36.32200                  2\n#> 167            대전광역시 동구 원동 36-1 127.4346 36.32706                 23\n#> 168          대전광역시 동구 성남동 50-1 127.4354 36.34099                  2\n#> 169         대전광역시 동구 삼성동 112-1 127.4252 36.33945                  4\n#> 170         대전광역시 중구 대흥동 320-2 127.4247 36.32221                  4\n#> 171         대전광역시 중구 대흥동 173-5 127.4285 36.32367                 13\n#> 172         대전광역시 중구 부사동 129-5 127.4339 36.31345                  7\n#> 173           대전광역시 서구 월평동 298 127.3769 36.35819                  8\n#> 174      대전광역시 서구 가수원동 764-11 127.3530 36.30472                 24\n#> 175           대전광역시 서구 관저동 999 127.3389 36.30340                 19\n#> 176          대전광역시 서구 관저동 1104 127.3353 36.29923                 19\n#> 177         대전광역시 서구 관저동 999-3 127.3373 36.30381                 11\n#> 178       대전광역시 유성구 지족동 901-5 127.3184 36.37447                 33\n#> 179         대전광역시 유성구 반석동 694 127.3149 36.39123                 31\n#> 180       대전광역시 유성구 전민동 304-5 127.4018 36.39938                 19\n#> 181       대전광역시 유성구 전민동 385-8 127.4046 36.39698                 32\n#> 182        대전광역시 유성구 덕명동 16-1 127.3011 36.35092                 23\n#> 183      대전광역시 유성구 구암동 424-67 127.3204 36.35971                  4\n#> 184       대전광역시 대덕구 오정동 432-4 127.4158 36.35260                  1\n#> 185       대전광역시 대덕구 비래동 123-7 127.4473 36.35504                 11\n#> 186           대전광역시 서구 만년동 396 127.3878 36.36793                240\n#> 187     대전광역시 유성구 원신흥동 485-3 127.3485 36.34456                 17\n#> 188          대전광역시 서구 관저동 1147 127.3297 36.29866                  6\n#> 189         대전광역시 유성구 원내동 349 127.3201 36.29900                  8\n#> 190         대전광역시 유성구 교촌동 617 127.3190 36.30455                  8\n#> 191           대전광역시 동구 신흥동 212 127.4450 36.32031                  5\n#> 192         대전광역시 중구 대사동 118-9 127.4255 36.31767                  7\n#> 193          대전광역시 중구 석교동 12-7 127.4420 36.30992                  6\n#> 194           대전광역시 중구 호동 10-14 127.4489 36.30502                  3\n#> 195           대전광역시 중구 문화동 141 127.4093 36.31150                  3\n#> 196       대전광역시 대덕구 읍내동 324-5 127.4206 36.37411                  1\n#> 197         대전광역시 서구 도마동 65-56 127.3775 36.32032                 14\n#> 198        대전광역시 서구 도마동 172-13 127.3793 36.31394                 12\n#> 199         대전광역시 유성구 노은동 546 127.3185 36.36827                 17\n#> 200       대전광역시 유성구 지족동 840-2 127.3191 36.38314                 16\n#> 201      대전광역시 유성구 지족동 1024-2 127.3080 36.38680                 17\n#> 202          대전광역시 서구 도안동 1364 127.3459 36.31965                  9\n#> 203         대전광역시 유성구 죽동 108-4 127.3332 36.37694                 22\n#> 204         대전광역시 동구 낭월동 215-2 127.4658 36.28516                  4\n#> 205         대전광역시 동구 대성동 200-4 127.4603 36.29522                  1\n#> 206           대전광역시 동구 용운동 631 127.4568 36.33461                 13\n#> 207         대전광역시 동구 가양동 288-6 127.4426 36.34356                  1\n#> 208       대전광역시 대덕구 읍내동 573-4 127.4271 36.37875                  2\n#> 209         대전광역시 대덕구 법동 440-1 127.4283 36.37435                 11\n#> 210         대전광역시 대덕구 읍내 215-5 127.4401 36.41228                  3\n#> 211       대전광역시 대덕구 석봉동 184-1 127.4262 36.44715                  1\n#> 212        대전광역시 대덕구 덕암동 12-1 127.4251 36.44383                  6\n#> 213         대전광역시 유성구 하기동 516 127.3206 36.38727                 19\n#> 214         대전광역시 유성구 반석동 613 127.3091 36.39428                  8\n#> 215         대전광역시 유성구 지족동 853 127.3167 36.37918                 14\n#> 216          대전광역시 서구 관저동 1900 127.3416 36.30435                  7\n#> 217           대전광역시 서구 복수동 613 127.3790 36.30052                 14\n#> 218        대전광역시 중구 대사동 248-29 127.4183 36.31578                 11\n#> 219         대전광역시 중구 유천동 168-8 127.3996 36.31308                  4\n#> 220         대전광역시 중구 산성동 160-9 127.3882 36.30913                  6\n#> 221         대전광역시 서구 갈마동 338-1 127.3686 36.34949                  6\n#> 222         대전광역시 서구 갈마동 392-6 127.3680 36.34413                  7\n#> 223        대전광역시 대덕구 비래동 47-1 127.4553 36.35380                  4\n#> 224           대전광역시 서구 정림동 497 127.3638 36.30708                  7\n#> 225          대전광역시 동구 가양동 88-1 127.4521 36.34905                  8\n#> 226       대전광역시 유성구 대정동 303-2 127.3190 36.31265                 10\n#> 227         대전광역시 유성구 죽동 141-3 127.3332 36.37694                 16\n#> 228        대전광역시 유성구 지족동 1043 127.3051 36.38051                  8\n#> 229         대전광역시 유성구 하기동 545 127.3301 36.38990                 10\n#> 230        대전광역시 유성구 지족동 1093 127.3049 36.38793                 11\n#> 231         대전광역시 유성구 덕명동 525 127.3035 36.35640                 10\n#> 232        대전광역시 유성구 장대동 40-2 127.3334 36.36527                  6\n#> 233        대전광역시 대덕구 문평동 92-1 127.3950 36.43865                  9\n#> 234         대전광역시 대덕구 와동 372-7 127.4231 36.40083                  6\n#> 235       대전광역시 대덕구 비래동 130-7 127.4506 36.35797                 12\n#> 236          대전광역시 동구 가양동 55-3 127.4482 36.34891                  1\n#> 237            대전광역시 서구 변동 60-2 127.3781 36.32451                 10\n#> 238            대전광역시 서구 변동 70-9 127.3768 36.33066                 12\n#> 239          대전광역시 서구 관저동 1394 127.3425 36.29625                 22\n#> 240        대전광역시 서구 복수동 292-14 127.3731 36.30871                  7\n#> 241           대전광역시 중구 사정동 401 127.3849 36.29651                 10\n#> 242         대전광역시 중구 오류동 170-1 127.4047 36.32212                  6\n#> 243        대전광역시 동구 삼성동 151-13 127.4252 36.33945                  5\n#> 244         대전광역시 동구 가양동 307-3 127.4460 36.34014                 11\n#> 245          대전광역시 동구 천동 199-64 127.4439 36.31672                  7\n#> 246           대전광역시 동구 용운동 460 127.4524 36.32644                  7\n#> 247          대전광역시 중구 목동 112-12 127.4088 36.33370                  7\n#> 248         대전광역시 중구 옥계동 46-15 127.4541 36.29886                  1\n#> 249          대전광역시 서구 관저동 1574 127.3343 36.29599                  4\n#> 250        대전광역시 유성구 지족동 1052 127.3070 36.37444                 10\n#> 251          대전광역시 서구 관저동 1985 127.3293 36.29457                  4\n#> 252          대전광역시 서구 둔산동 1517 127.3849 36.35950                 13\n#> 253        대전광역시 서구 가수원동 1373 127.3516 36.30836                 24\n#> 254         대전광역시 서구 복수동 257-5 127.3748 36.30454                  4\n#> 255        대전광역시 동구 용운동 301-12 127.4648 36.32388                  0\n#> 256         대전광역시 유성구 신성동 494 127.3537 36.39403                 14\n#> 257         대전광역시 유성구 용산동 605 127.4053 36.42330                  3\n#> 258         대전광역시 유성구 신성동 458 127.3546 36.38272                  5\n#> 259            대전광역시 유성구 장동 48 127.3654 36.39067                 20\n#> 260        대전광역시 대덕구 오정동 45-1 127.4073 36.35783                 19\n#> 261       대전광역시 유성구 원신흥동 608 127.3329 36.33296                 10\n\n\n\n5.8 h\n\ntasu_station %>% class()\n#> [1] \"data.frame\"\n\ntasu_sf <- \n  tasu_station %>% st_as_sf(coords = c(\"lon\", \"lat\"),crs=4326)\n\ntasu_sf\n#> Simple feature collection with 261 features and 5 fields\n#> Geometry type: POINT\n#> Dimension:     XY\n#> Bounding box:  xmin: 127.3011 ymin: 36.28516 xmax: 127.474 ymax: 36.45393\n#> Geodetic CRS:  WGS 84\n#> First 10 features:\n#>    번호                     대여소명 거치대                            주소\n#> 1     1   무역전시관입구(택시승강장)     14    대전광역시 유성구 도룡동 3-8\n#> 2     2               대전컨벤션센터     20   대전광역시 유성구 도룡동 4-19\n#> 3     3                  한밭수목원1     19      대전광역시 서구 만년동 396\n#> 4     4 초원아파트(104동 버스정류장)     12      대전광역시 서구 만년동 401\n#> 5     5  둔산대공원 입구(버스정류장)     13 대전광역시 서구 둔산2동 1521-10\n#> 6     6             백합네거리(농협)     12     대전광역시 서구 월평2동 266\n#> 7     7      정부청사 입구(대덕대로)     13   대전광역시 서구 둔산2동 920-2\n#> 8     8        정부청사 입구(샘머리)     12    대전광역시 서구 둔산2동 1518\n#> 9     9     황실아파트(성룡초등학교)     12     대전광역시 서구 월평2동 304\n#> 10   10    만년동 KBS 부근(기업은행)     12      대전광역시 서구 만년동 300\n#>    대여스테이션별개수                  geometry\n#> 1                  54 POINT (127.3894 36.37513)\n#> 2                  60 POINT (127.3917 36.37502)\n#> 3                 281 POINT (127.3878 36.36793)\n#> 4                  24 POINT (127.3795 36.36799)\n#> 5                  53 POINT (127.3846 36.35531)\n#> 6                  25  POINT (127.3752 36.3617)\n#> 7                  12 POINT (127.3861 36.35112)\n#> 8                  67 POINT (127.3846 36.35531)\n#> 9                   0  POINT (127.3752 36.3617)\n#> 10                 24 POINT (127.3807 36.37037)\n\n\n\n5.9 i\n\ntasu_sf\n#> Simple feature collection with 261 features and 5 fields\n#> Geometry type: POINT\n#> Dimension:     XY\n#> Bounding box:  xmin: 127.3011 ymin: 36.28516 xmax: 127.474 ymax: 36.45393\n#> Geodetic CRS:  WGS 84\n#> First 10 features:\n#>    번호                     대여소명 거치대                            주소\n#> 1     1   무역전시관입구(택시승강장)     14    대전광역시 유성구 도룡동 3-8\n#> 2     2               대전컨벤션센터     20   대전광역시 유성구 도룡동 4-19\n#> 3     3                  한밭수목원1     19      대전광역시 서구 만년동 396\n#> 4     4 초원아파트(104동 버스정류장)     12      대전광역시 서구 만년동 401\n#> 5     5  둔산대공원 입구(버스정류장)     13 대전광역시 서구 둔산2동 1521-10\n#> 6     6             백합네거리(농협)     12     대전광역시 서구 월평2동 266\n#> 7     7      정부청사 입구(대덕대로)     13   대전광역시 서구 둔산2동 920-2\n#> 8     8        정부청사 입구(샘머리)     12    대전광역시 서구 둔산2동 1518\n#> 9     9     황실아파트(성룡초등학교)     12     대전광역시 서구 월평2동 304\n#> 10   10    만년동 KBS 부근(기업은행)     12      대전광역시 서구 만년동 300\n#>    대여스테이션별개수                  geometry\n#> 1                  54 POINT (127.3894 36.37513)\n#> 2                  60 POINT (127.3917 36.37502)\n#> 3                 281 POINT (127.3878 36.36793)\n#> 4                  24 POINT (127.3795 36.36799)\n#> 5                  53 POINT (127.3846 36.35531)\n#> 6                  25  POINT (127.3752 36.3617)\n#> 7                  12 POINT (127.3861 36.35112)\n#> 8                  67 POINT (127.3846 36.35531)\n#> 9                   0  POINT (127.3752 36.3617)\n#> 10                 24 POINT (127.3807 36.37037)\n\np2 <- map + geom_sf(data = tasu_sf, inherit.aes=F, aes(size= 대여스테이션별개수), alpha = 0.7)\np2"
  },
  {
    "objectID": "posts/Spatial_Info_Analysis final_exam/20191536_기말고사.html#마",
    "href": "posts/Spatial_Info_Analysis final_exam/20191536_기말고사.html#마",
    "title": "Spatial_Info_Analysis Tasu_Data",
    "section": "6 마",
    "text": "6 마\n\n6.1 a\n\n# 기존 투영에서 경위도로 변환\ndeajeon_area %>% head\n#> class       : SpatialPolygonsDataFrame \n#> features    : 6 \n#> extent      : 992033.8, 998440.7, 1817026, 1828730  (xmin, xmax, ymin, ymax)\n#> crs         : +proj=tmerc +lat_0=38 +lon_0=127.5 +k=0.9996 +x_0=1000000 +y_0=2000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n#> variables   : 5\n#> names       :   EMD_CD, EMD_NM, SGG_OID, COL_ADM_SE,  GID \n#> min values  : 30230105, 갈전동,     115,      30230, 3446 \n#> max values  : 30230124,   장동,     433,      30230, 3451\ndeajeon_area %>% class()\n#> [1] \"SpatialPolygonsDataFrame\"\n#> attr(,\"package\")\n#> [1] \"sp\"\n\nto_crs = CRS(\"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs\")\ndeajeon_area_sp <- spTransform(deajeon_area, to_crs)\ndeajeon_area_sp\n#> class       : SpatialPolygonsDataFrame \n#> features    : 177 \n#> extent      : 127.2467, 127.5597, 36.1831, 36.50023  (xmin, xmax, ymin, ymax)\n#> crs         : +proj=longlat +datum=WGS84 +no_defs \n#> variables   : 5\n#> names       :   EMD_CD,   EMD_NM, SGG_OID, COL_ADM_SE,  GID \n#> min values  : 30110101, 가수원동,     113,      30110, 3446 \n#> max values  : 30230126,   흑석동,    3346,      30230, 3622\n\ndeajeon_area_sf <- st_as_sf(deajeon_area_sp)\ndeajeon_area_sf\n#> Simple feature collection with 177 features and 5 fields\n#> Geometry type: MULTIPOLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: 127.2467 ymin: 36.1831 xmax: 127.5597 ymax: 36.50023\n#> Geodetic CRS:  +proj=longlat +datum=WGS84 +no_defs\n#> First 10 features:\n#>     EMD_CD EMD_NM SGG_OID COL_ADM_SE  GID                       geometry\n#> 0 30230110 비래동     120      30230 3446 MULTIPOLYGON (((127.4521 36...\n#> 1 30230121 갈전동     119      30230 3447 MULTIPOLYGON (((127.4747 36...\n#> 2 30230116 상서동     433      30230 3448 MULTIPOLYGON (((127.4129 36...\n#> 3 30230124 삼정동     117      30230 3449 MULTIPOLYGON (((127.4747 36...\n#> 4 30230105 신대동     116      30230 3450 MULTIPOLYGON (((127.4198 36...\n#> 5 30230118   장동     115      30230 3451 MULTIPOLYGON (((127.4398 36...\n#> 6 30230125 미호동     114      30230 3452 MULTIPOLYGON (((127.4825 36...\n#> 7 30230120 이현동     113      30230 3453 MULTIPOLYGON (((127.4544 36...\n#> 8 30230115 덕암동     138      30230 3454 MULTIPOLYGON (((127.415 36....\n#> 9 30230109 중리동     137      30230 3455 MULTIPOLYGON (((127.4176 36...\n\n\n\n6.2 b\n\ndeajeon_area_sf <- \n  deajeon_area_sf %>% st_make_valid()\n\ndeajeon_area_sf\n#> Simple feature collection with 177 features and 5 fields\n#> Geometry type: MULTIPOLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: 127.2467 ymin: 36.1831 xmax: 127.5597 ymax: 36.50023\n#> Geodetic CRS:  +proj=longlat +datum=WGS84 +no_defs\n#> First 10 features:\n#>     EMD_CD EMD_NM SGG_OID COL_ADM_SE  GID                       geometry\n#> 0 30230110 비래동     120      30230 3446 MULTIPOLYGON (((127.4515 36...\n#> 1 30230121 갈전동     119      30230 3447 MULTIPOLYGON (((127.4745 36...\n#> 2 30230116 상서동     433      30230 3448 MULTIPOLYGON (((127.4129 36...\n#> 3 30230124 삼정동     117      30230 3449 MULTIPOLYGON (((127.4745 36...\n#> 4 30230105 신대동     116      30230 3450 MULTIPOLYGON (((127.4188 36...\n#> 5 30230118   장동     115      30230 3451 MULTIPOLYGON (((127.4395 36...\n#> 6 30230125 미호동     114      30230 3452 MULTIPOLYGON (((127.4826 36...\n#> 7 30230120 이현동     113      30230 3453 MULTIPOLYGON (((127.4537 36...\n#> 8 30230115 덕암동     138      30230 3454 MULTIPOLYGON (((127.4151 36...\n#> 9 30230109 중리동     137      30230 3455 MULTIPOLYGON (((127.4182 36...\n\n\n\n6.3 c\n\ndeajeon_area_sf %>% head()\n#> Simple feature collection with 6 features and 5 fields\n#> Geometry type: MULTIPOLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: 127.4112 ymin: 36.35064 xmax: 127.4826 ymax: 36.45615\n#> Geodetic CRS:  +proj=longlat +datum=WGS84 +no_defs\n#>     EMD_CD EMD_NM SGG_OID COL_ADM_SE  GID                       geometry\n#> 0 30230110 비래동     120      30230 3446 MULTIPOLYGON (((127.4515 36...\n#> 1 30230121 갈전동     119      30230 3447 MULTIPOLYGON (((127.4745 36...\n#> 2 30230116 상서동     433      30230 3448 MULTIPOLYGON (((127.4129 36...\n#> 3 30230124 삼정동     117      30230 3449 MULTIPOLYGON (((127.4745 36...\n#> 4 30230105 신대동     116      30230 3450 MULTIPOLYGON (((127.4188 36...\n#> 5 30230118   장동     115      30230 3451 MULTIPOLYGON (((127.4395 36...\n\ntasu_sf %>% head()\n#> Simple feature collection with 6 features and 5 fields\n#> Geometry type: POINT\n#> Dimension:     XY\n#> Bounding box:  xmin: 127.3752 ymin: 36.35531 xmax: 127.3917 ymax: 36.37513\n#> Geodetic CRS:  WGS 84\n#>   번호                     대여소명 거치대                            주소\n#> 1    1   무역전시관입구(택시승강장)     14    대전광역시 유성구 도룡동 3-8\n#> 2    2               대전컨벤션센터     20   대전광역시 유성구 도룡동 4-19\n#> 3    3                  한밭수목원1     19      대전광역시 서구 만년동 396\n#> 4    4 초원아파트(104동 버스정류장)     12      대전광역시 서구 만년동 401\n#> 5    5  둔산대공원 입구(버스정류장)     13 대전광역시 서구 둔산2동 1521-10\n#> 6    6             백합네거리(농협)     12     대전광역시 서구 월평2동 266\n#>   대여스테이션별개수                  geometry\n#> 1                 54 POINT (127.3894 36.37513)\n#> 2                 60 POINT (127.3917 36.37502)\n#> 3                281 POINT (127.3878 36.36793)\n#> 4                 24 POINT (127.3795 36.36799)\n#> 5                 53 POINT (127.3846 36.35531)\n#> 6                 25  POINT (127.3752 36.3617)\n\njoin_result <- st_join(deajeon_area_sf,tasu_sf)\njoin_result[is.na(join_result)] <- 0\njoin_result %>% head()\n#> Simple feature collection with 6 features and 10 fields\n#> Geometry type: MULTIPOLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: 127.4129 ymin: 36.35064 xmax: 127.4826 ymax: 36.45615\n#> Geodetic CRS:  +proj=longlat +datum=WGS84 +no_defs\n#>       EMD_CD EMD_NM SGG_OID COL_ADM_SE  GID 번호               대여소명 거치대\n#> 0   30230110 비래동     120      30230 3446  185        비래동 산림조합     12\n#> 0.1 30230110 비래동     120      30230 3446  223     가양비래공원네거리     13\n#> 0.2 30230110 비래동     120      30230 3446  235 비래동 금성백조(102동)     14\n#> 1   30230121 갈전동     119      30230 3447    0                      0      0\n#> 2   30230116 상서동     433      30230 3448    0                      0      0\n#> 3   30230124 삼정동     117      30230 3449  132             삼정삼거리     13\n#>                                주소 대여스테이션별개수\n#> 0    대전광역시 대덕구 비래동 123-7                 11\n#> 0.1   대전광역시 대덕구 비래동 47-1                  4\n#> 0.2  대전광역시 대덕구 비래동 130-7                 12\n#> 1                                 0                  0\n#> 2                                 0                  0\n#> 3   대전광역시 대덕구 삼정동 산27-4                  7\n#>                           geometry\n#> 0   MULTIPOLYGON (((127.4515 36...\n#> 0.1 MULTIPOLYGON (((127.4515 36...\n#> 0.2 MULTIPOLYGON (((127.4515 36...\n#> 1   MULTIPOLYGON (((127.4745 36...\n#> 2   MULTIPOLYGON (((127.4129 36...\n#> 3   MULTIPOLYGON (((127.4745 36...\n\n\n\n6.4 d\n\njoin_result %>% head()\n#> Simple feature collection with 6 features and 10 fields\n#> Geometry type: MULTIPOLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: 127.4129 ymin: 36.35064 xmax: 127.4826 ymax: 36.45615\n#> Geodetic CRS:  +proj=longlat +datum=WGS84 +no_defs\n#>       EMD_CD EMD_NM SGG_OID COL_ADM_SE  GID 번호               대여소명 거치대\n#> 0   30230110 비래동     120      30230 3446  185        비래동 산림조합     12\n#> 0.1 30230110 비래동     120      30230 3446  223     가양비래공원네거리     13\n#> 0.2 30230110 비래동     120      30230 3446  235 비래동 금성백조(102동)     14\n#> 1   30230121 갈전동     119      30230 3447    0                      0      0\n#> 2   30230116 상서동     433      30230 3448    0                      0      0\n#> 3   30230124 삼정동     117      30230 3449  132             삼정삼거리     13\n#>                                주소 대여스테이션별개수\n#> 0    대전광역시 대덕구 비래동 123-7                 11\n#> 0.1   대전광역시 대덕구 비래동 47-1                  4\n#> 0.2  대전광역시 대덕구 비래동 130-7                 12\n#> 1                                 0                  0\n#> 2                                 0                  0\n#> 3   대전광역시 대덕구 삼정동 산27-4                  7\n#>                           geometry\n#> 0   MULTIPOLYGON (((127.4515 36...\n#> 0.1 MULTIPOLYGON (((127.4515 36...\n#> 0.2 MULTIPOLYGON (((127.4515 36...\n#> 1   MULTIPOLYGON (((127.4745 36...\n#> 2   MULTIPOLYGON (((127.4129 36...\n#> 3   MULTIPOLYGON (((127.4745 36...\n\njoin_result_count <- \njoin_result %>% group_by(EMD_NM) %>% \n  summarise(행정동별개수 = n())\n\njoin_result_count\n#> Simple feature collection with 171 features and 2 fields\n#> Geometry type: GEOMETRY\n#> Dimension:     XY\n#> Bounding box:  xmin: 127.2467 ymin: 36.1831 xmax: 127.5597 ymax: 36.50023\n#> Geodetic CRS:  +proj=longlat +datum=WGS84 +no_defs\n#> # A tibble: 171 × 3\n#>    EMD_NM   행정동별개수                                                geometry\n#>    <chr>           <int>                                          <GEOMETRY [°]>\n#>  1 가수원동            3 POLYGON ((127.3454 36.29102, 127.3454 36.29086, 127.34…\n#>  2 가양동              4 MULTIPOLYGON (((127.4366 36.3401, 127.4368 36.3399, 12…\n#>  3 가오동              6 POLYGON ((127.468 36.30469, 127.4675 36.30546, 127.466…\n#>  4 가장동              2 POLYGON ((127.3816 36.32865, 127.3816 36.32865, 127.38…\n#>  5 가정동              4 POLYGON ((127.369 36.38848, 127.3689 36.38849, 127.368…\n#>  6 갈마동              5 POLYGON ((127.3625 36.33948, 127.3627 36.3395, 127.362…\n#>  7 갈전동              1 POLYGON ((127.4745 36.43743, 127.4742 36.43722, 127.47…\n#>  8 갑동                1 POLYGON ((127.2831 36.38286, 127.283 36.38286, 127.282…\n#>  9 계산동              1 POLYGON ((127.2804 36.33235, 127.2819 36.33159, 127.28…\n#> 10 관저동              8 POLYGON ((127.3141 36.28425, 127.3141 36.28424, 127.31…\n#> # … with 161 more rows\n\n\n\n6.5 e\n\njoin_result_count %>% head()\n#> Simple feature collection with 6 features and 2 fields\n#> Geometry type: GEOMETRY\n#> Dimension:     XY\n#> Bounding box:  xmin: 127.3453 ymin: 36.28864 xmax: 127.4681 ymax: 36.38885\n#> Geodetic CRS:  +proj=longlat +datum=WGS84 +no_defs\n#> # A tibble: 6 × 3\n#>   EMD_NM   행정동별개수                                                 geometry\n#>   <chr>           <int>                                           <GEOMETRY [°]>\n#> 1 가수원동            3 POLYGON ((127.3454 36.29102, 127.3454 36.29086, 127.345…\n#> 2 가양동              4 MULTIPOLYGON (((127.4366 36.3401, 127.4368 36.3399, 127…\n#> 3 가오동              6 POLYGON ((127.468 36.30469, 127.4675 36.30546, 127.4669…\n#> 4 가장동              2 POLYGON ((127.3816 36.32865, 127.3816 36.32865, 127.382…\n#> 5 가정동              4 POLYGON ((127.369 36.38848, 127.3689 36.38849, 127.3689…\n#> 6 갈마동              5 POLYGON ((127.3625 36.33948, 127.3627 36.3395, 127.3628…\ndeajeon_area_sf %>% head()\n#> Simple feature collection with 6 features and 5 fields\n#> Geometry type: MULTIPOLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: 127.4112 ymin: 36.35064 xmax: 127.4826 ymax: 36.45615\n#> Geodetic CRS:  +proj=longlat +datum=WGS84 +no_defs\n#>     EMD_CD EMD_NM SGG_OID COL_ADM_SE  GID                       geometry\n#> 0 30230110 비래동     120      30230 3446 MULTIPOLYGON (((127.4515 36...\n#> 1 30230121 갈전동     119      30230 3447 MULTIPOLYGON (((127.4745 36...\n#> 2 30230116 상서동     433      30230 3448 MULTIPOLYGON (((127.4129 36...\n#> 3 30230124 삼정동     117      30230 3449 MULTIPOLYGON (((127.4745 36...\n#> 4 30230105 신대동     116      30230 3450 MULTIPOLYGON (((127.4188 36...\n#> 5 30230118   장동     115      30230 3451 MULTIPOLYGON (((127.4395 36...\n\nHjD_station_cnt <- st_intersection(deajeon_area_sf,join_result_count)\nHjD_station_cnt\n#> Simple feature collection with 870 features and 7 fields\n#> Geometry type: GEOMETRY\n#> Dimension:     XY\n#> Bounding box:  xmin: 127.2467 ymin: 36.1831 xmax: 127.5597 ymax: 36.50023\n#> Geodetic CRS:  +proj=longlat +datum=WGS84 +no_defs\n#> First 10 features:\n#>       EMD_CD   EMD_NM SGG_OID COL_ADM_SE  GID EMD_NM.1 행정동별개수\n#> 79  30170115   도안동    2978      30170 3525 가수원동            3\n#> 81  30170114 가수원동    2979      30170 3527 가수원동            3\n#> 86  30170127   괴곡동     407      30170 3532 가수원동            3\n#> 91  30170116   관저동     386      30170 3537 가수원동            3\n#> 102 30170104   정림동    1990      30170 3548 가수원동            3\n#> 0   30230110   비래동     120      30230 3446   가양동            4\n#> 25  30230107   송촌동     121      30230 3471   가양동            4\n#> 144 30110109   용운동     173      30110 3590   가양동            4\n#> 158 30110118   삼성동    2706      30110 3604   가양동            4\n#> 165 30110122   비룡동     183      30110 3611   가양동            4\n#>                           geometry\n#> 79  GEOMETRYCOLLECTION (MULTILI...\n#> 81  POLYGON ((127.3454 36.29102...\n#> 86  MULTILINESTRING ((127.3544 ...\n#> 91  MULTILINESTRING ((127.3475 ...\n#> 102 MULTILINESTRING ((127.362 3...\n#> 0   GEOMETRYCOLLECTION (MULTILI...\n#> 25  MULTIPOLYGON (((127.4414 36...\n#> 144 POLYGON ((127.4648 36.34509...\n#> 158 GEOMETRYCOLLECTION (LINESTR...\n#> 165 MULTIPOLYGON (((127.4643 36...\n\n\n\n6.6 f\n\nmap3 <- qmap(location = \"대전\", zoom = 11, maptype='roadmap', color='bw')\np3 <- map3 + geom_sf(data = HjD_station_cnt, inherit.aes = F, aes(fill = 행정동별개수), alpha=.9)\np3"
  },
  {
    "objectID": "posts/Data_Visualize_Movie_Data/기말발표.html",
    "href": "posts/Data_Visualize_Movie_Data/기말발표.html",
    "title": "Data_Visualize Movie_Data",
    "section": "",
    "text": "HTML파일로 보기\nFinal Exam"
  },
  {
    "objectID": "posts/Data_Visualize_Movie_Data/기말발표.html#데이터-불러오기",
    "href": "posts/Data_Visualize_Movie_Data/기말발표.html#데이터-불러오기",
    "title": "Data_Visualize Movie_Data",
    "section": "1 데이터 불러오기",
    "text": "1 데이터 불러오기\n\n1998년 ~ 2023년 4월 국내에서 개봉한 영화\n독립/예술 영화가 아닌 일반영화 (해외+국내영화)\n1위 ~ 500위\n\n\nmovie <- read_xlsx('C:/Users/seong taek/Desktop/3-1 DataVisualize/data_visualize/역대 박스오피스2.xlsx')\n#> New names:\n#> • `` -> `...5`\n#> • `` -> `...7`\nmovie\n#> # A tibble: 500 × 11\n#>     순위 영화이름   개봉일               매출액 ...5  관객수 ...7  스크…¹ 국적 \n#>    <dbl> <chr>      <dttm>                <dbl> <chr>  <dbl> <chr>  <dbl> <chr>\n#>  1     1 명량       2014-07-30 00:00:00 1.36e11 <NA>  1.76e7 <NA>    1587 한국 \n#>  2     2 극한직업   2019-01-23 00:00:00 1.40e11 <NA>  1.63e7 <NA>    1978 한국 \n#>  3     3 신과함께-… 2017-12-20 00:00:00 1.16e11 <NA>  1.44e7 <NA>    1912 한국 \n#>  4     4 국제시장   2014-12-17 00:00:00 1.11e11 <NA>  1.43e7 <NA>     966 한국 \n#>  5     5 어벤져스:… 2019-04-24 00:00:00 1.22e11 <NA>  1.39e7 <NA>    2835 미국 \n#>  6     6 겨울왕국 2 2019-11-21 00:00:00 1.15e11 <NA>  1.37e7 <NA>    2648 미국 \n#>  7     7 아바타     2009-12-17 00:00:00 1.28e11 <NA>  1.36e7 <NA>     912 미국 \n#>  8     8 베테랑     2015-08-05 00:00:00 1.05e11 <NA>  1.34e7 <NA>    1064 한국 \n#>  9     9 괴물       2006-07-27 00:00:00 0       <NA>  1.30e7 S        167 한국 \n#> 10    10 도둑들     2012-07-25 00:00:00 9.37e10 <NA>  1.30e7 <NA>    1072 한국 \n#> # … with 490 more rows, 2 more variables: 국적2 <chr>, 배급사 <chr>, and\n#> #   abbreviated variable name ¹​스크린수\n\n\n1.1 전처리\n\nmovie <- movie %>% select(-c(5,7,10))\nmovie %>% head()\n#> # A tibble: 6 × 8\n#>    순위 영화이름         개봉일               매출액 관객수 스크…¹ 국적  배급사 \n#>   <dbl> <chr>            <dttm>                <dbl>  <dbl>  <dbl> <chr> <chr>  \n#> 1     1 명량             2014-07-30 00:00:00 1.36e11 1.76e7   1587 한국  (주)씨…\n#> 2     2 극한직업         2019-01-23 00:00:00 1.40e11 1.63e7   1978 한국  (주)씨…\n#> 3     3 신과함께-죄와 벌 2017-12-20 00:00:00 1.16e11 1.44e7   1912 한국  롯데쇼…\n#> 4     4 국제시장         2014-12-17 00:00:00 1.11e11 1.43e7    966 한국  (주)씨…\n#> 5     5 어벤져스: 엔드…  2019-04-24 00:00:00 1.22e11 1.39e7   2835 미국  월트디…\n#> 6     6 겨울왕국 2       2019-11-21 00:00:00 1.15e11 1.37e7   2648 미국  월트디…\n#> # … with abbreviated variable name ¹​스크린수\n\n\nmovie$국적 %>% unique()\n#> [1] \"한국\"   \"미국\"   \"일본\"   \"영국\"   \"중국\"   \"프랑스\""
  },
  {
    "objectID": "posts/Data_Visualize_Movie_Data/기말발표.html#상위5위-하위5위-그래프",
    "href": "posts/Data_Visualize_Movie_Data/기말발표.html#상위5위-하위5위-그래프",
    "title": "Data_Visualize Movie_Data",
    "section": "2 상위5위 & 하위5위 그래프",
    "text": "2 상위5위 & 하위5위 그래프\n\n전처리\n\n\nmovie_rank <- movie %>%                       # 0값이 아닌것만 필터링\n  select(영화이름, 관객수) %>%         # 열 지정 선택        \n  mutate(popratio = 관객수/median(관객수)) %>% # 새로운 컬럼 'popratio' \n  arrange(desc(popratio)) %>%                      # 내림차순 정렬\n  mutate(index = 1:n(),\n         label = ifelse(index<=5 | index > n()-5 | index==median(index), 영화이름,''))\n# index값이 5이하, 행의 수에서 5를 뺀 값보다 크거나, index가 중위수인 index이면 '행정구역.시군구.별' 값을 가지고 그렇지 않으면 ''(빈문자열) 값 가짐\n\nmovie_rank %>% head()\n#> # A tibble: 6 × 5\n#>   영화이름             관객수 popratio index label               \n#>   <chr>                 <dbl>    <dbl> <int> <chr>               \n#> 1 명량               17613682     5.65     1 \"명량\"              \n#> 2 극한직업           16264944     5.22     2 \"극한직업\"          \n#> 3 신과함께-죄와 벌   14410754     4.62     3 \"신과함께-죄와 벌\"  \n#> 4 국제시장           14257115     4.57     4 \"국제시장\"          \n#> 5 어벤져스: 엔드게임 13934592     4.47     5 \"어벤져스: 엔드게임\"\n#> 6 겨울왕국 2         13747792     4.41     6 \"\"\n\n\n2.1 상위5위 & 하위5위 시각화\n\nggplot(movie_rank, aes(x = index, y =관객수)) +\n  geom_hline(yintercept = 1, linetype = 2, color = 'grey40') +\n  geom_point(size = 1, color = 'royalblue')  +\n  geom_text_repel(aes(label = label),\n                  min.segment.length = 0,\n                  max.overlaps = 100) +\n  scale_y_continuous(name = '관객수',\n                     breaks = seq(1000000, 20000000, by = 2000000),\n                     labels = scales::comma_format()(seq(1000000, 20000000, by = 2000000))) +\n  scale_x_discrete(name = '관객수 상위5위 & 하위5위 ',\n                   breaks = NULL) +\n  theme_light() +\n  theme(panel.border = element_blank())"
  },
  {
    "objectID": "posts/Data_Visualize_Movie_Data/기말발표.html#매출액-top10-영화",
    "href": "posts/Data_Visualize_Movie_Data/기말발표.html#매출액-top10-영화",
    "title": "Data_Visualize Movie_Data",
    "section": "3 매출액 TOP10 영화",
    "text": "3 매출액 TOP10 영화\n\n전처리\n\n\nmovie_rank_sales_10 <- movie %>% arrange(-매출액) %>% slice_head(n=10)\nmovie_rank_sales_10\n#> # A tibble: 10 × 8\n#>     순위 영화이름        개봉일               매출액 관객수 스크…¹ 국적  배급사\n#>    <dbl> <chr>           <dttm>                <dbl>  <dbl>  <dbl> <chr> <chr> \n#>  1     2 극한직업        2019-01-23 00:00:00 1.40e11 1.63e7   1978 한국  \"(주)…\n#>  2    25 아바타: 물의 길 2022-12-14 00:00:00 1.38e11 1.08e7   2809 미국  \"월트…\n#>  3     1 명량            2014-07-30 00:00:00 1.36e11 1.76e7   1587 한국  \"(주)…\n#>  4    13 범죄도시2       2022-05-18 00:00:00 1.31e11 1.27e7   2498 한국  \"주식…\n#>  5     7 아바타          2009-12-17 00:00:00 1.28e11 1.36e7    912 미국  \"주식…\n#>  6     5 어벤져스: 엔드… 2019-04-24 00:00:00 1.22e11 1.39e7   2835 미국  \"월트…\n#>  7     3 신과함께-죄와 … 2017-12-20 00:00:00 1.16e11 1.44e7   1912 한국  \"롯데…\n#>  8     6 겨울왕국 2      2019-11-21 00:00:00 1.15e11 1.37e7   2648 미국  \"월트…\n#>  9     4 국제시장        2014-12-17 00:00:00 1.11e11 1.43e7    966 한국  \"(주)…\n#> 10    14 알라딘          2019-05-23 00:00:00 1.07e11 1.26e7   1311 미국  \"월트…\n#> # … with abbreviated variable name ¹​스크린수\n\n\n3.1 매출액 TOP10 영화 시각화\n\nsales_top10_plot <- \nggplot(movie_rank_sales_10, aes(x=매출액, y=fct_reorder(영화이름, 매출액))) +\n  geom_point(color = \"#0072B2\", size=4) +\n  scale_x_continuous(name = \"총 매출액\",\n                     limits = c(100000000000,160000000000),\n                     expand = c(0,0),\n                     labels = function(x) paste0(x / 1e+8, \"억\")) +\n  scale_y_discrete(name=NULL, expand = c(0, 0.5)) +\n  theme_minimal() +\n  theme(plot.margin = margin(18, -15, 3, 1.5))\n\nsales_top10_plot"
  },
  {
    "objectID": "posts/Data_Visualize_Movie_Data/기말발표.html#관객수-대비-매출액-top10",
    "href": "posts/Data_Visualize_Movie_Data/기말발표.html#관객수-대비-매출액-top10",
    "title": "Data_Visualize Movie_Data",
    "section": "4 관객수 대비 매출액 TOP10",
    "text": "4 관객수 대비 매출액 TOP10\n\n전처리\n\n\nmovie_rank_sales_10_contr <- movie %>% \n  mutate(관객수대비매출액 = (매출액/관객수)) %>%\n  arrange(-관객수대비매출액) %>% slice_head(n=10)\nmovie_rank_sales_10_contr\n#> # A tibble: 10 × 9\n#>     순위 영화…¹  개봉일               매출액 관객수 스크…² 국적  배급사 관객수…³\n#>    <dbl> <chr>   <dttm>                <dbl>  <dbl>  <dbl> <chr> <chr>     <dbl>\n#>  1    25 아바타… 2022-12-14 00:00:00 1.38e11 1.08e7   2809 미국  \"월트…   12739.\n#>  2   311 토르: … 2022-07-06 00:00:00 2.95e10 2.72e6   2143 미국  \"월트…   10862.\n#>  3    43 탑건: … 2022-06-22 00:00:00 8.79e10 8.18e6   1975 미국  \"롯데…   10744.\n#>  4    88 닥터 …  2022-05-04 00:00:00 6.26e10 5.88e6   2691 미국  \"월트…   10646.\n#>  5   325 드래곤… 2010-05-20 00:00:00 2.75e10 2.60e6    562 미국  \"유니…   10550.\n#>  6   434 블랙 …  2022-11-09 00:00:00 2.22e10 2.11e6   2571 미국  \"월트…   10545.\n#>  7   147 더 퍼…  2023-01-04 00:00:00 4.79e10 4.59e6   1023 일본  \"(주)…   10426.\n#>  8   258 이터널… 2021-11-03 00:00:00 3.17e10 3.05e6   2648 미국  \"월트…   10402.\n#>  9   487 헤어질… 2022-06-29 00:00:00 1.97e10 1.90e6   1374 한국  \"(주)…   10369.\n#> 10    13 범죄도… 2022-05-18 00:00:00 1.31e11 1.27e7   2498 한국  \"주식…   10344.\n#> # … with abbreviated variable names ¹​영화이름, ²​스크린수, ³​관객수대비매출액\n\n\n4.1 관객수 대비 매출액 TOP10\n\n시각화\n\n\nsales_top10_cont_plot <- \nggplot(movie_rank_sales_10_contr, aes(x=관객수대비매출액, y=fct_reorder(영화이름, 관객수대비매출액))) +\n  geom_point(color = \"#0072B2\", size=4) +\n  scale_x_continuous(name = \"1인당 매출액\",\n                     limits = c(10000,14000),\n                     expand = c(0,0),\n                     labels = function(x) paste0(x / 1e+0, \"원\")) +\n  scale_y_discrete(name=NULL, expand = c(0, 0.5)) +\n  theme_minimal() +\n  theme(plot.margin = margin(18, -20, 3, 1.5))\n\nsales_top10_cont_plot\n\n\n\n\n### 2개의 매출액 통계 그래프\nplot_ab <- plot_grid(sales_top10_plot,\n                     sales_top10_cont_plot,\n                     nrow= 1,            # 행의 개수\n                     rel_widths= c(3,3), # 각각의 너비\n                     labels= c('총 매출액 TOP10 영화',\n                               '관객수 대비 매출액 TOP10 영화')) # 라벨 a,b\n\nplot_ab"
  },
  {
    "objectID": "posts/Data_Visualize_Movie_Data/기말발표.html#영화-국적별-스크린수-총합",
    "href": "posts/Data_Visualize_Movie_Data/기말발표.html#영화-국적별-스크린수-총합",
    "title": "Data_Visualize Movie_Data",
    "section": "5 영화 국적별 스크린수 총합",
    "text": "5 영화 국적별 스크린수 총합\n\n전처리\n\n\ncon_movie <- \nmovie %>% group_by(국적) %>% \n  summarise(스크린수총합 = sum(스크린수),\n         매출액총합 = sum(매출액, na.rm = T)) \n  \n\ncon_movie$color <- c(\"#B6494A\", \"#000000\", \"#FFED00\", \"#E30113\", \"#E7D739\",\"#4E4E4E\")\ncon_movie\n#> # A tibble: 6 × 4\n#>   국적   스크린수총합    매출액총합 color  \n#>   <chr>         <dbl>         <dbl> <chr>  \n#> 1 미국         197817 5830394959732 #B6494A\n#> 2 영국            568   24982533500 #000000\n#> 3 일본           2350   98086049816 #FFED00\n#> 4 중국            473   17910684413 #E30113\n#> 5 프랑스          936   33552487553 #E7D739\n#> 6 한국         209321 7519517818134 #4E4E4E\n\ncon_movie2 <- con_movie %>% \n  arrange(스크린수총합) %>% \n  mutate(party_fac = factor(국적, levels = 국적[order(스크린수총합)]),\n         value = 스크린수총합,\n         ypos = sum(value) - (cumsum(value)-0.5*value),\n         mid_angle = 2*pi*(ypos/sum(value)),\n         hjust = ifelse(mid_angle<pi, 1, 0),\n         vjust = ifelse(mid_angle<pi, mid_angle/pi, 2-mid_angle/pi))\n\ncon_movie2\n#> # A tibble: 6 × 10\n#>   국적   스크린수총합 매출액…¹ color party…²  value   ypos mid_a…³ hjust   vjust\n#>   <chr>         <dbl>    <dbl> <chr> <fct>    <dbl>  <dbl>   <dbl> <dbl>   <dbl>\n#> 1 중국            473  1.79e10 #E30… 중국       473 4.11e5    6.28     0 0.00115\n#> 2 영국            568  2.50e10 #000… 영국       568 4.11e5    6.27     0 0.00368\n#> 3 프랑스          936  3.36e10 #E7D… 프랑스     936 4.10e5    6.26     0 0.00733\n#> 4 일본           2350  9.81e10 #FFE… 일본      2350 4.08e5    6.24     0 0.0153 \n#> 5 미국         197817  5.83e12 #B64… 미국    197817 3.08e5    4.71     0 0.502  \n#> 6 한국         209321  7.52e12 #4E4… 한국    209321 1.05e5    1.60     1 0.509  \n#> # … with abbreviated variable names ¹​매출액총합, ²​party_fac, ³​mid_angle\n\n\n5.1 영화 국적별 스크린수 총합\n\n시각화\n\n\nggplot(con_movie2, aes(x=\"\", y=스크린수총합, fill=party_fac)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(x=1, y=ypos, label=스크린수총합), color=\"white\", size=6) +\n  geom_text(aes(x=1.5, y=ypos, label=국적, hjust=hjust, vjust=vjust),\n            color=\"black\", size=0) +\n  geom_text_repel(aes(label = party_fac), size = 6,\n                  nudge_x = ifelse(con_movie2$party_fac == \"미국\", 1, 1),\n                  nudge_y = ifelse(con_movie2$party_fac == \"한국\", -2, 1),\n                  segment.color = \"black\",\n                  force = 20,\n                  segment.size = 0.6) +\n  coord_polar(theta = \"y\", start = 0, direction = -1, clip = \"off\") +\n  scale_fill_manual(values = con_movie2$color) +\n  theme_void() +\n  theme(legend.position = \"none\") +\n  labs(title = \"영화 국적별 스크린 수\") +\n  theme(plot.title = element_text(size = 18))\n\n\n\n\n\n# date 형식 '개봉일' 생성\n\nmovie %>% sapply(class)\n#> $순위\n#> [1] \"numeric\"\n#> \n#> $영화이름\n#> [1] \"character\"\n#> \n#> $개봉일\n#> [1] \"POSIXct\" \"POSIXt\" \n#> \n#> $매출액\n#> [1] \"numeric\"\n#> \n#> $관객수\n#> [1] \"numeric\"\n#> \n#> $스크린수\n#> [1] \"numeric\"\n#> \n#> $국적\n#> [1] \"character\"\n#> \n#> $배급사\n#> [1] \"character\"\n\nmovie$개봉일 <- movie$개봉일 %>% as.Date()\nmovie\n#> # A tibble: 500 × 8\n#>     순위 영화이름           개봉일           매출액  관객수 스크…¹ 국적  배급사\n#>    <dbl> <chr>              <date>            <dbl>   <dbl>  <dbl> <chr> <chr> \n#>  1     1 명량               2014-07-30 135748398910  1.76e7   1587 한국  \"(주)…\n#>  2     2 극한직업           2019-01-23 139647979516  1.63e7   1978 한국  \"(주)…\n#>  3     3 신과함께-죄와 벌   2017-12-20 115698654137  1.44e7   1912 한국  \"롯데…\n#>  4     4 국제시장           2014-12-17 110913469630  1.43e7    966 한국  \"(주)…\n#>  5     5 어벤져스: 엔드게임 2019-04-24 122182694160  1.39e7   2835 미국  \"월트…\n#>  6     6 겨울왕국 2         2019-11-21 114810421450  1.37e7   2648 미국  \"월트…\n#>  7     7 아바타             2009-12-17 128447097523  1.36e7    912 미국  \"주식…\n#>  8     8 베테랑             2015-08-05 105168155250  1.34e7   1064 한국  \"(주)…\n#>  9     9 괴물               2006-07-27            0  1.30e7    167 한국  \"(주)…\n#> 10    10 도둑들             2012-07-25  93665568500  1.30e7   1072 한국  \"(주)…\n#> # … with 490 more rows, and abbreviated variable name ¹​스크린수"
  },
  {
    "objectID": "posts/Data_Visualize_Movie_Data/기말발표.html#연도별-통계-시각화",
    "href": "posts/Data_Visualize_Movie_Data/기말발표.html#연도별-통계-시각화",
    "title": "Data_Visualize Movie_Data",
    "section": "6 연도별 통계 시각화",
    "text": "6 연도별 통계 시각화\n\n# 관객수 \nmovie_sum <- movie %>%\n  mutate(연도 = lubridate::year(개봉일)) %>%\n  group_by(연도) %>%\n  summarise(총합 = sum(관객수))\n\nmovie_sum\n#> # A tibble: 26 × 2\n#>     연도     총합\n#>    <dbl>    <dbl>\n#>  1  1998  1971780\n#>  2  1999  8130000\n#>  3  2000  2513540\n#>  4  2001  2678846\n#>  5  2002 16367697\n#>  6  2003 64995866\n#>  7  2004 62340959\n#>  8  2005 85616773\n#>  9  2006 82869100\n#> 10  2007 74889204\n#> # … with 16 more rows\n\nsum1_plot <- \nggplot(movie_sum, aes(x = 연도, y = 총합)) +\n  geom_line(color = \"royalblue\", size = 1) +\n  scale_x_continuous(name = \"개봉연도\") +\n  scale_y_continuous(labels = comma, name = \"관객수 총합\") +\n  labs(title = \"연도별 관객수 총합\") +\n  theme_minimal()\n#> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#> ℹ Please use `linewidth` instead.\n\n\n# 스크린수\nmovie_sum2 <- movie %>%\n  mutate(연도 = lubridate::year(개봉일)) %>%\n  group_by(연도) %>%\n  summarise(총합 = sum(스크린수))\n\nmovie_sum2\n#> # A tibble: 26 × 2\n#>     연도  총합\n#>    <dbl> <dbl>\n#>  1  1998     0\n#>  2  1999     0\n#>  3  2000     0\n#>  4  2001     0\n#>  5  2002   280\n#>  6  2003  1293\n#>  7  2004  1412\n#>  8  2005  2070\n#>  9  2006  2134\n#> 10  2007  2708\n#> # … with 16 more rows\n\nsum2_plot <- \nggplot(movie_sum2, aes(x = 연도, y = 총합)) +\n  geom_line(color = \"royalblue\", size = 1) +\n  scale_x_continuous(name = \"개봉연도\") +\n  scale_y_continuous(labels = comma, name = \"스크린수 총합\") +\n  labs(title = \"연도별 스크린수 총합\") +\n  theme_minimal()\n\n# 매출액\nmovie_sum3 <- movie %>%\n  mutate(연도 = lubridate::year(개봉일)) %>%\n  group_by(연도) %>%\n  summarise(총합 = sum(매출액,na.rm = T))\n\nmovie_sum3\n#> # A tibble: 26 × 2\n#>     연도      총합\n#>    <dbl>     <dbl>\n#>  1  1998         0\n#>  2  1999         0\n#>  3  2000         0\n#>  4  2001         0\n#>  5  2002         0\n#>  6  2003         0\n#>  7  2004         0\n#>  8  2005         0\n#>  9  2006         0\n#> 10  2007 549434500\n#> # … with 16 more rows\n\nlabel_억 <- function(x) {\n  x <- x / 1e8\n  sprintf(\"%.0f억\", x)}  #억\n\nsum3_plot <- \nggplot(movie_sum3, aes(x = 연도, y = 총합)) +\n  geom_line(color = \"royalblue\", size = 1) +\n  scale_x_continuous(name = \"개봉연도\") +\n  scale_y_continuous(labels = label_억, name = \"매출액 총합\", expand = c(0, 0)) +\n  labs(title = \"연도별 매출액 총합\") +\n  theme_minimal()\n\n\n### 2개의 temp_long 그래프\nplot_2 <- plot_grid(sum1_plot,\n                     sum2_plot,\n                     nrow= 1,            # 행의 개수\n                     rel_widths= c(1.5,1.5)) # 각각의 너비\n\n\n\n### plot_ab 그래프 + templong 그래프\nplot_abc <- plot_grid(plot_2,\n                      sum3_plot,\n                      ncol= 1,               # 열의 개수\n                      rel_heights= c(1.5, 1))# 각각의 높이\n\nplot_abc\n\n\n\n\n\nmovie %>% group_by(국적)\n#> # A tibble: 500 × 8\n#> # Groups:   국적 [6]\n#>     순위 영화이름           개봉일           매출액  관객수 스크…¹ 국적  배급사\n#>    <dbl> <chr>              <date>            <dbl>   <dbl>  <dbl> <chr> <chr> \n#>  1     1 명량               2014-07-30 135748398910  1.76e7   1587 한국  \"(주)…\n#>  2     2 극한직업           2019-01-23 139647979516  1.63e7   1978 한국  \"(주)…\n#>  3     3 신과함께-죄와 벌   2017-12-20 115698654137  1.44e7   1912 한국  \"롯데…\n#>  4     4 국제시장           2014-12-17 110913469630  1.43e7    966 한국  \"(주)…\n#>  5     5 어벤져스: 엔드게임 2019-04-24 122182694160  1.39e7   2835 미국  \"월트…\n#>  6     6 겨울왕국 2         2019-11-21 114810421450  1.37e7   2648 미국  \"월트…\n#>  7     7 아바타             2009-12-17 128447097523  1.36e7    912 미국  \"주식…\n#>  8     8 베테랑             2015-08-05 105168155250  1.34e7   1064 한국  \"(주)…\n#>  9     9 괴물               2006-07-27            0  1.30e7    167 한국  \"(주)…\n#> 10    10 도둑들             2012-07-25  93665568500  1.30e7   1072 한국  \"(주)…\n#> # … with 490 more rows, and abbreviated variable name ¹​스크린수\n\ndatetime <- as.POSIXct(movie$개봉일, format = \"%Y-%m-%d %H:%M:%S\")\ndatetime_str <- format(datetime, \"%Y-%m-%d\")\n\nmovie$개봉연도 <-  substr(datetime_str,1,4)\nmovie\n#> # A tibble: 500 × 9\n#>     순위 영화이름         개봉일      매출액 관객수 스크…¹ 국적  배급사 개봉연도\n#>    <dbl> <chr>            <date>       <dbl>  <dbl>  <dbl> <chr> <chr>  <chr>   \n#>  1     1 명량             2014-07-30 1.36e11 1.76e7   1587 한국  \"(주)… 2014    \n#>  2     2 극한직업         2019-01-23 1.40e11 1.63e7   1978 한국  \"(주)… 2019    \n#>  3     3 신과함께-죄와 벌 2017-12-20 1.16e11 1.44e7   1912 한국  \"롯데… 2017    \n#>  4     4 국제시장         2014-12-17 1.11e11 1.43e7    966 한국  \"(주)… 2014    \n#>  5     5 어벤져스: 엔드…  2019-04-24 1.22e11 1.39e7   2835 미국  \"월트… 2019    \n#>  6     6 겨울왕국 2       2019-11-21 1.15e11 1.37e7   2648 미국  \"월트… 2019    \n#>  7     7 아바타           2009-12-17 1.28e11 1.36e7    912 미국  \"주식… 2009    \n#>  8     8 베테랑           2015-08-05 1.05e11 1.34e7   1064 한국  \"(주)… 2015    \n#>  9     9 괴물             2006-07-27 0       1.30e7    167 한국  \"(주)… 2006    \n#> 10    10 도둑들           2012-07-25 9.37e10 1.30e7   1072 한국  \"(주)… 2012    \n#> # … with 490 more rows, and abbreviated variable name ¹​스크린수\n\nmovie_group_year <- \nmovie %>% group_by(개봉연도) %>% \n  summarise(관객수총합 = sum(관객수),\n            스크린총합 = sum(스크린수))\n\n\nmovie_group_year\n#> # A tibble: 26 × 3\n#>    개봉연도 관객수총합 스크린총합\n#>    <chr>         <dbl>      <dbl>\n#>  1 1998        1971780          0\n#>  2 1999        8130000          0\n#>  3 2000        2513540          0\n#>  4 2001        2678846          0\n#>  5 2002       16367697        280\n#>  6 2003       64995866       1293\n#>  7 2004       62340959       1412\n#>  8 2005       85616773       2070\n#>  9 2006       82869100       2134\n#> 10 2007       74889204       2708\n#> # … with 16 more rows"
  },
  {
    "objectID": "posts/Data_Visualize_Movie_Data/기말발표.html#국적별-국내-개봉-스크린-수",
    "href": "posts/Data_Visualize_Movie_Data/기말발표.html#국적별-국내-개봉-스크린-수",
    "title": "Data_Visualize Movie_Data",
    "section": "7 국적별 국내 개봉 스크린 수",
    "text": "7 국적별 국내 개봉 스크린 수\n\nmovie\n#> # A tibble: 500 × 9\n#>     순위 영화이름         개봉일      매출액 관객수 스크…¹ 국적  배급사 개봉연도\n#>    <dbl> <chr>            <date>       <dbl>  <dbl>  <dbl> <chr> <chr>  <chr>   \n#>  1     1 명량             2014-07-30 1.36e11 1.76e7   1587 한국  \"(주)… 2014    \n#>  2     2 극한직업         2019-01-23 1.40e11 1.63e7   1978 한국  \"(주)… 2019    \n#>  3     3 신과함께-죄와 벌 2017-12-20 1.16e11 1.44e7   1912 한국  \"롯데… 2017    \n#>  4     4 국제시장         2014-12-17 1.11e11 1.43e7    966 한국  \"(주)… 2014    \n#>  5     5 어벤져스: 엔드…  2019-04-24 1.22e11 1.39e7   2835 미국  \"월트… 2019    \n#>  6     6 겨울왕국 2       2019-11-21 1.15e11 1.37e7   2648 미국  \"월트… 2019    \n#>  7     7 아바타           2009-12-17 1.28e11 1.36e7    912 미국  \"주식… 2009    \n#>  8     8 베테랑           2015-08-05 1.05e11 1.34e7   1064 한국  \"(주)… 2015    \n#>  9     9 괴물             2006-07-27 0       1.30e7    167 한국  \"(주)… 2006    \n#> 10    10 도둑들           2012-07-25 9.37e10 1.30e7   1072 한국  \"(주)… 2012    \n#> # … with 490 more rows, and abbreviated variable name ¹​스크린수\n\nmovie5 <- movie %>%\n  mutate(year = format(개봉일, \"%Y\")) %>%   # 일시에서 월만 뽑아낸 month 컬럼 생성\n  group_by(국적, year) %>%              # 지점명, month로 그룹화\n  summarise(sum = sum(스크린수)) # 그룹화된 데이터의 집계값 요약                            # 그룹화를 해제하여 일반적인 데이터 프레임 형태로 사용\n#> `summarise()` has grouped output by '국적'. You can override using the\n#> `.groups` argument.\n             # month값을 factor 형태로 수정해서 원하는 levels 지정가능 # sep='' : 간격없이 붙이기\n\nmovie5$year <- movie5$year %>% format()\nmovie5$개봉연도 <- substr(movie5$year,3,4)\nmovie5$개봉연도 <- movie5$개봉연도 %>% as.factor()\n\nmovie5\n#> # A tibble: 54 × 4\n#> # Groups:   국적 [6]\n#>    국적  year    sum 개봉연도\n#>    <chr> <chr> <dbl> <fct>   \n#>  1 미국  1998      0 98      \n#>  2 미국  2002    168 02      \n#>  3 미국  2003    505 03      \n#>  4 미국  2004    532 04      \n#>  5 미국  2005    630 05      \n#>  6 미국  2006    689 06      \n#>  7 미국  2007   1538 07      \n#>  8 미국  2008   4945 08      \n#>  9 미국  2009   6767 09      \n#> 10 미국  2010   6736 10      \n#> # … with 44 more rows\n\nggplot(movie5, aes(x = 개봉연도, y = 국적, fill = sum)) +\n  geom_tile(width = 0.95, height = 0.95) +\n  scale_fill_viridis_c(option = 'E', begin = 0.15, end =  0.98,\n                       name = '스크린수 총합') +\n  coord_fixed(expand = FALSE) +\n  ylab(NULL) +\n  labs(title = \"영화국적별 스크린수 히트맵\") +\n  theme(panel.background = element_rect(fill = \"grey80\")) +\n  scale_x_discrete(labels = c(98,99,seq(00,23,1)))#ylab('')"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html",
    "title": "advanced_python CH4",
    "section": "",
    "text": "Jupyter에서 실행하기\nNumpy Basic"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#advanced-python-ch4---numpy-basic",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#advanced-python-ch4---numpy-basic",
    "title": "advanced_python CH4",
    "section": "1 Advanced Python CH4 - Numpy Basic",
    "text": "1 Advanced Python CH4 - Numpy Basic"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#array-vectorized-computation",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#array-vectorized-computation",
    "title": "advanced_python CH4",
    "section": "2 Array & Vectorized Computation",
    "text": "2 Array & Vectorized Computation\n랜덤 시드 : 숫자 지정시 동일 난수 생성\nimport numpy as np\nnp.random.seed(12345)\n그림 크기 지정\nimport matplotlib.pyplot as plt\nplt.rc('figure', figsize = (10,6))\nNumpy 배열 숫자들을 소수점 이하 4자리까지 표시\nnp.set_printoptions(precision=4, suppress=True)\n0부터 999999까지의 숫자로 이루어진 NumPy 배열\nmy_arr = np.arange(1000000)\nmy_arr\narray([     0,      1,      2, ..., 999997, 999998, 999999])\n0부터 999999까지의 숫자로 이루어진 리스트를 생성\nmy_list = list(range(1000000))\nNumpy배열이 list형태보다 계산이 더 빠름\n%time for _ in range(10): my_arr2 = my_arr*2\n%time for _ in range(10): my_list2 = [x*2 for x in my_list]\nCPU times: total: 31.2 ms\nWall time: 20.9 ms\nCPU times: total: 1.03 s\nWall time: 1.02 s"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#numpy-ndarray",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#numpy-ndarray",
    "title": "advanced_python CH4",
    "section": "3 Numpy ndarray",
    "text": "3 Numpy ndarray\n2행 3열의 랜덤난수 생성 (randn : 표준정규분포)\ndata = np.random.randn(2,3)\ndata\narray([[-0.2047,  0.4789, -0.5194],\n       [-0.5557,  1.9658,  1.3934]])\ndata *10\narray([[-2.0471,  4.7894, -5.1944],\n       [-5.5573, 19.6578, 13.9341]])\ndata + data\narray([[-0.4094,  0.9579, -1.0389],\n       [-1.1115,  3.9316,  2.7868]])\ndata.shape\n(2, 3)\ndata.dtype\ndtype('float64')"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#creating-ndarrays",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#creating-ndarrays",
    "title": "advanced_python CH4",
    "section": "4 Creating ndarrays",
    "text": "4 Creating ndarrays\nlist배열을 Numpy배열로 변환\ndata1 = [6, 7.5, 8, 0, 1]\narr1 = np.array(data1)\narr1\narray([6. , 7.5, 8. , 0. , 1. ])\ndata2 = [[1,2,3,4], [5,6,7,8]]\narr2 = np.array(data2)\narr2\narray([[1, 2, 3, 4],\n       [5, 6, 7, 8]])\n차원 수\narr1.ndim, arr2.ndim\n(1, 2)\narr2.shape\n(2, 4)\narr1.dtype, arr2.dtype\n(dtype('float64'), dtype('int32'))\nnp.zeros(10)\n\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\nnp.zeros((3,6))\narray([[0., 0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0., 0.]])\nnp.empty((2,3,2))\narray([[[1.1239e-311, 3.1620e-322],\n        [0.0000e+000, 0.0000e+000],\n        [1.7801e-306, 2.8808e+180]],\n\n       [[2.6303e-052, 6.5288e-038],\n        [1.5330e-075, 4.2843e-037],\n        [2.9306e-057, 2.6797e-032]]])\nnp.arange(15)\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#data-types-for-ndarrays",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#data-types-for-ndarrays",
    "title": "advanced_python CH4",
    "section": "5 Data Types for ndarrays",
    "text": "5 Data Types for ndarrays\n데이터 타입 지정\narr1 = np.array([1,2,3], dtype=np.float64)\narr2 = np.array([1,2,3], dtype=np.int32)\narr1.dtype, arr2.dtype\n(dtype('float64'), dtype('int32'))\narr = np.array([1,2,3,4,5])\narr.dtype\ndtype('int32')\nastype : 타입 변경 함수\nfloat_arr = arr.astype(np.float64)\nfloat_arr.dtype\ndtype('float64')\narr = np.array([3.7, -1.2, -2.6, 0.5, 12.9, 10.1])\narr\narray([ 3.7, -1.2, -2.6,  0.5, 12.9, 10.1])\narr.astype(np.int32)\narray([ 3, -1, -2,  0, 12, 10])\n바이트(b) 문자열\nnumeric_strings = np.array(['1.25', '-9.6', '42'], dtype=np.string_)\nnumeric_strings\narray([b'1.25', b'-9.6', b'42'], dtype='|S4')\nnumeric_strings.astype(float)\narray([ 1.25, -9.6 , 42.  ])\nint_array = np.arange(10)\ncalibers = np.array([.22, .270, .357, .380, .44, .50], dtype=np.float64)\nint_array.astype(calibers.dtype)\narray([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])\nu4 : 부호없는 4바이트 정수 데이터타입\nempty_unit32 = np.empty(8, dtype='u4')\nempty_unit32\narray([         0, 1075314688,          0, 1075707904,          0,\n       1075838976,          0, 1072693248], dtype=uint32)"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#arithmetic-with-numpy-arrays",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#arithmetic-with-numpy-arrays",
    "title": "advanced_python CH4",
    "section": "6 Arithmetic with Numpy Arrays",
    "text": "6 Arithmetic with Numpy Arrays\narr = np.array([[1., 2., 3.], [4., 5., 6.]])\narr\narray([[1., 2., 3.],\n       [4., 5., 6.]])\narr*arr\narray([[ 1.,  4.,  9.],\n       [16., 25., 36.]])\narr-arr\narray([[0., 0., 0.],\n       [0., 0., 0.]])\n1/arr\narray([[1.    , 0.5   , 0.3333],\n       [0.25  , 0.2   , 0.1667]])\narr**0.5\narray([[1.    , 1.4142, 1.7321],\n       [2.    , 2.2361, 2.4495]])\narr2 = np.array([[0., 4., 1.], [7., 2., 12.]])\narr2\narray([[ 0.,  4.,  1.],\n       [ 7.,  2., 12.]])\narr2 > arr\narray([[False,  True, False],\n       [ True, False,  True]])"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#basic-indexing-slicing",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#basic-indexing-slicing",
    "title": "advanced_python CH4",
    "section": "7 Basic Indexing & Slicing",
    "text": "7 Basic Indexing & Slicing\narr = np.arange(10)\narr\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\narr[5]\n5\narr[5:8]\narray([5, 6, 7])\narr[5:8] = 12\narr\narray([ 0,  1,  2,  3,  4, 12, 12, 12,  8,  9])\narr_slice = arr[5:8]\narr_slice\narray([12, 12, 12])\narr_slice[1] = 12345\narr_slice\narray([   12, 12345,    12])\n기존 numpy배열 (arr)에도 반영\narr\narray([    0,     1,     2,     3,     4,    12, 12345,    12,     8,\n           9])\n[:] = 전체 슬라이스 (배열의 모든 요소)\narr_slice[:] = 64\narr_slice\narray([64, 64, 64])\narr\narray([ 0,  1,  2,  3,  4, 64, 64, 64,  8,  9])\narr2d = np.array([[1,2,3], [4,5,6], [7,8,9]])\narr2d\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\narr2d[2]\narray([7, 8, 9])\narr2d[0][2]\n3\narr2d[0,2]\n3\narr3d = np.array([[[1,2,3], [4,5,6]], [[7,8,9], [10,11,12]]])\narr3d\narray([[[ 1,  2,  3],\n        [ 4,  5,  6]],\n\n       [[ 7,  8,  9],\n        [10, 11, 12]]])\narr3d[0]\narray([[1, 2, 3],\n       [4, 5, 6]])\ncopy 사용시 기존 배열에 영향 X\nold_values = arr3d[0].copy()\nold_values\narray([[1, 2, 3],\n       [4, 5, 6]])\narr3d[0] = 42\narr3d\narray([[[42, 42, 42],\n        [42, 42, 42]],\n\n       [[ 7,  8,  9],\n        [10, 11, 12]]])\narr3d[0] = old_values\narr3d\narray([[[ 1,  2,  3],\n        [ 4,  5,  6]],\n\n       [[ 7,  8,  9],\n        [10, 11, 12]]])\narr3d[1,0]\narray([7, 8, 9])\nx = arr3d[1]\nx\narray([[ 7,  8,  9],\n       [10, 11, 12]])\nx[0]\narray([7, 8, 9])\n\n7.1 Quiz 1\narr3d를 이용하여 array([[ 8, 10, 12], [14, 16, 18]]) 만들기\narr3d\narray([[[ 1,  2,  3],\n        [ 4,  5,  6]],\n\n       [[ 7,  8,  9],\n        [10, 11, 12]]])\narr3d[0] + arr3d[1]\narray([[ 8, 10, 12],\n       [14, 16, 18]])\naxis : 축 지정\narr3d.sum(axis=0)\narray([[ 8, 10, 12],\n       [14, 16, 18]])\n\n\n7.2 Quiz 2\n1차원으로 변경하시오\narr3d.sum(axis=0).reshape(-1)\narray([ 8, 10, 12, 14, 16, 18])\n\n\n7.3 Quiz 3\nshape(2,2)인 [1,2,4,5]를 추출해보시오\narr3d[0,:2,:2]\narray([[1, 2],\n       [4, 5]])\narr3d[0,:,:2]\narray([[1, 2],\n       [4, 5]])\n\n\n7.4 Quiz 4\n[[0,7], [10,15]] 에서 [10, 22]를 출력하시오\narr4 = np.array([[0,7], [10,15]])\narr4\narray([[ 0,  7],\n       [10, 15]])\narr4.sum(axis=0)\narray([10, 22])\n\n\n7.5 Indexing with Slices\narr\narray([ 0,  1,  2,  3,  4, 64, 64, 64,  8,  9])\narr[1:6]\narray([ 1,  2,  3,  4, 64])\narr2d\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\narr2d[:2]\narray([[1, 2, 3],\n       [4, 5, 6]])\narr2d[:2, 1:]\narray([[2, 3],\n       [5, 6]])\narr2d[1, :2]\narray([4, 5])\narr2d[:2,2]\narray([3, 6])\narr2d[:, :1]\narray([[1],\n       [4],\n       [7]])\narr2d[:2, 1:] = 0\narr2d\narray([[1, 0, 0],\n       [4, 0, 0],\n       [7, 8, 9]])\n\n\n7.6 Boolean Indexing\nnames = np.array(['Bob','Joe','Will', 'Bob', 'Will','Joe','Joe'])\ndata = np.random.randn(7,4)\nnames, data\n(array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'], dtype='<U4'),\n array([[ 0.0929,  0.2817,  0.769 ,  1.2464],\n        [ 1.0072, -1.2962,  0.275 ,  0.2289],\n        [ 1.3529,  0.8864, -2.0016, -0.3718],\n        [ 1.669 , -0.4386, -0.5397,  0.477 ],\n        [ 3.2489, -1.0212, -0.5771,  0.1241],\n        [ 0.3026,  0.5238,  0.0009,  1.3438],\n        [-0.7135, -0.8312, -2.3702, -1.8608]]))\nnames == 'Bob'\narray([ True, False, False,  True, False, False, False])\ndata[names == 'Bob']\narray([[ 0.0929,  0.2817,  0.769 ,  1.2464],\n       [ 1.669 , -0.4386, -0.5397,  0.477 ]])\ndata[names == 'Bob', 2:]\narray([[ 0.769 ,  1.2464],\n       [-0.5397,  0.477 ]])\ndata[names == 'Bob', 3]\narray([1.2464, 0.477 ])\nnames != 'Bob'\narray([False,  True,  True, False,  True,  True,  True])\n~ : 불리언 배열의 각 요소를 논리적으로 반전 (T→F, T→F)\ndata[~(names == 'Bob')]\narray([[ 1.0072, -1.2962,  0.275 ,  0.2289],\n       [ 1.3529,  0.8864, -2.0016, -0.3718],\n       [ 3.2489, -1.0212, -0.5771,  0.1241],\n       [ 0.3026,  0.5238,  0.0009,  1.3438],\n       [-0.7135, -0.8312, -2.3702, -1.8608]])\ncond = names == 'Bob'\ndata[~cond]\narray([[ 1.0072, -1.2962,  0.275 ,  0.2289],\n       [ 1.3529,  0.8864, -2.0016, -0.3718],\n       [ 3.2489, -1.0212, -0.5771,  0.1241],\n       [ 0.3026,  0.5238,  0.0009,  1.3438],\n       [-0.7135, -0.8312, -2.3702, -1.8608]])\nmask = (names == 'Bob') | (names == 'Will')\nmask\narray([ True, False,  True,  True,  True, False, False])\ndata[mask]\narray([[ 0.0929,  0.2817,  0.769 ,  1.2464],\n       [ 1.3529,  0.8864, -2.0016, -0.3718],\n       [ 1.669 , -0.4386, -0.5397,  0.477 ],\n       [ 3.2489, -1.0212, -0.5771,  0.1241]])\ndata[data < 0] = 0\ndata\narray([[0.0929, 0.2817, 0.769 , 1.2464],\n       [1.0072, 0.    , 0.275 , 0.2289],\n       [1.3529, 0.8864, 0.    , 0.    ],\n       [1.669 , 0.    , 0.    , 0.477 ],\n       [3.2489, 0.    , 0.    , 0.1241],\n       [0.3026, 0.5238, 0.0009, 1.3438],\n       [0.    , 0.    , 0.    , 0.    ]])\ndata[names != 'Joe'] = 7\ndata\narray([[7.    , 7.    , 7.    , 7.    ],\n       [1.0072, 0.    , 0.275 , 0.2289],\n       [7.    , 7.    , 7.    , 7.    ],\n       [7.    , 7.    , 7.    , 7.    ],\n       [7.    , 7.    , 7.    , 7.    ],\n       [0.3026, 0.5238, 0.0009, 1.3438],\n       [0.    , 0.    , 0.    , 0.    ]])\n\n\n7.7 Fancy Indexing\narr = np.empty((8,4))\nfor i in range(8):\n    arr[i] = i\n\narr\narray([[0., 0., 0., 0.],\n       [1., 1., 1., 1.],\n       [2., 2., 2., 2.],\n       [3., 3., 3., 3.],\n       [4., 4., 4., 4.],\n       [5., 5., 5., 5.],\n       [6., 6., 6., 6.],\n       [7., 7., 7., 7.]])\narr[[4,3,0,6]]\narray([[4., 4., 4., 4.],\n       [3., 3., 3., 3.],\n       [0., 0., 0., 0.],\n       [6., 6., 6., 6.]])\n뒤에서 부터 인덱싱\narr[[-3,-5,-7]]\narray([[5., 5., 5., 5.],\n       [3., 3., 3., 3.],\n       [1., 1., 1., 1.]])\narr = np.arange(32).reshape((8,4))\narr\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11],\n       [12, 13, 14, 15],\n       [16, 17, 18, 19],\n       [20, 21, 22, 23],\n       [24, 25, 26, 27],\n       [28, 29, 30, 31]])\narr[[1,5,7,2], [0,3,1,2]]\narray([ 4, 23, 29, 10])\n행의 모든 값에 대해 열 선택\narr[[1,5,7,2]][:, [0,3,1,2]]\narray([[ 4,  7,  5,  6],\n       [20, 23, 21, 22],\n       [28, 31, 29, 30],\n       [ 8, 11,  9, 10]])\n\n\n7.8 Quiz 1\n\narr에서 [12,17,31,26] 뽑기\n\narr\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11],\n       [12, 13, 14, 15],\n       [16, 17, 18, 19],\n       [20, 21, 22, 23],\n       [24, 25, 26, 27],\n       [28, 29, 30, 31]])\narr[[3,4,7,6],[0,1,3,2]]\narray([12, 17, 31, 26])\n\n\n7.9 Quiz 2\n\nshape(2,4)인 [16,17,19,18,12,13,15,14]뽑기\n\narr[[[4,4,4,4],[3,3,3,3]],[[0,1,3,2],[0,1,3,2]]]\narray([[16, 17, 19, 18],\n       [12, 13, 15, 14]])\n\n\n7.10 Transposing Arrays & Swapping Axes\narr = np.arange(15).reshape((3,5))\narr\narray([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14]])\nT : 배열의 전치\narr.T\narray([[ 0,  5, 10],\n       [ 1,  6, 11],\n       [ 2,  7, 12],\n       [ 3,  8, 13],\n       [ 4,  9, 14]])\narr = np.random.randn(6,3)\narr\narray([[-0.8608,  0.5601, -1.2659],\n       [ 0.1198, -1.0635,  0.3329],\n       [-2.3594, -0.1995, -1.542 ],\n       [-0.9707, -1.307 ,  0.2863],\n       [ 0.378 , -0.7539,  0.3313],\n       [ 1.3497,  0.0699,  0.2467]])\ndot : 행렬곱\nnp.dot(arr.T, arr)\narray([[ 9.2291,  0.9394,  4.948 ],\n       [ 0.9394,  3.7662, -1.3622],\n       [ 4.948 , -1.3622,  4.3437]])\narr = np.arange(16).reshape((2,2,4))\narr\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7]],\n\n       [[ 8,  9, 10, 11],\n        [12, 13, 14, 15]]])\ntranspose : 축 변경\n# 첫 번째, 두 번째 축 변경\narr.transpose((1,0,2))\narray([[[ 0,  1,  2,  3],\n        [ 8,  9, 10, 11]],\n\n       [[ 4,  5,  6,  7],\n        [12, 13, 14, 15]]])\nswapaxes : 배열의 축 변경\n# 첫 번째, 두 번째 축 변경\narr.swapaxes(1,2)\narray([[[ 0,  4],\n        [ 1,  5],\n        [ 2,  6],\n        [ 3,  7]],\n\n       [[ 8, 12],\n        [ 9, 13],\n        [10, 14],\n        [11, 15]]])"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#universal-functions",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#universal-functions",
    "title": "advanced_python CH4",
    "section": "8 Universal Functions",
    "text": "8 Universal Functions\n\nFast Element-Wise Array Functions\n\narr = np.arange(10)\narr\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nnp.sqrt(arr)\narray([0.    , 1.    , 1.4142, 1.7321, 2.    , 2.2361, 2.4495, 2.6458,\n       2.8284, 3.    ])\nexp : 지수함수\nnp.exp(arr)\narray([   1.    ,    2.7183,    7.3891,   20.0855,   54.5982,  148.4132,\n        403.4288, 1096.6332, 2980.958 , 8103.0839])\nx = np.random.randn(8)\nx\narray([-0.0119,  1.0048,  1.3272, -0.9193, -1.5491,  0.0222,  0.7584,\n       -0.6605])\ny = np.random.randn(8)\ny\narray([ 0.8626, -0.01  ,  0.05  ,  0.6702,  0.853 , -0.9559, -0.0235,\n       -2.3042])\nnp.maximum(x,y)\narray([ 0.8626,  1.0048,  1.3272,  0.6702,  0.853 ,  0.0222,  0.7584,\n       -0.6605])\narr = np.random.randn(7) *5\narr\narray([-3.2623, -6.0915, -6.663 ,  5.3731,  3.6182,  3.45  ,  5.0077])\nmodf : 정수부분과 소수부분 분리\nremainder, whole_part = np.modf(arr)\nremainder\narray([-0.2623, -0.0915, -0.663 ,  0.3731,  0.6182,  0.45  ,  0.0077])\nwhole_part\narray([-3., -6., -6.,  5.,  3.,  3.,  5.])\nnp.sqrt(arr)\nC:\\Users\\seong taek\\AppData\\Local\\Temp\\ipykernel_13704\\2296558006.py:1: RuntimeWarning: invalid value encountered in sqrt\n  np.sqrt(arr)\n\n\n\n\n\narray([   nan,    nan,    nan, 2.318 , 1.9022, 1.8574, 2.2378])\nnp.sqrt(arr, arr)\nC:\\Users\\seong taek\\AppData\\Local\\Temp\\ipykernel_13704\\269955669.py:1: RuntimeWarning: invalid value encountered in sqrt\n  np.sqrt(arr, arr)\n\n\n\n\n\narray([   nan,    nan,    nan, 2.318 , 1.9022, 1.8574, 2.2378])\narr\narray([   nan,    nan,    nan, 2.318 , 1.9022, 1.8574, 2.2378])"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#array",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#array",
    "title": "advanced_python CH4",
    "section": "9 Array",
    "text": "9 Array\n\nOriented Programming with Arrays\n\npoints = np.arange(-5,5,0.01)\npoints\narray([-5.  , -4.99, -4.98, -4.97, -4.96, -4.95, -4.94, -4.93, -4.92,\n       -4.91, -4.9 , -4.89, -4.88, -4.87, -4.86, -4.85, -4.84, -4.83,\n       -4.82, -4.81, -4.8 , -4.79, -4.78, -4.77, -4.76, -4.75, -4.74,\n       -4.73, -4.72, -4.71, -4.7 , -4.69, -4.68, -4.67, -4.66, -4.65,\n       -4.64, -4.63, -4.62, -4.61, -4.6 , -4.59, -4.58, -4.57, -4.56,\n       -4.55, -4.54, -4.53, -4.52, -4.51, -4.5 , -4.49, -4.48, -4.47,\n       -4.46, -4.45, -4.44, -4.43, -4.42, -4.41, -4.4 , -4.39, -4.38,\n       -4.37, -4.36, -4.35, -4.34, -4.33, -4.32, -4.31, -4.3 , -4.29,\n       -4.28, -4.27, -4.26, -4.25, -4.24, -4.23, -4.22, -4.21, -4.2 ,\n       -4.19, -4.18, -4.17, -4.16, -4.15, -4.14, -4.13, -4.12, -4.11,\n       -4.1 , -4.09, -4.08, -4.07, -4.06, -4.05, -4.04, -4.03, -4.02,\n       -4.01, -4.  , -3.99, -3.98, -3.97, -3.96, -3.95, -3.94, -3.93,\n       -3.92, -3.91, -3.9 , -3.89, -3.88, -3.87, -3.86, -3.85, -3.84,\n       -3.83, -3.82, -3.81, -3.8 , -3.79, -3.78, -3.77, -3.76, -3.75,\n       -3.74, -3.73, -3.72, -3.71, -3.7 , -3.69, -3.68, -3.67, -3.66,\n       -3.65, -3.64, -3.63, -3.62, -3.61, -3.6 , -3.59, -3.58, -3.57,\n       -3.56, -3.55, -3.54, -3.53, -3.52, -3.51, -3.5 , -3.49, -3.48,\n       -3.47, -3.46, -3.45, -3.44, -3.43, -3.42, -3.41, -3.4 , -3.39,\n       -3.38, -3.37, -3.36, -3.35, -3.34, -3.33, -3.32, -3.31, -3.3 ,\n       -3.29, -3.28, -3.27, -3.26, -3.25, -3.24, -3.23, -3.22, -3.21,\n       -3.2 , -3.19, -3.18, -3.17, -3.16, -3.15, -3.14, -3.13, -3.12,\n       -3.11, -3.1 , -3.09, -3.08, -3.07, -3.06, -3.05, -3.04, -3.03,\n       -3.02, -3.01, -3.  , -2.99, -2.98, -2.97, -2.96, -2.95, -2.94,\n       -2.93, -2.92, -2.91, -2.9 , -2.89, -2.88, -2.87, -2.86, -2.85,\n       -2.84, -2.83, -2.82, -2.81, -2.8 , -2.79, -2.78, -2.77, -2.76,\n       -2.75, -2.74, -2.73, -2.72, -2.71, -2.7 , -2.69, -2.68, -2.67,\n       -2.66, -2.65, -2.64, -2.63, -2.62, -2.61, -2.6 , -2.59, -2.58,\n       -2.57, -2.56, -2.55, -2.54, -2.53, -2.52, -2.51, -2.5 , -2.49,\n       -2.48, -2.47, -2.46, -2.45, -2.44, -2.43, -2.42, -2.41, -2.4 ,\n       -2.39, -2.38, -2.37, -2.36, -2.35, -2.34, -2.33, -2.32, -2.31,\n       -2.3 , -2.29, -2.28, -2.27, -2.26, -2.25, -2.24, -2.23, -2.22,\n       -2.21, -2.2 , -2.19, -2.18, -2.17, -2.16, -2.15, -2.14, -2.13,\n       -2.12, -2.11, -2.1 , -2.09, -2.08, -2.07, -2.06, -2.05, -2.04,\n       -2.03, -2.02, -2.01, -2.  , -1.99, -1.98, -1.97, -1.96, -1.95,\n       -1.94, -1.93, -1.92, -1.91, -1.9 , -1.89, -1.88, -1.87, -1.86,\n       -1.85, -1.84, -1.83, -1.82, -1.81, -1.8 , -1.79, -1.78, -1.77,\n       -1.76, -1.75, -1.74, -1.73, -1.72, -1.71, -1.7 , -1.69, -1.68,\n       -1.67, -1.66, -1.65, -1.64, -1.63, -1.62, -1.61, -1.6 , -1.59,\n       -1.58, -1.57, -1.56, -1.55, -1.54, -1.53, -1.52, -1.51, -1.5 ,\n       -1.49, -1.48, -1.47, -1.46, -1.45, -1.44, -1.43, -1.42, -1.41,\n       -1.4 , -1.39, -1.38, -1.37, -1.36, -1.35, -1.34, -1.33, -1.32,\n       -1.31, -1.3 , -1.29, -1.28, -1.27, -1.26, -1.25, -1.24, -1.23,\n       -1.22, -1.21, -1.2 , -1.19, -1.18, -1.17, -1.16, -1.15, -1.14,\n       -1.13, -1.12, -1.11, -1.1 , -1.09, -1.08, -1.07, -1.06, -1.05,\n       -1.04, -1.03, -1.02, -1.01, -1.  , -0.99, -0.98, -0.97, -0.96,\n       -0.95, -0.94, -0.93, -0.92, -0.91, -0.9 , -0.89, -0.88, -0.87,\n       -0.86, -0.85, -0.84, -0.83, -0.82, -0.81, -0.8 , -0.79, -0.78,\n       -0.77, -0.76, -0.75, -0.74, -0.73, -0.72, -0.71, -0.7 , -0.69,\n       -0.68, -0.67, -0.66, -0.65, -0.64, -0.63, -0.62, -0.61, -0.6 ,\n       -0.59, -0.58, -0.57, -0.56, -0.55, -0.54, -0.53, -0.52, -0.51,\n       -0.5 , -0.49, -0.48, -0.47, -0.46, -0.45, -0.44, -0.43, -0.42,\n       -0.41, -0.4 , -0.39, -0.38, -0.37, -0.36, -0.35, -0.34, -0.33,\n       -0.32, -0.31, -0.3 , -0.29, -0.28, -0.27, -0.26, -0.25, -0.24,\n       -0.23, -0.22, -0.21, -0.2 , -0.19, -0.18, -0.17, -0.16, -0.15,\n       -0.14, -0.13, -0.12, -0.11, -0.1 , -0.09, -0.08, -0.07, -0.06,\n       -0.05, -0.04, -0.03, -0.02, -0.01, -0.  ,  0.01,  0.02,  0.03,\n        0.04,  0.05,  0.06,  0.07,  0.08,  0.09,  0.1 ,  0.11,  0.12,\n        0.13,  0.14,  0.15,  0.16,  0.17,  0.18,  0.19,  0.2 ,  0.21,\n        0.22,  0.23,  0.24,  0.25,  0.26,  0.27,  0.28,  0.29,  0.3 ,\n        0.31,  0.32,  0.33,  0.34,  0.35,  0.36,  0.37,  0.38,  0.39,\n        0.4 ,  0.41,  0.42,  0.43,  0.44,  0.45,  0.46,  0.47,  0.48,\n        0.49,  0.5 ,  0.51,  0.52,  0.53,  0.54,  0.55,  0.56,  0.57,\n        0.58,  0.59,  0.6 ,  0.61,  0.62,  0.63,  0.64,  0.65,  0.66,\n        0.67,  0.68,  0.69,  0.7 ,  0.71,  0.72,  0.73,  0.74,  0.75,\n        0.76,  0.77,  0.78,  0.79,  0.8 ,  0.81,  0.82,  0.83,  0.84,\n        0.85,  0.86,  0.87,  0.88,  0.89,  0.9 ,  0.91,  0.92,  0.93,\n        0.94,  0.95,  0.96,  0.97,  0.98,  0.99,  1.  ,  1.01,  1.02,\n        1.03,  1.04,  1.05,  1.06,  1.07,  1.08,  1.09,  1.1 ,  1.11,\n        1.12,  1.13,  1.14,  1.15,  1.16,  1.17,  1.18,  1.19,  1.2 ,\n        1.21,  1.22,  1.23,  1.24,  1.25,  1.26,  1.27,  1.28,  1.29,\n        1.3 ,  1.31,  1.32,  1.33,  1.34,  1.35,  1.36,  1.37,  1.38,\n        1.39,  1.4 ,  1.41,  1.42,  1.43,  1.44,  1.45,  1.46,  1.47,\n        1.48,  1.49,  1.5 ,  1.51,  1.52,  1.53,  1.54,  1.55,  1.56,\n        1.57,  1.58,  1.59,  1.6 ,  1.61,  1.62,  1.63,  1.64,  1.65,\n        1.66,  1.67,  1.68,  1.69,  1.7 ,  1.71,  1.72,  1.73,  1.74,\n        1.75,  1.76,  1.77,  1.78,  1.79,  1.8 ,  1.81,  1.82,  1.83,\n        1.84,  1.85,  1.86,  1.87,  1.88,  1.89,  1.9 ,  1.91,  1.92,\n        1.93,  1.94,  1.95,  1.96,  1.97,  1.98,  1.99,  2.  ,  2.01,\n        2.02,  2.03,  2.04,  2.05,  2.06,  2.07,  2.08,  2.09,  2.1 ,\n        2.11,  2.12,  2.13,  2.14,  2.15,  2.16,  2.17,  2.18,  2.19,\n        2.2 ,  2.21,  2.22,  2.23,  2.24,  2.25,  2.26,  2.27,  2.28,\n        2.29,  2.3 ,  2.31,  2.32,  2.33,  2.34,  2.35,  2.36,  2.37,\n        2.38,  2.39,  2.4 ,  2.41,  2.42,  2.43,  2.44,  2.45,  2.46,\n        2.47,  2.48,  2.49,  2.5 ,  2.51,  2.52,  2.53,  2.54,  2.55,\n        2.56,  2.57,  2.58,  2.59,  2.6 ,  2.61,  2.62,  2.63,  2.64,\n        2.65,  2.66,  2.67,  2.68,  2.69,  2.7 ,  2.71,  2.72,  2.73,\n        2.74,  2.75,  2.76,  2.77,  2.78,  2.79,  2.8 ,  2.81,  2.82,\n        2.83,  2.84,  2.85,  2.86,  2.87,  2.88,  2.89,  2.9 ,  2.91,\n        2.92,  2.93,  2.94,  2.95,  2.96,  2.97,  2.98,  2.99,  3.  ,\n        3.01,  3.02,  3.03,  3.04,  3.05,  3.06,  3.07,  3.08,  3.09,\n        3.1 ,  3.11,  3.12,  3.13,  3.14,  3.15,  3.16,  3.17,  3.18,\n        3.19,  3.2 ,  3.21,  3.22,  3.23,  3.24,  3.25,  3.26,  3.27,\n        3.28,  3.29,  3.3 ,  3.31,  3.32,  3.33,  3.34,  3.35,  3.36,\n        3.37,  3.38,  3.39,  3.4 ,  3.41,  3.42,  3.43,  3.44,  3.45,\n        3.46,  3.47,  3.48,  3.49,  3.5 ,  3.51,  3.52,  3.53,  3.54,\n        3.55,  3.56,  3.57,  3.58,  3.59,  3.6 ,  3.61,  3.62,  3.63,\n        3.64,  3.65,  3.66,  3.67,  3.68,  3.69,  3.7 ,  3.71,  3.72,\n        3.73,  3.74,  3.75,  3.76,  3.77,  3.78,  3.79,  3.8 ,  3.81,\n        3.82,  3.83,  3.84,  3.85,  3.86,  3.87,  3.88,  3.89,  3.9 ,\n        3.91,  3.92,  3.93,  3.94,  3.95,  3.96,  3.97,  3.98,  3.99,\n        4.  ,  4.01,  4.02,  4.03,  4.04,  4.05,  4.06,  4.07,  4.08,\n        4.09,  4.1 ,  4.11,  4.12,  4.13,  4.14,  4.15,  4.16,  4.17,\n        4.18,  4.19,  4.2 ,  4.21,  4.22,  4.23,  4.24,  4.25,  4.26,\n        4.27,  4.28,  4.29,  4.3 ,  4.31,  4.32,  4.33,  4.34,  4.35,\n        4.36,  4.37,  4.38,  4.39,  4.4 ,  4.41,  4.42,  4.43,  4.44,\n        4.45,  4.46,  4.47,  4.48,  4.49,  4.5 ,  4.51,  4.52,  4.53,\n        4.54,  4.55,  4.56,  4.57,  4.58,  4.59,  4.6 ,  4.61,  4.62,\n        4.63,  4.64,  4.65,  4.66,  4.67,  4.68,  4.69,  4.7 ,  4.71,\n        4.72,  4.73,  4.74,  4.75,  4.76,  4.77,  4.78,  4.79,  4.8 ,\n        4.81,  4.82,  4.83,  4.84,  4.85,  4.86,  4.87,  4.88,  4.89,\n        4.9 ,  4.91,  4.92,  4.93,  4.94,  4.95,  4.96,  4.97,  4.98,\n        4.99])\nmeshgrid : 행, 열 기준으로 각각 배열\nxs, ys = np.meshgrid(points, points)\nys\narray([[-5.  , -5.  , -5.  , ..., -5.  , -5.  , -5.  ],\n       [-4.99, -4.99, -4.99, ..., -4.99, -4.99, -4.99],\n       [-4.98, -4.98, -4.98, ..., -4.98, -4.98, -4.98],\n       ...,\n       [ 4.97,  4.97,  4.97, ...,  4.97,  4.97,  4.97],\n       [ 4.98,  4.98,  4.98, ...,  4.98,  4.98,  4.98],\n       [ 4.99,  4.99,  4.99, ...,  4.99,  4.99,  4.99]])\nxs\narray([[-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],\n       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],\n       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],\n       ...,\n       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],\n       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],\n       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99]])\nz = np.sqrt(xs **2 +ys**2)\nz\narray([[7.0711, 7.064 , 7.0569, ..., 7.0499, 7.0569, 7.064 ],\n       [7.064 , 7.0569, 7.0499, ..., 7.0428, 7.0499, 7.0569],\n       [7.0569, 7.0499, 7.0428, ..., 7.0357, 7.0428, 7.0499],\n       ...,\n       [7.0499, 7.0428, 7.0357, ..., 7.0286, 7.0357, 7.0428],\n       [7.0569, 7.0499, 7.0428, ..., 7.0357, 7.0428, 7.0499],\n       [7.064 , 7.0569, 7.0499, ..., 7.0428, 7.0499, 7.0569]])\nimport matplotlib.pyplot as plt\nplt.imshow(z, cmap=plt.cm.gray); plt.colorbar()\nplt.title(\"Image plot of $\\sqrt{x^2 +y^2}$ for a grid of values\")\nText(0.5, 1.0, 'Image plot of $\\\\sqrt{x^2 +y^2}$ for a grid of values')\n\n\n\npng\n\n\nplt.draw()\n<Figure size 1000x600 with 0 Axes>\nplt.close('all')"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#expressing-conditional-logic-as-array-operations",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#expressing-conditional-logic-as-array-operations",
    "title": "advanced_python CH4",
    "section": "10 Expressing Conditional Logic as Array Operations",
    "text": "10 Expressing Conditional Logic as Array Operations\nxarr = np.array([1.1, 1.2, 1.3, 1.4, 1.5])\nyarr = np.array([2.1, 2.2, 2.3, 2.4, 2.5])\ncond = np.array([True, False, True, True, False])\nresult = [(x if c else y)\n         for x,y,c in zip(xarr, yarr, cond)]\nresult\n[1.1, 2.2, 1.3, 1.4, 2.5]\nwhere : 조건에 따라 두개의 배열 중에서 값 선택\nresult = np.where(cond, xarr, yarr)\nresult\narray([1.1, 2.2, 1.3, 1.4, 2.5])\n조건 : arr>0\narr = np.random.randn(4,4)\narr\narr>0\nnp.where(arr > 0,2,-2)\narray([[-2, -2, -2, -2],\n       [ 2,  2, -2,  2],\n       [ 2,  2,  2, -2],\n       [ 2, -2,  2,  2]])\nnp.where(arr > 0,2,arr)\narray([[-0.5031, -0.6223, -0.9212, -0.7262],\n       [ 2.    ,  2.    , -1.1577,  2.    ],\n       [ 2.    ,  2.    ,  2.    , -0.9975],\n       [ 2.    , -0.1316,  2.    ,  2.    ]])"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#mathematical-and-statistical-methods",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#mathematical-and-statistical-methods",
    "title": "advanced_python CH4",
    "section": "11 Mathematical and Statistical Methods",
    "text": "11 Mathematical and Statistical Methods\narr = np.random.randn(5,4)\narr\narray([[ 2.1695, -0.1149,  2.0037,  0.0296],\n       [ 0.7953,  0.1181, -0.7485,  0.585 ],\n       [ 0.1527, -1.5657, -0.5625, -0.0327],\n       [-0.929 , -0.4826, -0.0363,  1.0954],\n       [ 0.9809, -0.5895,  1.5817, -0.5287]])\narr.mean()\n0.19607051119998253\nnp.mean(arr)\n0.19607051119998253\narr.sum()\n3.9214102239996507\nnp.sum(arr)\n3.9214102239996507\narr.mean(axis=1)\narray([ 1.022 ,  0.1875, -0.502 , -0.0881,  0.3611])\narr.sum(axis=0)\narray([ 3.1693, -2.6345,  2.2381,  1.1486])\ncumsum : 배열의 누적합 계산\narr = np.array([0,1,2,3,4,5,6,7])\narr.cumsum()\narray([ 0,  1,  3,  6, 10, 15, 21, 28])\narr = np.array([[0,1,2], [3,4,5], [6,7,8]])\narr\narray([[0, 1, 2],\n       [3, 4, 5],\n       [6, 7, 8]])\narr.cumsum(axis=0)\narray([[ 0,  1,  2],\n       [ 3,  5,  7],\n       [ 9, 12, 15]])\ncumprod : 누적곱 계산\narr.cumprod(axis=1)\narray([[  0,   0,   0],\n       [  3,  12,  60],\n       [  6,  42, 336]])"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#methoods-for-boolean-arrays",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#methoods-for-boolean-arrays",
    "title": "advanced_python CH4",
    "section": "12 Methoods for Boolean Arrays",
    "text": "12 Methoods for Boolean Arrays\narr = np.random.randn(100)\n(arr > 0).sum()\n42\nany :True가 하나 이상이면 True\nbools = np.array([False,False,True,True])\nbools.any()\nTrue\nall : 모두 True이면 True\nbools.all()\nFalse"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#sorting",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#sorting",
    "title": "advanced_python CH4",
    "section": "13 Sorting",
    "text": "13 Sorting\narr = np.random.randn(6)\narr\narray([ 0.6095, -0.4938,  1.24  , -0.1357,  1.43  , -0.8469])\narr.sort()\narr\narray([-0.8469, -0.4938, -0.1357,  0.6095,  1.24  ,  1.43  ])\narr = np.random.randn(5,3)\narr\narray([[ 0.6033,  1.2636, -0.2555],\n       [-0.4457,  0.4684, -0.9616],\n       [-1.8245,  0.6254,  1.0229],\n       [ 1.1074,  0.0909, -0.3501],\n       [ 0.218 , -0.8948, -1.7415]])\nsort(1) :행기준 정렬\narr.sort(1)\narr\narray([[-0.2555,  0.6033,  1.2636],\n       [-0.9616, -0.4457,  0.4684],\n       [-1.8245,  0.6254,  1.0229],\n       [-0.3501,  0.0909,  1.1074],\n       [-1.7415, -0.8948,  0.218 ]])\n5% 분위수에 해당하는 값 출력\nlarge_arr = np.random.randn(1000)\nlarge_arr.sort()\nlarge_arr[int(0.05 * len(large_arr))]\n-1.5311513550102103"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#unique-other-set-logic",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#unique-other-set-logic",
    "title": "advanced_python CH4",
    "section": "14 Unique & Other Set Logic",
    "text": "14 Unique & Other Set Logic\nnames = np.array(['Bob','Joe','Will','Bob','Will','Joe','Joe'])\nnames\narray(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'], dtype='<U4')\nnp.unique(names)\narray(['Bob', 'Joe', 'Will'], dtype='<U4')\nints = np.array([3,3,3,2,2,1,1,4,4])\nnp.unique(ints)\narray([1, 2, 3, 4])\nset : unique 기능\nsorted(set(names))\n['Bob', 'Joe', 'Will']\nin1d : 첫 번째 배열에 대해 각 요소가 두 번째 배열에 포함되는지를 검사하고, 결과를 boolean 배열로 반환\nvalues = np.array([6,0,0,3,2,5,6])\nnp.in1d(values, [2,3,6])\narray([ True, False, False,  True,  True, False,  True])"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#file-input-output-with-arrays",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#file-input-output-with-arrays",
    "title": "advanced_python CH4",
    "section": "15 File Input & Output with Arrays",
    "text": "15 File Input & Output with Arrays\narr = np.arange(10)\nnp.save('some_array', arr)\nnp.load('some_array.npy')\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nnp.savez('array_archive.npz', a=arr, b=arr)\narch = np.load('array_archive.npz')\narch['b']\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nnp.savez_compressed('arrays_compressed.npz', a=arr, b=arr)\n!rm some_array.npy\n!rm array_archive.npz\n!rm arrays_compressed.npz\n'rm'은(는) 내부 또는 외부 명령, 실행할 수 있는 프로그램, 또는\n배치 파일이 아닙니다.\n'rm'은(는) 내부 또는 외부 명령, 실행할 수 있는 프로그램, 또는\n배치 파일이 아닙니다.\n'rm'은(는) 내부 또는 외부 명령, 실행할 수 있는 프로그램, 또는\n배치 파일이 아닙니다."
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#linear-algebra",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#linear-algebra",
    "title": "advanced_python CH4",
    "section": "16 Linear Algebra",
    "text": "16 Linear Algebra\nx = np.array([[1.,2.,3.], [4., 5., 6.]])\ny = np.array([[6., 23.], [-1, 7],[8,9]])\nx\narray([[1., 2., 3.],\n       [4., 5., 6.]])\ny\narray([[ 6., 23.],\n       [-1.,  7.],\n       [ 8.,  9.]])\nx.dot(y)\narray([[ 28.,  64.],\n       [ 67., 181.]])\nnp.dot(x, np.ones(3))\narray([ 6., 15.])\n@ : 행렬곱셈\nx @ np.ones(3)\narray([ 6., 15.])\ninv : 역행렬\nfrom numpy.linalg import inv, qr\nX = np.random.randn(5,5)\nmat = X.T.dot(X)\ninv(mat)\narray([[  933.1189,   871.8258, -1417.6902, -1460.4005,  1782.1391],\n       [  871.8258,   815.3929, -1325.9965, -1365.9242,  1666.9347],\n       [-1417.6902, -1325.9965,  2158.4424,  2222.0191, -2711.6822],\n       [-1460.4005, -1365.9242,  2222.0191,  2289.0575, -2793.422 ],\n       [ 1782.1391,  1666.9347, -2711.6822, -2793.422 ,  3409.5128]])\nmat.dot(inv(mat))\narray([[ 1., -0.,  0.,  0., -0.],\n       [ 0.,  1.,  0., -0., -0.],\n       [ 0.,  0.,  1., -0.,  0.],\n       [ 0., -0., -0.,  1.,  0.],\n       [ 0.,  0., -0., -0.,  1.]])\nqr : QR분해 - q(직교행렬), r(상삼각행렬)\nq, r = qr(mat)\nq\narray([[-0.6328, -0.5603, -0.2526,  0.3533,  0.3115],\n       [ 0.7629, -0.5331, -0.1675,  0.1443,  0.2913],\n       [ 0.0084, -0.0493, -0.8433, -0.2484, -0.4739],\n       [-0.0826, -0.632 ,  0.4316, -0.4112, -0.4882],\n       [-0.1033, -0.0035, -0.1032, -0.7897,  0.5959]])\nr\narray([[-1.6914,  4.38  ,  0.1757,  0.4075, -0.7838],\n       [ 0.    , -2.6436,  0.1939, -3.072 , -1.0702],\n       [ 0.    ,  0.    , -0.8138,  1.5414,  0.6155],\n       [ 0.    ,  0.    ,  0.    , -2.6445, -2.1669],\n       [ 0.    ,  0.    ,  0.    ,  0.    ,  0.0002]])"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#pseudorandom-number-generation",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#pseudorandom-number-generation",
    "title": "advanced_python CH4",
    "section": "17 Pseudorandom Number Generation",
    "text": "17 Pseudorandom Number Generation\nnormal : 정규분포\nsamples = np.random.normal(size=(4,4))\nsamples\narray([[ 0.5732,  0.1933,  0.4429,  1.2796],\n       [ 0.575 ,  0.4339, -0.7658, -1.237 ],\n       [-0.5367,  1.8545, -0.92  , -0.1082],\n       [ 0.1525,  0.9435, -1.0953, -0.144 ]])\nfrom random import normalvariate\nN = 1000000\n%timeit samples = [normalvariate(0,1) for _ in range(N)]\n%timeit np.random.normal(size=N)\n1.14 s ± 168 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n33.6 ms ± 3.1 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\nnp.random.seed(1234)\nnp.random.RandomState : 난수 생성기 객체 생성\nrng = np.random.RandomState(1234)\nrng.randn(10)\narray([ 0.4714, -1.191 ,  1.4327, -0.3127, -0.7206,  0.8872,  0.8596,\n       -0.6365,  0.0157, -2.2427])"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#example-random-walks",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#example-random-walks",
    "title": "advanced_python CH4",
    "section": "18 Example : Random Walks",
    "text": "18 Example : Random Walks\nimport random\n\nrandom.seed(42)\nposition = 0      # 초기 위치\nwalk = [position]\nsteps = 1000      # 전체 스텝 수\nstep_list = np.empty(steps, dtype=int)\nfor i in range(steps):\n    # 0또는1을 랜덤하게 선택하여 1이면 1을, 0이면 -1을 step 변수에 할당 \n    # 스텝 마다 움직이는 방향 랜덤\n    step = 1 if random.randint(0,1) else -1\n    position += step # 현재위치에 step 값을 더하여 다음 위치를 계산\n    walk.append(position)\n    step_list[i] = i\nplt.figure()\n<Figure size 1000x600 with 0 Axes>\n\n\n\n\n<Figure size 1000x600 with 0 Axes>\nplt.plot(walk[:1000])\n[<matplotlib.lines.Line2D at 0x211ae859310>]\n\n\n\npng\n\n\n가장 높은 포지션에 도달했을 때는 몇번째 step인가, 가장 높은 포지션\nnp.argmax : 배열에서 가장 큰 인덱스 위치\nnp.max : 배열에서 가장 큰 값\nnp.argmax(walk), np.max(walk)\n(997, 29)\n지금 이사람은 앞으로 몇번 전진했을까요?\n# 전진만한 값의 총합\nnp.sum(np.array(walk)>0)\n219\n# 처음으로 원점으로부터 10만큼 떨어진 위치는 무엇?\n(np.abs(walk) >= 10).argmax()\n14\n# 전진한 값의 총합\nimport random\n\nrandom.seed(42)\nposition = 0\nwalk = [position]\nnsteps = 1000\nstep_list =[]\nfor i in range(nsteps):\n    step = 1 if random.randint(0,1) else -1\n    position += step\n    walk.append(position)\n    step_list.append(step)\n\nnp.sum(np.array(step_list)==1)\n514\n주사위 (1~6)의 눈금을 가지는 주사위를 던져서 5이상이면 앞으로 한칸, 그렇지 않으면 뒤로 한칸 가는 random walk 작성\ncumsum은 array를 input으로 받아서 누적합을 계산해준다\nnsteps = 1000\ndraws = np.random.randint(1,7,size = nsteps)\n#draws[:100]\nsteps = np.where(draws >= 5,1,-1)\nwalk = steps.cumsum()\nwalk\narray([  -1,    0,    1,    2,    1,    0,   -1,   -2,   -3,   -4,   -3,\n         -2,   -3,   -4,   -5,   -6,   -5,   -4,   -5,   -6,   -7,   -8,\n         -9,   -8,   -7,   -8,   -9,  -10,  -11,  -12,  -13,  -14,  -15,\n        -16,  -17,  -18,  -17,  -18,  -19,  -20,  -21,  -22,  -23,  -24,\n        -23,  -24,  -25,  -24,  -25,  -24,  -23,  -24,  -23,  -22,  -21,\n        -22,  -21,  -22,  -21,  -22,  -21,  -20,  -21,  -22,  -23,  -24,\n        -23,  -24,  -23,  -24,  -25,  -26,  -27,  -26,  -27,  -26,  -25,\n        -24,  -25,  -24,  -23,  -24,  -25,  -24,  -23,  -24,  -25,  -26,\n        -27,  -28,  -27,  -28,  -29,  -30,  -31,  -32,  -33,  -34,  -35,\n        -36,  -37,  -36,  -35,  -36,  -37,  -36,  -37,  -36,  -35,  -36,\n        -37,  -38,  -39,  -40,  -39,  -38,  -39,  -38,  -39,  -40,  -41,\n        -40,  -41,  -40,  -41,  -42,  -41,  -42,  -41,  -42,  -43,  -44,\n        -45,  -46,  -47,  -48,  -49,  -50,  -51,  -52,  -53,  -52,  -53,\n        -54,  -55,  -56,  -57,  -56,  -55,  -56,  -57,  -56,  -55,  -54,\n        -55,  -56,  -57,  -56,  -57,  -56,  -57,  -58,  -57,  -58,  -59,\n        -60,  -61,  -62,  -63,  -64,  -65,  -66,  -67,  -66,  -65,  -64,\n        -63,  -64,  -65,  -64,  -65,  -66,  -67,  -68,  -69,  -68,  -67,\n        -68,  -69,  -70,  -69,  -68,  -67,  -68,  -69,  -68,  -69,  -70,\n        -71,  -72,  -71,  -72,  -73,  -74,  -75,  -76,  -77,  -78,  -77,\n        -78,  -79,  -78,  -79,  -80,  -81,  -82,  -83,  -84,  -85,  -86,\n        -85,  -86,  -85,  -86,  -87,  -88,  -87,  -88,  -87,  -88,  -89,\n        -90,  -91,  -92,  -93,  -92,  -93,  -94,  -95,  -94,  -95,  -94,\n        -95,  -96,  -97,  -98,  -99,  -98,  -99, -100,  -99,  -98,  -97,\n        -98,  -97,  -98,  -99, -100, -101, -102, -101, -102, -103, -104,\n       -103, -104, -103, -102, -103, -104, -105, -106, -107, -106, -105,\n       -104, -105, -104, -103, -102, -103, -104, -103, -104, -103, -104,\n       -105, -106, -107, -106, -105, -106, -107, -108, -107, -108, -109,\n       -110, -109, -110, -111, -112, -113, -114, -113, -114, -115, -116,\n       -117, -118, -119, -118, -119, -120, -119, -120, -119, -118, -119,\n       -120, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128,\n       -127, -128, -129, -130, -129, -130, -131, -130, -131, -130, -129,\n       -130, -131, -132, -133, -132, -133, -134, -133, -134, -135, -134,\n       -133, -132, -133, -134, -133, -134, -133, -134, -135, -134, -133,\n       -134, -133, -132, -131, -130, -131, -132, -133, -134, -133, -132,\n       -133, -134, -135, -134, -135, -136, -137, -138, -139, -138, -139,\n       -140, -141, -140, -141, -142, -143, -144, -145, -146, -147, -146,\n       -145, -146, -145, -146, -147, -148, -147, -146, -147, -148, -149,\n       -150, -149, -150, -149, -150, -151, -150, -151, -152, -153, -154,\n       -155, -154, -155, -156, -155, -156, -157, -158, -157, -158, -159,\n       -158, -159, -160, -161, -162, -163, -162, -163, -162, -161, -160,\n       -161, -162, -161, -162, -163, -162, -163, -164, -163, -162, -163,\n       -162, -163, -164, -163, -164, -165, -166, -167, -168, -169, -170,\n       -171, -170, -171, -172, -173, -174, -175, -176, -175, -176, -177,\n       -176, -175, -176, -175, -176, -175, -176, -177, -176, -175, -176,\n       -175, -176, -177, -176, -175, -176, -177, -178, -179, -180, -181,\n       -180, -179, -178, -179, -178, -179, -180, -179, -178, -179, -180,\n       -181, -182, -181, -180, -181, -180, -181, -180, -181, -182, -183,\n       -184, -183, -184, -185, -186, -187, -188, -189, -190, -191, -192,\n       -193, -194, -195, -194, -195, -196, -195, -196, -197, -196, -197,\n       -196, -197, -198, -199, -200, -199, -200, -201, -200, -199, -200,\n       -201, -202, -203, -204, -205, -204, -203, -204, -205, -204, -205,\n       -204, -205, -204, -205, -206, -207, -208, -209, -210, -209, -208,\n       -207, -208, -207, -208, -209, -210, -211, -212, -213, -214, -213,\n       -214, -213, -212, -213, -212, -213, -212, -211, -212, -211, -212,\n       -213, -214, -215, -214, -215, -214, -215, -214, -215, -216, -217,\n       -216, -217, -216, -215, -214, -213, -212, -213, -214, -215, -216,\n       -217, -218, -219, -220, -219, -220, -221, -222, -223, -224, -225,\n       -224, -223, -224, -225, -226, -227, -228, -229, -230, -231, -230,\n       -231, -230, -231, -232, -233, -234, -235, -234, -233, -232, -231,\n       -232, -233, -234, -235, -234, -235, -234, -233, -234, -235, -234,\n       -235, -236, -237, -236, -237, -238, -237, -238, -239, -240, -239,\n       -240, -239, -240, -241, -242, -243, -244, -243, -244, -243, -242,\n       -243, -244, -245, -246, -245, -244, -243, -242, -243, -244, -243,\n       -244, -245, -246, -247, -248, -249, -250, -251, -252, -253, -254,\n       -253, -254, -253, -254, -255, -256, -255, -256, -257, -256, -257,\n       -258, -259, -260, -261, -262, -263, -262, -261, -262, -263, -264,\n       -265, -266, -267, -268, -269, -270, -269, -270, -269, -270, -269,\n       -270, -271, -270, -271, -272, -271, -272, -271, -272, -273, -272,\n       -273, -272, -271, -272, -271, -272, -273, -272, -273, -274, -275,\n       -274, -275, -274, -275, -276, -275, -276, -275, -274, -275, -274,\n       -275, -276, -277, -278, -279, -280, -281, -280, -281, -282, -283,\n       -284, -283, -284, -285, -286, -287, -288, -289, -290, -289, -290,\n       -291, -292, -291, -292, -291, -290, -291, -292, -291, -292, -293,\n       -292, -293, -292, -293, -294, -293, -292, -293, -294, -295, -294,\n       -295, -296, -297, -298, -299, -300, -301, -302, -303, -304, -305,\n       -304, -305, -306, -307, -308, -307, -308, -307, -306, -307, -308,\n       -307, -308, -309, -308, -307, -306, -305, -304, -305, -304, -305,\n       -304, -305, -306, -307, -306, -307, -308, -309, -310, -309, -310,\n       -311, -312, -313, -314, -313, -314, -313, -314, -313, -312, -311,\n       -310, -309, -310, -311, -312, -313, -314, -313, -314, -315, -316,\n       -317, -318, -319, -320, -321, -322, -323, -324, -325, -326, -327,\n       -328, -329, -330, -331, -332, -331, -332, -333, -332, -331, -332,\n       -333, -334, -335, -334, -333, -332, -333, -334, -335, -336, -335,\n       -334, -333, -334, -333, -332, -333, -334, -335, -334, -335, -336,\n       -337, -338, -337, -336, -337, -336, -335, -336, -335, -336, -335,\n       -334, -335, -336, -337, -338, -339, -340, -341, -340, -341, -340,\n       -341, -340, -341, -342, -343, -344, -343, -342, -341, -342, -343,\n       -344, -345, -344, -343, -344, -345, -344, -343, -344, -345, -346,\n       -345, -346, -345, -346, -347, -346, -347, -348, -349, -350, -351,\n       -352, -353, -352, -353, -352, -351, -352, -353, -354, -353, -354,\n       -355, -356, -355, -356, -357, -358, -359, -358, -359, -358])\nwalk.min(), walk.max()\n(-359, 2)\n(np.abs(walk) >= 10).argmax()\n27\nnsteps = 1000\ndraws = np.random.randint(0,2,size = nsteps)\nsteps = np.where(draws > 0,1,-1)\nwalk = steps.cumsum()\nwalk\narray([-1, -2, -3, -4, -3, -4, -5, -4, -5, -4, -3, -2, -1,  0,  1,  2,  1,\n        0, -1,  0,  1,  0, -1, -2, -3, -2, -3, -2, -3, -2, -1, -2, -1,  0,\n       -1,  0, -1,  0, -1,  0,  1,  0, -1, -2, -3, -2, -1, -2, -1,  0,  1,\n        2,  1,  2,  3,  4,  5,  6,  5,  4,  3,  2,  3,  4,  3,  2,  3,  2,\n        3,  4,  3,  2,  3,  4,  5,  4,  5,  6,  5,  4,  5,  4,  5,  6,  7,\n        8,  7,  6,  7,  8,  7,  8,  9, 10, 11, 12, 13, 12, 11, 10, 11, 12,\n       13, 14, 15, 16, 15, 16, 15, 14, 15, 14, 15, 14, 15, 16, 15, 16, 17,\n       18, 19, 18, 19, 20, 19, 18, 19, 18, 17, 16, 17, 18, 17, 18, 19, 18,\n       19, 20, 21, 20, 21, 22, 23, 22, 23, 22, 23, 22, 23, 22, 21, 20, 19,\n       18, 19, 20, 19, 18, 19, 18, 17, 16, 17, 18, 17, 18, 19, 18, 17, 16,\n       17, 18, 17, 16, 17, 18, 17, 16, 17, 16, 17, 18, 17, 18, 17, 16, 17,\n       18, 17, 18, 19, 18, 19, 18, 19, 18, 19, 20, 19, 20, 19, 20, 19, 18,\n       17, 18, 19, 20, 19, 18, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21,\n       22, 21, 20, 19, 18, 19, 18, 19, 18, 19, 18, 17, 18, 17, 16, 17, 16,\n       17, 18, 19, 18, 19, 18, 19, 18, 17, 18, 17, 18, 19, 20, 19, 20, 19,\n       20, 19, 18, 19, 18, 17, 16, 17, 16, 15, 16, 15, 16, 17, 18, 19, 18,\n       19, 18, 19, 18, 19, 20, 21, 22, 21, 22, 21, 20, 19, 20, 19, 18, 17,\n       18, 19, 18, 17, 16, 15, 16, 15, 14, 13, 12, 13, 12, 13, 14, 13, 14,\n       15, 16, 17, 18, 19, 18, 17, 16, 17, 18, 19, 20, 19, 18, 17, 16, 17,\n       18, 17, 16, 17, 16, 17, 18, 17, 18, 17, 18, 19, 18, 17, 16, 15, 14,\n       15, 14, 13, 14, 15, 16, 15, 14, 13, 12, 13, 12, 13, 14, 13, 12, 13,\n       14, 13, 12, 13, 14, 15, 16, 17, 16, 15, 14, 15, 14, 15, 14, 13, 12,\n       11, 12, 13, 12, 11, 10, 11, 10,  9,  8,  9, 10, 11, 12, 11, 12, 11,\n       12, 11, 12, 11, 10,  9,  8,  9, 10, 11, 10, 11, 12, 13, 14, 13, 14,\n       15, 14, 15, 16, 17, 18, 19, 18, 17, 18, 19, 18, 17, 16, 17, 18, 19,\n       18, 17, 18, 17, 18, 19, 18, 17, 16, 17, 18, 17, 16, 15, 14, 15, 14,\n       15, 14, 13, 14, 15, 14, 13, 14, 13, 14, 15, 16, 15, 16, 17, 16, 15,\n       14, 13, 12, 13, 12, 11, 10,  9, 10,  9, 10,  9,  8,  7,  6,  5,  6,\n        5,  6,  7,  8,  7,  8,  9, 10, 11, 12, 13, 12, 11, 12, 11, 10,  9,\n        8,  7,  8,  7,  8,  7,  6,  7,  6,  7,  8,  7,  6,  5,  4,  5,  4,\n        5,  6,  7,  6,  7,  8,  9,  8,  9, 10,  9,  8,  7,  6,  7,  6,  7,\n        8,  9, 10, 11, 10,  9, 10,  9, 10,  9,  8,  7,  8,  7,  8,  7,  8,\n        9, 10, 11, 10, 11, 12, 13, 12, 13, 12, 11, 12, 13, 12, 13, 12, 11,\n       12, 13, 12, 13, 12, 11, 10,  9, 10,  9, 10,  9, 10,  9, 10, 11, 10,\n       11, 12, 13, 14, 15, 14, 13, 14, 15, 16, 15, 14, 15, 16, 15, 14, 13,\n       12, 13, 12, 13, 12, 11, 10,  9,  8,  7,  6,  7,  6,  7,  6,  7,  8,\n        9, 10,  9, 10,  9,  8,  9,  8,  7,  8,  9,  8,  7,  8,  9, 10, 11,\n       12, 11, 12, 13, 14, 13, 14, 13, 14, 15, 16, 17, 18, 17, 18, 17, 18,\n       19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 27, 26, 27, 28, 29, 30, 29,\n       28, 29, 28, 29, 30, 31, 32, 31, 32, 31, 32, 31, 30, 31, 32, 33, 34,\n       35, 34, 35, 36, 35, 36, 35, 36, 35, 36, 37, 38, 39, 40, 41, 42, 43,\n       44, 45, 46, 47, 46, 45, 44, 45, 44, 43, 42, 41, 42, 41, 40, 41, 42,\n       43, 42, 41, 42, 41, 40, 39, 38, 39, 40, 41, 42, 43, 42, 41, 40, 41,\n       40, 39, 40, 41, 40, 39, 40, 39, 40, 39, 40, 41, 40, 39, 40, 39, 40,\n       41, 42, 43, 42, 43, 44, 45, 44, 45, 44, 45, 46, 47, 48, 49, 50, 49,\n       50, 51, 52, 53, 54, 53, 54, 55, 56, 55, 54, 55, 54, 55, 56, 57, 58,\n       59, 58, 59, 60, 59, 58, 57, 58, 59, 58, 57, 58, 59, 58, 57, 58, 57,\n       56, 55, 56, 57, 58, 59, 58, 57, 56, 55, 54, 53, 54, 53, 52, 51, 50,\n       51, 52, 53, 54, 53, 52, 53, 54, 53, 52, 51, 52, 53, 54, 53, 54, 53,\n       52, 51, 52, 51, 52, 53, 52, 53, 52, 51, 52, 53, 54, 55, 56, 55, 54,\n       55, 54, 53, 52, 53, 54, 55, 56, 55, 56, 55, 54, 55, 54, 53, 54, 53,\n       52, 51, 50, 49, 48, 49, 48, 47, 46, 47, 48, 49, 50, 49, 48, 49, 50,\n       51, 52, 51, 50, 49, 48, 47, 48, 47, 48, 49, 48, 47, 48, 49, 50, 49,\n       50, 49, 50, 49, 50, 51, 52, 53, 52, 53, 54, 53, 52, 53, 52, 53, 52,\n       53, 52, 51, 50, 51, 50, 51, 52, 51, 50, 49, 50, 49, 50, 51, 50, 51,\n       52, 53, 52, 53, 54, 55, 54, 55, 54, 53, 52, 51, 50, 51, 50, 49, 50,\n       51, 50, 49, 50, 51, 50, 51, 50, 51, 52, 53, 52, 53, 52, 53, 52, 51,\n       50, 49, 48, 47, 46, 47, 48, 49, 48, 49, 48, 49, 48, 49, 48, 47, 46,\n       45, 44, 45, 46, 47, 46, 45, 44, 45, 46, 45, 44, 45, 46])\nwalk.min(), walk.max()\n(-5, 60)\n(np.abs(walk) >= 10).argmax()\n93"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#simulating-many-random-walks-at-once",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#simulating-many-random-walks-at-once",
    "title": "advanced_python CH4",
    "section": "19 Simulating Many Random Walks at Once",
    "text": "19 Simulating Many Random Walks at Once\nnwalks = 5000\nnsteps = 1000\ndraws = np.random.randint(0,2, size = (nwalks, nsteps)) # 0 or 1\nsteps = np.where(draws >0, 1, -1)\nwalks = steps.cumsum(1)\nwalks\narray([[  1,   2,   3, ...,   8,   7,   6],\n       [ -1,   0,   1, ..., -34, -35, -36],\n       [ -1,  -2,  -1, ...,  66,  67,  66],\n       ...,\n       [ -1,  -2,  -3, ..., -34, -35, -34],\n       [  1,   2,   1, ...,  74,  75,  74],\n       [ -1,  -2,  -3, ..., -32, -31, -32]])\nwalks.max()\n112\nwalks.min()\n-111\nhits30 = (np.abs(walks) >= 30).any(1)\nhits30.sum()\n3410\ncrossing_times = (np.abs(walks[hits30]) >= 30).argmax(1)\ncrossing_times.mean()\n496.2932551319648\nsteps = np.random.normal(loc=0, scale=0.25,\n                        size = (nwalks, nsteps))\nsteps\narray([[ 0.0719,  0.1141, -0.0422, ...,  0.6224,  0.0603, -0.1633],\n       [ 0.3211, -0.1576,  0.016 , ..., -0.2379,  0.2592, -0.0399],\n       [ 0.1593,  0.4357,  0.147 , ...,  0.0683, -0.1233,  0.0522],\n       ...,\n       [ 0.177 ,  0.4305,  0.1017, ..., -0.3649, -0.2256,  0.1905],\n       [-0.0539,  0.2377,  0.0203, ..., -0.2376,  0.052 ,  0.3039],\n       [ 0.349 ,  0.3813,  0.0644, ...,  0.1646,  0.3622,  0.1421]])"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#quiz-3-1",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#quiz-3-1",
    "title": "advanced_python CH4",
    "section": "20 Quiz 3",
    "text": "20 Quiz 3\nrng = np.random.RandomState(1234)\narr = rng.standard_normal(100)\narr\narray([ 0.4714, -1.191 ,  1.4327, -0.3127, -0.7206,  0.8872,  0.8596,\n       -0.6365,  0.0157, -2.2427,  1.15  ,  0.9919,  0.9533, -2.0213,\n       -0.3341,  0.0021,  0.4055,  0.2891,  1.3212, -1.5469, -0.2026,\n       -0.656 ,  0.1934,  0.5534,  1.3182, -0.4693,  0.6756, -1.817 ,\n       -0.1831,  1.059 , -0.3978,  0.3374,  1.0476,  1.0459,  0.8637,\n       -0.1221,  0.1247, -0.3228,  0.8417,  2.391 ,  0.0762, -0.5664,\n        0.0361, -2.075 ,  0.2478, -0.8972, -0.1368,  0.0183,  0.7554,\n        0.2153,  0.841 , -1.4458, -1.402 , -0.1009, -0.5482, -0.1446,\n        0.354 , -0.0355,  0.5657,  1.5457, -0.9742, -0.0703,  0.308 ,\n       -0.2085,  1.0338, -2.4005,  2.0306, -1.1426,  0.2119,  0.7047,\n       -0.7854,  0.4621,  0.7042,  0.5235, -0.9263,  2.0078,  0.227 ,\n       -1.1527,  0.632 ,  0.0395,  0.4644, -3.5635,  1.3211,  0.1526,\n        0.1645, -0.4301,  0.7674,  0.9849,  0.2708,  1.392 ,  0.0798,\n       -0.4   , -1.0279, -0.5847,  0.8166, -0.0819, -0.3448,  0.5283,\n       -1.069 , -0.5119])\n# 0보다 큰 수의 개수\n(arr>0).sum()\n57\n\n20.1 0보다 큰 모든 수의 합\nnp.sum(arr[arr>0])\n39.714368245810974\narr[arr>0].sum()\n39.714368245810974"
  }
]