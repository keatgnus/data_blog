[
  {
    "objectID": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html",
    "href": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html",
    "title": "advanced_python CH3",
    "section": "",
    "text": "Jupyter에서 실행하기\nBasic Grammar 2"
  },
  {
    "objectID": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#advanced-python-ch3",
    "href": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#advanced-python-ch3",
    "title": "advanced_python CH3",
    "section": "1 Advanced Python CH3",
    "text": "1 Advanced Python CH3"
  },
  {
    "objectID": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#tuple",
    "href": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#tuple",
    "title": "advanced_python CH3",
    "section": "2 Tuple",
    "text": "2 Tuple\n불변한 데이터 타입, 변경 삭제 불가\ntup = 4,5,6\ntup\n(4, 5, 6)\nnested_tup = (4,5,6),(7,8)\nnested_tup\n((4, 5, 6), (7, 8))\ntuple([4,0,2])\n(4, 0, 2)\ntup = tuple('study')\ntup\n('s', 't', 'u', 'd', 'y')\ntup[0]\n's'\n### 잘못된 예시 : 변경 불가\n\ntup = tuple(['foo', [1,2], True])\ntup[2] = False\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\nCell In[10], line 4\n      1 ### 잘못된 예시 : 변경 불가\n      3 tup = tuple(['foo', [1,2], True])\n----> 4 tup[2] = False\n\n\nTypeError: 'tuple' object does not support item assignment\ntup[1].append(3)\ntup\n('foo', [1, 2, 3], True)\n(4, None, 'foo') + (6, 0) + ('bar',)\n(4, None, 'foo', 6, 0, 'bar')\n('foo','bar') * 4\n('foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar')"
  },
  {
    "objectID": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#unpacking-tuples",
    "href": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#unpacking-tuples",
    "title": "advanced_python CH3",
    "section": "3 Unpacking tuples",
    "text": "3 Unpacking tuples\ntuple의 각 요소들을 변수에 할당\ntup = (4,5,6)\na,b,c = tup\nb\n5\ntup = 4,5,(6,7)\na,b,(c,d) = tup\na,b,c\n(4, 5, 6)\ntmp = a\na = b\nb = tmp\n\na, b =1,2\na\n1\nb,a = a,b\na\n2\nb\n1\nseq = [(1,2,3), (4,5,6), (7,8,9)]\nfor a,b,c in seq:\n    print('a={0}, b={1}, c={2}'.format(a,b,c))\na=1, b=2, c=3\na=4, b=5, c=6\na=7, b=8, c=9\nseq2 = [(4,4,4), (7,7,7), (9,9,9)]\nfor z,y,x in seq2:\n    print(\"z={0}, y={1}, x={2}\".format(z,y,x))\nz=4, y=4, x=4\nz=7, y=7, x=7\nz=9, y=9, x=9\nfor a in seq:\n    print(a)\n(1, 2, 3)\n(4, 5, 6)\n(7, 8, 9)\nfor c in seq2:\n    print(c)\n(4, 4, 4)\n(7, 7, 7)\n(9, 9, 9)\n# * 마크 : * 부터 출력X\n\nvalues = 1,2,3,4,5\na,b, * rest = values\na,b\n(1, 2)\nrest\n[3, 4, 5]\na,b, *_ = values\n_\n[3, 4, 5]\nvalues2 = 9,9,0,1,1,5\nz,x, * hi = values2\nprint(z,x)\nprint(hi)\n9 9\n[0, 1, 1, 5]"
  },
  {
    "objectID": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#tuple-methods",
    "href": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#tuple-methods",
    "title": "advanced_python CH3",
    "section": "4 Tuple methods",
    "text": "4 Tuple methods\na = (1,2,2,2,3,4,2)\na.count(2)\n4\n\n4.1 Quiz 1\n숫자 2가 몇개 있는지 세는 코드를 loop문 이용해 만들기\ncount = 0\nfor i in a:\n    if i ==2:\n        count +=1\nprint(count)\n4"
  },
  {
    "objectID": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#list",
    "href": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#list",
    "title": "advanced_python CH3",
    "section": "5 List",
    "text": "5 List\na_list = list([2,3,7,None])\ntup = ('foo','bar','baz')\nb_list = list(tup)\na_list, b_list\n([2, 3, 7, None], ['foo', 'bar', 'baz'])\nb_list[1] = 'peekaboo'\nb_list\n['foo', 'peekaboo', 'baz']\ngen = range(10)\ngen\nlist(gen)\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
  },
  {
    "objectID": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#adding-removing-elements",
    "href": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#adding-removing-elements",
    "title": "advanced_python CH3",
    "section": "6 Adding & Removing elements",
    "text": "6 Adding & Removing elements\nb_list.append('dwarf')\nb_list\n['foo', 'peekaboo', 'baz', 'dwarf']\n# 자리 지정 추가\n\nb_list.insert(1, 'red')\nb_list\n['foo', 'red', 'peekaboo', 'baz', 'dwarf']\n# pop : 제거\n\nb_list.pop(2)\nb_list\n['foo', 'red', 'baz', 'dwarf']\n# 추가\n\nb_list.append('foo')\nb_list\n['foo', 'red', 'baz', 'dwarf', 'foo']\n# 제거 : 앞에서부터 순서대로 삭제\n\nb_list.remove('foo')\nb_list\n['red', 'baz', 'dwarf', 'foo']\n'dwarf' in b_list, 'dwarf' not in b_list\n(True, False)"
  },
  {
    "objectID": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#concatenating-and-combining-lists",
    "href": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#concatenating-and-combining-lists",
    "title": "advanced_python CH3",
    "section": "7 Concatenating and combining lists",
    "text": "7 Concatenating and combining lists\n[4, None, 'foo'] + [7,8,(2,3)]\n[4, None, 'foo', 7, 8, (2, 3)]\n# extend : 콘캣 함수\n\nx = [4, None,'foo']\nx.extend([7,8,(2,3)])\nx\n[4, None, 'foo', 7, 8, (2, 3)]"
  },
  {
    "objectID": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#sorting",
    "href": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#sorting",
    "title": "advanced_python CH3",
    "section": "8 Sorting",
    "text": "8 Sorting\n# 오름 차순\n\na = [7,2,5,1,3]\na.sort()\na\n[1, 2, 3, 5, 7]\n# key : 조건 ex) key=len 길이 순서\n# 길이 같으면 원래 순서 유지\n\nb = ['saw','small','He','foxes','six']\nb.sort(key=len)\nb\n['He', 'saw', 'six', 'small', 'foxes']"
  },
  {
    "objectID": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#binary-search-and-maintaining-a-sorted-list",
    "href": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#binary-search-and-maintaining-a-sorted-list",
    "title": "advanced_python CH3",
    "section": "9 Binary search and maintaining a sorted list",
    "text": "9 Binary search and maintaining a sorted list\n# bisect : 특정 값이 들어갈 위치 탐색\n\nimport bisect\nc = [1,2,2,2,3,4,7]\nbisect.bisect(c,2), bisect.bisect(c,5)\n(4, 6)\n# insort : 특정 값이 들어갈 위치에 삽입\n\nbisect.insort(c,6)\nc\n[1, 2, 2, 2, 3, 4, 6, 7]"
  },
  {
    "objectID": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#slicing",
    "href": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#slicing",
    "title": "advanced_python CH3",
    "section": "10 Slicing",
    "text": "10 Slicing\nseq = [7,2,3,7,5,6,0,1]\nseq\n[7, 2, 3, 7, 5, 6, 0, 1]\n# 3번째 부터 4번째 전까지 (3번째) 선택 + 변경\n\nseq[3:4] = [6,3]\nseq\n[7, 2, 3, 6, 3, 5, 6, 0, 1]\n# 5번째 전까지 출력\n\nseq[:5]\n[7, 2, 3, 6, 3]\n# 3번째 부터 출력\n\nseq[3:]\n[6, 3, 5, 6, 0, 1]\n# 뒤에서 4개 출력\n\nseq[-4:]\n[5, 6, 0, 1]\n# 뒤에서 끝 2개 제외 6개 출력\n\nseq[-6:-2]\n[6, 3, 5, 6]\n# 앞에서부터 간격 2로 출력\n\nseq[::2]\n[7, 3, 3, 6, 1]\n# 뒤에서부터 간격 1로 출력\n\nseq[::-1]\n[1, 0, 6, 5, 3, 6, 3, 2, 7]\n\n10.1 Quiz 2\n\n1,0,6,5 출력\n\nseq\n[7, 2, 3, 6, 3, 5, 6, 0, 1]\nseq[-4:][::-1]\n[1, 0, 6, 5]\nseq[:4:-1]\n[1, 0, 6, 5]"
  },
  {
    "objectID": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#do-something-with-value",
    "href": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#do-something-with-value",
    "title": "advanced_python CH3",
    "section": "11 do something with value",
    "text": "11 do something with value\n# enumerate() : 인덱스, 값 순회\n\nsome_list = ['foo','bar','baz']\nmapping = {}\nfor i, v in enumerate(some_list):\n    mapping[v] = i\nmapping\n{'foo': 0, 'bar': 1, 'baz': 2}\ns = ['asd', 'zxc','qwe']\nm = {}\nfor a,b in enumerate(s):\n    m[b] = a\nm   \n{'asd': 0, 'zxc': 1, 'qwe': 2}\n# sorted() : 작은것, 순서대로 정렬\n\nsorted([7,1,2,6,0,3,2]), sorted('horse race')\n([0, 1, 2, 2, 3, 6, 7], [' ', 'a', 'c', 'e', 'e', 'h', 'o', 'r', 'r', 's'])\n# zip() : 순서쌍으로 묶기\n\nseq1 = ['foo','bar','baz']\nseq2 = ['one','two','three']\nzipped = zip(seq1, seq2)\nlist(zipped)\n[('foo', 'one'), ('bar', 'two'), ('baz', 'three')]\n# 개수 안 맞으면 최소 개수 출력\n\nseq3 = [False, True]\nlist(zip(seq1, seq2, seq3))\n[('foo', 'one', False), ('bar', 'two', True)]\n# enumerate() + zip() 활용\n\nfor i, (a,b) in enumerate(zip(seq1, seq2)):\n    print('{0}: {1}, {2}'.format(i,a,b))\n0: foo, one\n1: bar, two\n2: baz, three\nfor a,(b,c,d) in enumerate(zip(seq1,seq2,seq3)):\n    print(\"{0}: {1}, {2}\".format(a,b,c,d))\n0: foo, one\n1: bar, two\n# reversed() : 거꾸로\n\nlist(reversed(range(10)))\n[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
  },
  {
    "objectID": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#dict",
    "href": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#dict",
    "title": "advanced_python CH3",
    "section": "12 dict",
    "text": "12 dict\n# key 값 : 'a','b', value 값 : 'some value',[1, 2, 3, 4]\n\nempty_dict = {}\nd1 = {'a' : 'some value', 'b' : [1,2,3,4]}\nd1\n{'a': 'some value', 'b': [1, 2, 3, 4]}\n# 딕셔너리에 새로운 key-value 쌍 추가\n\nd1['an integer'] = 7\nd1\n{'a': 'some value', 'b': [1, 2, 3, 4], 'an integer': 7}\n# key에 대한 value값 반환\n\nd1['b']\n[1, 2, 3, 4]\nd1['an integer']\n7\n'b' in d1\nTrue\nd1[5] = 'some value'\nd1\n{'a': 'some value', 'b': [1, 2, 3, 4], 'an integer': 7, 5: 'some value'}\nd1['dummy'] = 'another value'\nd1\n{'a': 'some value',\n 'b': [1, 2, 3, 4],\n 'an integer': 7,\n 5: 'some value',\n 'dummy': 'another value'}\n# del : 순서쌍 삭제\n\ndel d1[5]\nd1\n{'a': 'some value',\n 'b': [1, 2, 3, 4],\n 'an integer': 7,\n 'dummy': 'another value'}\n# dummy 순서쌍 삭제후, ret에 value값 할당\n\nret = d1.pop('dummy')\nret\n'another value'\nd1\n{'a': 'some value', 'b': [1, 2, 3, 4], 7: 'an integer'}\n# key값, value값 확인\n\nlist(d1.keys()), list(d1.values())\n(['a', 'b', 'an integer'], ['some value', [1, 2, 3, 4], 7])\nd1.update({'b' : 'foo', 'c' : 12})\nd1\n{'a': 'some value', 'b': 'foo', 'an integer': 7, 'c': 12}"
  },
  {
    "objectID": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#creating-dicts-from-sequences",
    "href": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#creating-dicts-from-sequences",
    "title": "advanced_python CH3",
    "section": "13 Creating dicts from sequences",
    "text": "13 Creating dicts from sequences\n# dict + zip\n\nmapping = dict(zip(range(5), reversed(range(5))))\nmapping\n{0: 4, 1: 3, 2: 2, 3: 1, 4: 0}"
  },
  {
    "objectID": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#default-values",
    "href": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#default-values",
    "title": "advanced_python CH3",
    "section": "14 Default values",
    "text": "14 Default values\nwords = ['apple','bat','bar','atom','book']\nby_letter = {}\nfor word in words:\n    letter = word[0]\n    if letter not in by_letter:\n        by_letter[letter] = [word]\n    else:\n        by_letter[letter].append(word)\nby_letter\n{'a': ['apple', 'atom'], 'b': ['bat', 'bar', 'book']}"
  },
  {
    "objectID": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#valid-dict-key-types",
    "href": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#valid-dict-key-types",
    "title": "advanced_python CH3",
    "section": "15 Valid dict key types",
    "text": "15 Valid dict key types\n# 해시값 반환\n\nhash('string'), hash((1,2,(2,3)))\n(-5910375871019062728, -9209053662355515447)\n# list형식은 변경 가능한 객체이므로 해시값 X\n\nhash((1,2,[2,3]))\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\nCell In[178], line 3\n      1 # list형식은 변경 가능한 객체이므로 해시값 X\n----> 3 hash((1,2,[2,3]))\n\n\nTypeError: unhashable type: 'list'\nd = {}\nd[tuple([1,2,3])] = 5\nd\n{(1, 2, 3): 5}"
  },
  {
    "objectID": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#set",
    "href": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#set",
    "title": "advanced_python CH3",
    "section": "16 set",
    "text": "16 set\n# 중복값 없이 나열\n\nset([2,2,2,1,3,3])\n{1, 2, 3}\n# 중괄호로 가능\n\n{2,2,2,1,3,3}\n{1, 2, 3}\n{11,22,11,22}\n{11, 22}\na = {1,2,3,4,5}\nb = {3,4,5,6,7,8}\n# union(), | : 합집합 \n\na.union(b), a | b\n({1, 2, 3, 4, 5, 6, 7, 8}, {1, 2, 3, 4, 5, 6, 7, 8})\n# intersection, & : 교집합 \n\na.intersection(b), a & b\n({3, 4, 5}, {3, 4, 5})\nc = a.copy()\nc |= b\nc\n{1, 2, 3, 4, 5, 6, 7, 8}\nd = a.copy()\nd &= b      # d에 값 다시 할당\nd\n{3, 4, 5}\nmy_data = [1,2,3,4]\nmy_set = {tuple(my_data)}\nmy_set\n{(1, 2, 3, 4)}\n# 부분집합, 상위집합\na_set = {1,2,3,4,5}\n{1,2,3}.issubset(a_set), a_set.issuperset({1,2,3})\n(True, True)\n{1,2,3} == {3,2,1}\nTrue"
  },
  {
    "objectID": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#list-set-dict-comprehensions",
    "href": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#list-set-dict-comprehensions",
    "title": "advanced_python CH3",
    "section": "17 List, Set, Dict Comprehensions",
    "text": "17 List, Set, Dict Comprehensions\nstrings = ['a','as','bat','car','dove','python']\n[x.upper() for x in strings if len(x) >2]\n['BAT', 'CAR', 'DOVE', 'PYTHON']\nunique_lengths = {len(x) for x in strings}\nunique_lengths\n{1, 2, 3, 4, 6}\nset(map(len, strings))\n{1, 2, 3, 4, 6}\n\n17.1 Quiz 3\n\n각 객체가 몇번째에 있는지 출력\n\nloc_mapping = {val : index for index, val in enumerate(strings)}\nloc_mapping\n{'a': 0, 'as': 1, 'bat': 2, 'car': 3, 'dove': 4, 'python': 5}\n### 루프문 써서 만들기\n\nloc_mapping = {}\nfor index, val in enumerate(strings):\n    loc_mapping[val] = index\n\nloc_mapping\n{'a': 0, 'as': 1, 'bat': 2, 'car': 3, 'dove': 4, 'python': 5}\n\n\n17.2 Quiz 4\ndef multiply_by_two(x):\n    return x * 2\n\nmy_list = [1,2,3,4,5]\nresult = list(map(multiply_by_two, my_list))\n\nprint(result)\n[2, 4, 6, 8, 10]\n### lambda로 간결히 사용\n\nmy_list = [1,2,3,4,5]\nresult = list(map(lambda x: x*2, my_list))\nprint(result)\n[2, 4, 6, 8, 10]\nresult2 = list(map(lambda x: x*3,a))\nresult2\n[3, 6, 9, 12, 15]"
  },
  {
    "objectID": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#nested-list-comprehensions",
    "href": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#nested-list-comprehensions",
    "title": "advanced_python CH3",
    "section": "18 Nested list comprehensions",
    "text": "18 Nested list comprehensions\nall_data = [['John','Emily','Michael','Mary','Steven'],\n           ['Maria','Juan','Javier','Natalia','Pilar']]\n### e가 한개 이상인것 추출\nnames_of_interest = []\n\nfor names in all_data:\n    enough_es = [name for name in names if name .count('e')>=1]\n    names_of_interest.extend(enough_es)\n\nnames_of_interest\n['Michael', 'Steven', 'Javier']\nresult = [name for names in all_data for name in names\n          if name.count('e') >= 2]\nresult\n['Steven']\nsome_tuples = [(1,2,3),(4,5,6),(7,8,9)]\nflattened = [x for tup in some_tuples for x in tup]\nflattened\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\nfruits = ['사과','바나나','수박','딸기']\nfor i in range(len(fruits)):\n    print(i,fruits[i])\n0 사과\n1 바나나\n2 수박\n3 딸기\nfor i, fruit in enumerate(fruits):\n    print(i,fruit)\n0 사과\n1 바나나\n2 수박\n3 딸기\n\n[[x for x in tup] for tup in some_tuples]\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]"
  },
  {
    "objectID": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#functions",
    "href": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#functions",
    "title": "advanced_python CH3",
    "section": "19 Functions",
    "text": "19 Functions\na = None\n\ndef bind_a_variable():\n    global a\n    a = []\n    \nbind_a_variable()\n\nprint(a)\n[]\nfunc()\ndef func():\n    a = []\n    for i in range(5):\n        a.append(i)\n        \na\n[]\na = []\ndef func():\n    for i in range(5):\n        a.append(i)\n        \na\n[]\ndef f():\n    a=5\n    b=6\n    c=7\n    return {'a' : a, 'b' : b, 'c' : c}"
  },
  {
    "objectID": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#functions-are-object",
    "href": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#functions-are-object",
    "title": "advanced_python CH3",
    "section": "20 Functions are object",
    "text": "20 Functions are object\nstates = ['    Alabama ','Georgia!','Georgia','georgia','FlOrIda',\n         'sounth   carolina##', 'West virginia?']\nstates\n['    Alabama ',\n 'Georgia!',\n 'Georgia',\n 'georgia',\n 'FlOrIda',\n 'sounth   carolina##',\n 'West virginia?']\nimport re\n\ndef clean_strings(strings):\n    result = []\n    for value in strings:\n        value = value.strip()            # 앞뒤 공백 제거\n        value = re.sub('[!#?]','',value) # !,#,? → 공백 대체\n        value = value.title()            # 문자열을 제목 형태로 (첫 대문자, 나머지 소문자) \n        result.append(value)             # 정리된 문자열 value를 result 리스트에 추가\n    return result\n\nclean_strings(states)\n['Alabama',\n 'Georgia',\n 'Georgia',\n 'Georgia',\n 'Florida',\n 'Sounth   Carolina',\n 'West Virginia']\ndef remove_punctuation(value):\n    return re.sub('[!#?]','',value)\n\nclean_ops = [str.strip, remove_punctuation, str.title]\n\ndef clean_strings(strings, ops):\n    result = []\n    for value in strings:\n        for function in ops:\n            value = function(value)\n        result.append(value)\n    return result\nclean_strings(states, clean_ops)\n['Alabama',\n 'Georgia',\n 'Georgia',\n 'Georgia',\n 'Florida',\n 'Sounth   Carolina',\n 'West Virginia']\nfor x in map(remove_punctuation, states):\n    print(x)\n    Alabama \nGeorgia\nGeorgia\ngeorgia\nFlOrIda\nsounth   carolina\nWest virginia\n### 첫 대문자, 나머지 소문자\n'good man'.capitalize()\n'Good man'\n### 각 단어 첫 대문자\n'good man'.title()\n'Good Man'"
  },
  {
    "objectID": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#anonymous-lambda-functions",
    "href": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#anonymous-lambda-functions",
    "title": "advanced_python CH3",
    "section": "21 Anonymous (Lambda) Functions",
    "text": "21 Anonymous (Lambda) Functions\ndef apply_to_list(some_list, f):\n    return [f(x) for x in some_list]\n\nints = [4,0,1,5,6]\n\napply_to_list(ints, lambda x: x*2)\n[8, 0, 2, 10, 12]\nstrings = ['foo','card','bar','aaaa','abab']\nstrings\n['foo', 'card', 'bar', 'aaaa', 'abab']\nstrings.sort(key=lambda x: len(set(x)))\nstrings\n['aaaa', 'foo', 'abab', 'bar', 'card']\nlist(map(lambda x: x+10, [1,2,3,4,5,6]))\n[11, 12, 13, 14, 15, 16]"
  },
  {
    "objectID": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#generators",
    "href": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#generators",
    "title": "advanced_python CH3",
    "section": "22 Generators",
    "text": "22 Generators\nsome_dict = {'a':1, 'b':2, 'c':3}\nfor key in some_dict:\n    print(key)\na\nb\nc\ndict_iterator = iter(some_dict)\ndict_iterator\n<dict_keyiterator at 0x22ea41bfe50>\nlist(dict_iterator)\n['a', 'b', 'c']\ndef squares(n=10):\n    print('Generating squares from 1 to {0}'.format(n**2))\n    for i in range(1, n+1):\n        yield i**2\ngen = squares()\ngen\n<generator object squares at 0x0000022EA41D5AC0>\nfor x in gen:\n    print(x, end='')\nGenerating squares from 1 to 100\n149162536496481100"
  },
  {
    "objectID": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#generator-expressions",
    "href": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#generator-expressions",
    "title": "advanced_python CH3",
    "section": "23 Generator expressions",
    "text": "23 Generator expressions\ngen = (x **2 for x in range(100))\ngen\n<generator object <genexpr> at 0x0000022EA41D5EB0>\nsum(x**2 for x in range(100))\ndict((i, i**2) for i in range(5))\n{0: 0, 1: 1, 2: 4, 3: 9, 4: 16}"
  },
  {
    "objectID": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#itertools-module",
    "href": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#itertools-module",
    "title": "advanced_python CH3",
    "section": "24 itertools module",
    "text": "24 itertools module\nimport itertools\nfirst_letter = lambda x: x[0]\nnames = ['Alan','Adam','Wes','Will','Albert','Steven']\nfor letter, names in itertools.groupby(names, first_letter):\n    print(letter, list(names))\nA ['Alan', 'Adam']\nW ['Wes', 'Will']\nA ['Albert']\nS ['Steven']"
  },
  {
    "objectID": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#errors-exception-handling",
    "href": "posts/Advanced_Python_ch3/파이썬 심화 챕터3 공부.html#errors-exception-handling",
    "title": "advanced_python CH3",
    "section": "25 Errors & Exception Handling",
    "text": "25 Errors & Exception Handling\nfloat('1.2345')\n1.2345\nfloat('something')\n---------------------------------------------------------------------------\n\nValueError                                Traceback (most recent call last)\n\nCell In[125], line 1\n----> 1 float('something')\n\n\nValueError: could not convert string to float: 'something'\ndef attempt_float(x):\n    try:\n        return float(x)\n    except:\n        return x\nattempt_float('1.2345')\n1.2345\nattempt_float('something')\n'something'\nfloat((1,2))\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\nCell In[129], line 1\n----> 1 float((1,2))\n\n\nTypeError: float() argument must be a string or a number, not 'tuple'\ndef attempt_float(x):\n    try:\n        return float(x)\n    except (TypeError, ValueError):\n        return x\nattempt_float('1.2345')\n1.2345"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nadvanced_python CH3\n\n\n\n\n\n\n\ncode\n\n\nadvanced_python\n\n\njupyter\n\n\n\n\n\n\n\n\n\n\n\nMay 28, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nadvanced_python CH4\n\n\n\n\n\n\n\ncode\n\n\nadvanced_python\n\n\njupyter\n\n\n\n\n\n\n\n\n\n\n\nMay 28, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Mining CH3\n\n\n\n\n\n\n\ncode\n\n\ndata_mining\n\n\njupyter\n\n\n\n\n\n\n\n\n\n\n\nApr 27, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nSpatial_Info_Analysis CH2\n\n\n\n\n\n\n\ncode\n\n\nSpatial_Info_Analysis\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 22, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nSpatial_Info_Analysis CH1\n\n\n\n\n\n\n\ncode\n\n\nSpatial_Info_Analysis\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 20, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nOpendata_Analysis CH3\n\n\n\n\n\n\n\ncode\n\n\nopendata_analysis\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 16, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nOpendata_Analysis CH4\n\n\n\n\n\n\n\ncode\n\n\nopendata_analysis\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 16, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nOpendata_Analysis CH5\n\n\n\n\n\n\n\ncode\n\n\nopendata_analysis\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 16, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nOpendata_Analysis CH2\n\n\n\n\n\n\n\ncode\n\n\nopendata_analysis\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 15, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nOpendata_Analysis CH1\n\n\n\n\n\n\n\ncode\n\n\nopendata_analysis\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 14, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Visualization CH7\n\n\n\n\n\n\n\ncode\n\n\ndata_visualization\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 13, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Visualization CH6\n\n\n\n\n\n\n\ncode\n\n\ndata_visualization\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 12, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Visualization CH5\n\n\n\n\n\n\n\ncode\n\n\ndata_visualization\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 6, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Visualization CH4\n\n\n\n\n\n\n\ncode\n\n\ndata_visualization\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 5, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Mining CH1\n\n\n\n\n\n\n\ncode\n\n\ndata_mining\n\n\njupyter\n\n\n\n\n\n\n\n\n\n\n\nApr 4, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Mining CH2\n\n\n\n\n\n\n\ncode\n\n\ndata_mining\n\n\njupyter\n\n\n\n\n\n\n\n\n\n\n\nApr 4, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Visualization CH3\n\n\n\n\n\n\n\ncode\n\n\ndata_visualization\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nApr 4, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Visualization CH2\n\n\n\n\n\n\n\ncode\n\n\ndata_visualization\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nMar 30, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Visualization CH1\n\n\n\n\n\n\n\ncode\n\n\ndata_visualization\n\n\nrstudio\n\n\n\n\n\n\n\n\n\n\n\nMar 29, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nadvanced_python CH2\n\n\n\n\n\n\n\ncode\n\n\nadvanced_python\n\n\njupyter\n\n\n\n\n\n\n\n\n\n\n\nMar 28, 2023\n\n\nSeongtaek\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html",
    "title": "advanced_python CH4",
    "section": "",
    "text": "Jupyter에서 실행하기\nNumpy Basic"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#advanced-python-ch4---numpy-basic",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#advanced-python-ch4---numpy-basic",
    "title": "advanced_python CH4",
    "section": "1 Advanced Python CH4 - Numpy Basic",
    "text": "1 Advanced Python CH4 - Numpy Basic"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#array-vectorized-computation",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#array-vectorized-computation",
    "title": "advanced_python CH4",
    "section": "2 Array & Vectorized Computation",
    "text": "2 Array & Vectorized Computation\n랜덤 시드 : 숫자 지정시 동일 난수 생성\nimport numpy as np\nnp.random.seed(12345)\n그림 크기 지정\nimport matplotlib.pyplot as plt\nplt.rc('figure', figsize = (10,6))\nNumpy 배열 숫자들을 소수점 이하 4자리까지 표시\nnp.set_printoptions(precision=4, suppress=True)\n0부터 999999까지의 숫자로 이루어진 NumPy 배열\nmy_arr = np.arange(1000000)\nmy_arr\narray([     0,      1,      2, ..., 999997, 999998, 999999])\n0부터 999999까지의 숫자로 이루어진 리스트를 생성\nmy_list = list(range(1000000))\nNumpy배열이 list형태보다 계산이 더 빠름\n%time for _ in range(10): my_arr2 = my_arr*2\n%time for _ in range(10): my_list2 = [x*2 for x in my_list]\nCPU times: total: 31.2 ms\nWall time: 20.9 ms\nCPU times: total: 1.03 s\nWall time: 1.02 s"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#numpy-ndarray",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#numpy-ndarray",
    "title": "advanced_python CH4",
    "section": "3 Numpy ndarray",
    "text": "3 Numpy ndarray\n2행 3열의 랜덤난수 생성 (randn : 표준정규분포)\ndata = np.random.randn(2,3)\ndata\narray([[-0.2047,  0.4789, -0.5194],\n       [-0.5557,  1.9658,  1.3934]])\ndata *10\narray([[-2.0471,  4.7894, -5.1944],\n       [-5.5573, 19.6578, 13.9341]])\ndata + data\narray([[-0.4094,  0.9579, -1.0389],\n       [-1.1115,  3.9316,  2.7868]])\ndata.shape\n(2, 3)\ndata.dtype\ndtype('float64')"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#creating-ndarrays",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#creating-ndarrays",
    "title": "advanced_python CH4",
    "section": "4 Creating ndarrays",
    "text": "4 Creating ndarrays\nlist배열을 Numpy배열로 변환\ndata1 = [6, 7.5, 8, 0, 1]\narr1 = np.array(data1)\narr1\narray([6. , 7.5, 8. , 0. , 1. ])\ndata2 = [[1,2,3,4], [5,6,7,8]]\narr2 = np.array(data2)\narr2\narray([[1, 2, 3, 4],\n       [5, 6, 7, 8]])\n차원 수\narr1.ndim, arr2.ndim\n(1, 2)\narr2.shape\n(2, 4)\narr1.dtype, arr2.dtype\n(dtype('float64'), dtype('int32'))\nnp.zeros(10)\n\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\nnp.zeros((3,6))\narray([[0., 0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0., 0.]])\nnp.empty((2,3,2))\narray([[[1.1239e-311, 3.1620e-322],\n        [0.0000e+000, 0.0000e+000],\n        [1.7801e-306, 2.8808e+180]],\n\n       [[2.6303e-052, 6.5288e-038],\n        [1.5330e-075, 4.2843e-037],\n        [2.9306e-057, 2.6797e-032]]])\nnp.arange(15)\narray([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#data-types-for-ndarrays",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#data-types-for-ndarrays",
    "title": "advanced_python CH4",
    "section": "5 Data Types for ndarrays",
    "text": "5 Data Types for ndarrays\n데이터 타입 지정\narr1 = np.array([1,2,3], dtype=np.float64)\narr2 = np.array([1,2,3], dtype=np.int32)\narr1.dtype, arr2.dtype\n(dtype('float64'), dtype('int32'))\narr = np.array([1,2,3,4,5])\narr.dtype\ndtype('int32')\nastype : 타입 변경 함수\nfloat_arr = arr.astype(np.float64)\nfloat_arr.dtype\ndtype('float64')\narr = np.array([3.7, -1.2, -2.6, 0.5, 12.9, 10.1])\narr\narray([ 3.7, -1.2, -2.6,  0.5, 12.9, 10.1])\narr.astype(np.int32)\narray([ 3, -1, -2,  0, 12, 10])\n바이트(b) 문자열\nnumeric_strings = np.array(['1.25', '-9.6', '42'], dtype=np.string_)\nnumeric_strings\narray([b'1.25', b'-9.6', b'42'], dtype='|S4')\nnumeric_strings.astype(float)\narray([ 1.25, -9.6 , 42.  ])\nint_array = np.arange(10)\ncalibers = np.array([.22, .270, .357, .380, .44, .50], dtype=np.float64)\nint_array.astype(calibers.dtype)\narray([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])\nu4 : 부호없는 4바이트 정수 데이터타입\nempty_unit32 = np.empty(8, dtype='u4')\nempty_unit32\narray([         0, 1075314688,          0, 1075707904,          0,\n       1075838976,          0, 1072693248], dtype=uint32)"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#arithmetic-with-numpy-arrays",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#arithmetic-with-numpy-arrays",
    "title": "advanced_python CH4",
    "section": "6 Arithmetic with Numpy Arrays",
    "text": "6 Arithmetic with Numpy Arrays\narr = np.array([[1., 2., 3.], [4., 5., 6.]])\narr\narray([[1., 2., 3.],\n       [4., 5., 6.]])\narr*arr\narray([[ 1.,  4.,  9.],\n       [16., 25., 36.]])\narr-arr\narray([[0., 0., 0.],\n       [0., 0., 0.]])\n1/arr\narray([[1.    , 0.5   , 0.3333],\n       [0.25  , 0.2   , 0.1667]])\narr**0.5\narray([[1.    , 1.4142, 1.7321],\n       [2.    , 2.2361, 2.4495]])\narr2 = np.array([[0., 4., 1.], [7., 2., 12.]])\narr2\narray([[ 0.,  4.,  1.],\n       [ 7.,  2., 12.]])\narr2 > arr\narray([[False,  True, False],\n       [ True, False,  True]])"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#basic-indexing-slicing",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#basic-indexing-slicing",
    "title": "advanced_python CH4",
    "section": "7 Basic Indexing & Slicing",
    "text": "7 Basic Indexing & Slicing\narr = np.arange(10)\narr\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\narr[5]\n5\narr[5:8]\narray([5, 6, 7])\narr[5:8] = 12\narr\narray([ 0,  1,  2,  3,  4, 12, 12, 12,  8,  9])\narr_slice = arr[5:8]\narr_slice\narray([12, 12, 12])\narr_slice[1] = 12345\narr_slice\narray([   12, 12345,    12])\n기존 numpy배열 (arr)에도 반영\narr\narray([    0,     1,     2,     3,     4,    12, 12345,    12,     8,\n           9])\n[:] = 전체 슬라이스 (배열의 모든 요소)\narr_slice[:] = 64\narr_slice\narray([64, 64, 64])\narr\narray([ 0,  1,  2,  3,  4, 64, 64, 64,  8,  9])\narr2d = np.array([[1,2,3], [4,5,6], [7,8,9]])\narr2d\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\narr2d[2]\narray([7, 8, 9])\narr2d[0][2]\n3\narr2d[0,2]\n3\narr3d = np.array([[[1,2,3], [4,5,6]], [[7,8,9], [10,11,12]]])\narr3d\narray([[[ 1,  2,  3],\n        [ 4,  5,  6]],\n\n       [[ 7,  8,  9],\n        [10, 11, 12]]])\narr3d[0]\narray([[1, 2, 3],\n       [4, 5, 6]])\ncopy 사용시 기존 배열에 영향 X\nold_values = arr3d[0].copy()\nold_values\narray([[1, 2, 3],\n       [4, 5, 6]])\narr3d[0] = 42\narr3d\narray([[[42, 42, 42],\n        [42, 42, 42]],\n\n       [[ 7,  8,  9],\n        [10, 11, 12]]])\narr3d[0] = old_values\narr3d\narray([[[ 1,  2,  3],\n        [ 4,  5,  6]],\n\n       [[ 7,  8,  9],\n        [10, 11, 12]]])\narr3d[1,0]\narray([7, 8, 9])\nx = arr3d[1]\nx\narray([[ 7,  8,  9],\n       [10, 11, 12]])\nx[0]\narray([7, 8, 9])\n\n7.1 Quiz 1\narr3d를 이용하여 array([[ 8, 10, 12], [14, 16, 18]]) 만들기\narr3d\narray([[[ 1,  2,  3],\n        [ 4,  5,  6]],\n\n       [[ 7,  8,  9],\n        [10, 11, 12]]])\narr3d[0] + arr3d[1]\narray([[ 8, 10, 12],\n       [14, 16, 18]])\naxis : 축 지정\narr3d.sum(axis=0)\narray([[ 8, 10, 12],\n       [14, 16, 18]])\n\n\n7.2 Quiz 2\n1차원으로 변경하시오\narr3d.sum(axis=0).reshape(-1)\narray([ 8, 10, 12, 14, 16, 18])\n\n\n7.3 Quiz 3\nshape(2,2)인 [1,2,4,5]를 추출해보시오\narr3d[0,:2,:2]\narray([[1, 2],\n       [4, 5]])\narr3d[0,:,:2]\narray([[1, 2],\n       [4, 5]])\n\n\n7.4 Quiz 4\n[[0,7], [10,15]] 에서 [10, 22]를 출력하시오\narr4 = np.array([[0,7], [10,15]])\narr4\narray([[ 0,  7],\n       [10, 15]])\narr4.sum(axis=0)\narray([10, 22])\n\n\n7.5 Indexing with Slices\narr\narray([ 0,  1,  2,  3,  4, 64, 64, 64,  8,  9])\narr[1:6]\narray([ 1,  2,  3,  4, 64])\narr2d\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\narr2d[:2]\narray([[1, 2, 3],\n       [4, 5, 6]])\narr2d[:2, 1:]\narray([[2, 3],\n       [5, 6]])\narr2d[1, :2]\narray([4, 5])\narr2d[:2,2]\narray([3, 6])\narr2d[:, :1]\narray([[1],\n       [4],\n       [7]])\narr2d[:2, 1:] = 0\narr2d\narray([[1, 0, 0],\n       [4, 0, 0],\n       [7, 8, 9]])\n\n\n7.6 Boolean Indexing\nnames = np.array(['Bob','Joe','Will', 'Bob', 'Will','Joe','Joe'])\ndata = np.random.randn(7,4)\nnames, data\n(array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'], dtype='<U4'),\n array([[ 0.0929,  0.2817,  0.769 ,  1.2464],\n        [ 1.0072, -1.2962,  0.275 ,  0.2289],\n        [ 1.3529,  0.8864, -2.0016, -0.3718],\n        [ 1.669 , -0.4386, -0.5397,  0.477 ],\n        [ 3.2489, -1.0212, -0.5771,  0.1241],\n        [ 0.3026,  0.5238,  0.0009,  1.3438],\n        [-0.7135, -0.8312, -2.3702, -1.8608]]))\nnames == 'Bob'\narray([ True, False, False,  True, False, False, False])\ndata[names == 'Bob']\narray([[ 0.0929,  0.2817,  0.769 ,  1.2464],\n       [ 1.669 , -0.4386, -0.5397,  0.477 ]])\ndata[names == 'Bob', 2:]\narray([[ 0.769 ,  1.2464],\n       [-0.5397,  0.477 ]])\ndata[names == 'Bob', 3]\narray([1.2464, 0.477 ])\nnames != 'Bob'\narray([False,  True,  True, False,  True,  True,  True])\n~ : 불리언 배열의 각 요소를 논리적으로 반전 (T→F, T→F)\ndata[~(names == 'Bob')]\narray([[ 1.0072, -1.2962,  0.275 ,  0.2289],\n       [ 1.3529,  0.8864, -2.0016, -0.3718],\n       [ 3.2489, -1.0212, -0.5771,  0.1241],\n       [ 0.3026,  0.5238,  0.0009,  1.3438],\n       [-0.7135, -0.8312, -2.3702, -1.8608]])\ncond = names == 'Bob'\ndata[~cond]\narray([[ 1.0072, -1.2962,  0.275 ,  0.2289],\n       [ 1.3529,  0.8864, -2.0016, -0.3718],\n       [ 3.2489, -1.0212, -0.5771,  0.1241],\n       [ 0.3026,  0.5238,  0.0009,  1.3438],\n       [-0.7135, -0.8312, -2.3702, -1.8608]])\nmask = (names == 'Bob') | (names == 'Will')\nmask\narray([ True, False,  True,  True,  True, False, False])\ndata[mask]\narray([[ 0.0929,  0.2817,  0.769 ,  1.2464],\n       [ 1.3529,  0.8864, -2.0016, -0.3718],\n       [ 1.669 , -0.4386, -0.5397,  0.477 ],\n       [ 3.2489, -1.0212, -0.5771,  0.1241]])\ndata[data < 0] = 0\ndata\narray([[0.0929, 0.2817, 0.769 , 1.2464],\n       [1.0072, 0.    , 0.275 , 0.2289],\n       [1.3529, 0.8864, 0.    , 0.    ],\n       [1.669 , 0.    , 0.    , 0.477 ],\n       [3.2489, 0.    , 0.    , 0.1241],\n       [0.3026, 0.5238, 0.0009, 1.3438],\n       [0.    , 0.    , 0.    , 0.    ]])\ndata[names != 'Joe'] = 7\ndata\narray([[7.    , 7.    , 7.    , 7.    ],\n       [1.0072, 0.    , 0.275 , 0.2289],\n       [7.    , 7.    , 7.    , 7.    ],\n       [7.    , 7.    , 7.    , 7.    ],\n       [7.    , 7.    , 7.    , 7.    ],\n       [0.3026, 0.5238, 0.0009, 1.3438],\n       [0.    , 0.    , 0.    , 0.    ]])\n\n\n7.7 Fancy Indexing\narr = np.empty((8,4))\nfor i in range(8):\n    arr[i] = i\n\narr\narray([[0., 0., 0., 0.],\n       [1., 1., 1., 1.],\n       [2., 2., 2., 2.],\n       [3., 3., 3., 3.],\n       [4., 4., 4., 4.],\n       [5., 5., 5., 5.],\n       [6., 6., 6., 6.],\n       [7., 7., 7., 7.]])\narr[[4,3,0,6]]\narray([[4., 4., 4., 4.],\n       [3., 3., 3., 3.],\n       [0., 0., 0., 0.],\n       [6., 6., 6., 6.]])\n뒤에서 부터 인덱싱\narr[[-3,-5,-7]]\narray([[5., 5., 5., 5.],\n       [3., 3., 3., 3.],\n       [1., 1., 1., 1.]])\narr = np.arange(32).reshape((8,4))\narr\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11],\n       [12, 13, 14, 15],\n       [16, 17, 18, 19],\n       [20, 21, 22, 23],\n       [24, 25, 26, 27],\n       [28, 29, 30, 31]])\narr[[1,5,7,2], [0,3,1,2]]\narray([ 4, 23, 29, 10])\n행의 모든 값에 대해 열 선택\narr[[1,5,7,2]][:, [0,3,1,2]]\narray([[ 4,  7,  5,  6],\n       [20, 23, 21, 22],\n       [28, 31, 29, 30],\n       [ 8, 11,  9, 10]])\n\n\n7.8 Quiz 1\n\narr에서 [12,17,31,26] 뽑기\n\narr\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11],\n       [12, 13, 14, 15],\n       [16, 17, 18, 19],\n       [20, 21, 22, 23],\n       [24, 25, 26, 27],\n       [28, 29, 30, 31]])\narr[[3,4,7,6],[0,1,3,2]]\narray([12, 17, 31, 26])\n\n\n7.9 Quiz 2\n\nshape(2,4)인 [16,17,19,18,12,13,15,14]뽑기\n\narr[[[4,4,4,4],[3,3,3,3]],[[0,1,3,2],[0,1,3,2]]]\narray([[16, 17, 19, 18],\n       [12, 13, 15, 14]])\n\n\n7.10 Transposing Arrays & Swapping Axes\narr = np.arange(15).reshape((3,5))\narr\narray([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14]])\nT : 배열의 전치\narr.T\narray([[ 0,  5, 10],\n       [ 1,  6, 11],\n       [ 2,  7, 12],\n       [ 3,  8, 13],\n       [ 4,  9, 14]])\narr = np.random.randn(6,3)\narr\narray([[-0.8608,  0.5601, -1.2659],\n       [ 0.1198, -1.0635,  0.3329],\n       [-2.3594, -0.1995, -1.542 ],\n       [-0.9707, -1.307 ,  0.2863],\n       [ 0.378 , -0.7539,  0.3313],\n       [ 1.3497,  0.0699,  0.2467]])\ndot : 행렬곱\nnp.dot(arr.T, arr)\narray([[ 9.2291,  0.9394,  4.948 ],\n       [ 0.9394,  3.7662, -1.3622],\n       [ 4.948 , -1.3622,  4.3437]])\narr = np.arange(16).reshape((2,2,4))\narr\narray([[[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7]],\n\n       [[ 8,  9, 10, 11],\n        [12, 13, 14, 15]]])\ntranspose : 축 변경\n# 첫 번째, 두 번째 축 변경\narr.transpose((1,0,2))\narray([[[ 0,  1,  2,  3],\n        [ 8,  9, 10, 11]],\n\n       [[ 4,  5,  6,  7],\n        [12, 13, 14, 15]]])\nswapaxes : 배열의 축 변경\n# 첫 번째, 두 번째 축 변경\narr.swapaxes(1,2)\narray([[[ 0,  4],\n        [ 1,  5],\n        [ 2,  6],\n        [ 3,  7]],\n\n       [[ 8, 12],\n        [ 9, 13],\n        [10, 14],\n        [11, 15]]])"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#universal-functions",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#universal-functions",
    "title": "advanced_python CH4",
    "section": "8 Universal Functions",
    "text": "8 Universal Functions\n\nFast Element-Wise Array Functions\n\narr = np.arange(10)\narr\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nnp.sqrt(arr)\narray([0.    , 1.    , 1.4142, 1.7321, 2.    , 2.2361, 2.4495, 2.6458,\n       2.8284, 3.    ])\nexp : 지수함수\nnp.exp(arr)\narray([   1.    ,    2.7183,    7.3891,   20.0855,   54.5982,  148.4132,\n        403.4288, 1096.6332, 2980.958 , 8103.0839])\nx = np.random.randn(8)\nx\narray([-0.0119,  1.0048,  1.3272, -0.9193, -1.5491,  0.0222,  0.7584,\n       -0.6605])\ny = np.random.randn(8)\ny\narray([ 0.8626, -0.01  ,  0.05  ,  0.6702,  0.853 , -0.9559, -0.0235,\n       -2.3042])\nnp.maximum(x,y)\narray([ 0.8626,  1.0048,  1.3272,  0.6702,  0.853 ,  0.0222,  0.7584,\n       -0.6605])\narr = np.random.randn(7) *5\narr\narray([-3.2623, -6.0915, -6.663 ,  5.3731,  3.6182,  3.45  ,  5.0077])\nmodf : 정수부분과 소수부분 분리\nremainder, whole_part = np.modf(arr)\nremainder\narray([-0.2623, -0.0915, -0.663 ,  0.3731,  0.6182,  0.45  ,  0.0077])\nwhole_part\narray([-3., -6., -6.,  5.,  3.,  3.,  5.])\nnp.sqrt(arr)\nC:\\Users\\seong taek\\AppData\\Local\\Temp\\ipykernel_13704\\2296558006.py:1: RuntimeWarning: invalid value encountered in sqrt\n  np.sqrt(arr)\n\n\n\n\n\narray([   nan,    nan,    nan, 2.318 , 1.9022, 1.8574, 2.2378])\nnp.sqrt(arr, arr)\nC:\\Users\\seong taek\\AppData\\Local\\Temp\\ipykernel_13704\\269955669.py:1: RuntimeWarning: invalid value encountered in sqrt\n  np.sqrt(arr, arr)\n\n\n\n\n\narray([   nan,    nan,    nan, 2.318 , 1.9022, 1.8574, 2.2378])\narr\narray([   nan,    nan,    nan, 2.318 , 1.9022, 1.8574, 2.2378])"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#array",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#array",
    "title": "advanced_python CH4",
    "section": "9 Array",
    "text": "9 Array\n\nOriented Programming with Arrays\n\npoints = np.arange(-5,5,0.01)\npoints\narray([-5.  , -4.99, -4.98, -4.97, -4.96, -4.95, -4.94, -4.93, -4.92,\n       -4.91, -4.9 , -4.89, -4.88, -4.87, -4.86, -4.85, -4.84, -4.83,\n       -4.82, -4.81, -4.8 , -4.79, -4.78, -4.77, -4.76, -4.75, -4.74,\n       -4.73, -4.72, -4.71, -4.7 , -4.69, -4.68, -4.67, -4.66, -4.65,\n       -4.64, -4.63, -4.62, -4.61, -4.6 , -4.59, -4.58, -4.57, -4.56,\n       -4.55, -4.54, -4.53, -4.52, -4.51, -4.5 , -4.49, -4.48, -4.47,\n       -4.46, -4.45, -4.44, -4.43, -4.42, -4.41, -4.4 , -4.39, -4.38,\n       -4.37, -4.36, -4.35, -4.34, -4.33, -4.32, -4.31, -4.3 , -4.29,\n       -4.28, -4.27, -4.26, -4.25, -4.24, -4.23, -4.22, -4.21, -4.2 ,\n       -4.19, -4.18, -4.17, -4.16, -4.15, -4.14, -4.13, -4.12, -4.11,\n       -4.1 , -4.09, -4.08, -4.07, -4.06, -4.05, -4.04, -4.03, -4.02,\n       -4.01, -4.  , -3.99, -3.98, -3.97, -3.96, -3.95, -3.94, -3.93,\n       -3.92, -3.91, -3.9 , -3.89, -3.88, -3.87, -3.86, -3.85, -3.84,\n       -3.83, -3.82, -3.81, -3.8 , -3.79, -3.78, -3.77, -3.76, -3.75,\n       -3.74, -3.73, -3.72, -3.71, -3.7 , -3.69, -3.68, -3.67, -3.66,\n       -3.65, -3.64, -3.63, -3.62, -3.61, -3.6 , -3.59, -3.58, -3.57,\n       -3.56, -3.55, -3.54, -3.53, -3.52, -3.51, -3.5 , -3.49, -3.48,\n       -3.47, -3.46, -3.45, -3.44, -3.43, -3.42, -3.41, -3.4 , -3.39,\n       -3.38, -3.37, -3.36, -3.35, -3.34, -3.33, -3.32, -3.31, -3.3 ,\n       -3.29, -3.28, -3.27, -3.26, -3.25, -3.24, -3.23, -3.22, -3.21,\n       -3.2 , -3.19, -3.18, -3.17, -3.16, -3.15, -3.14, -3.13, -3.12,\n       -3.11, -3.1 , -3.09, -3.08, -3.07, -3.06, -3.05, -3.04, -3.03,\n       -3.02, -3.01, -3.  , -2.99, -2.98, -2.97, -2.96, -2.95, -2.94,\n       -2.93, -2.92, -2.91, -2.9 , -2.89, -2.88, -2.87, -2.86, -2.85,\n       -2.84, -2.83, -2.82, -2.81, -2.8 , -2.79, -2.78, -2.77, -2.76,\n       -2.75, -2.74, -2.73, -2.72, -2.71, -2.7 , -2.69, -2.68, -2.67,\n       -2.66, -2.65, -2.64, -2.63, -2.62, -2.61, -2.6 , -2.59, -2.58,\n       -2.57, -2.56, -2.55, -2.54, -2.53, -2.52, -2.51, -2.5 , -2.49,\n       -2.48, -2.47, -2.46, -2.45, -2.44, -2.43, -2.42, -2.41, -2.4 ,\n       -2.39, -2.38, -2.37, -2.36, -2.35, -2.34, -2.33, -2.32, -2.31,\n       -2.3 , -2.29, -2.28, -2.27, -2.26, -2.25, -2.24, -2.23, -2.22,\n       -2.21, -2.2 , -2.19, -2.18, -2.17, -2.16, -2.15, -2.14, -2.13,\n       -2.12, -2.11, -2.1 , -2.09, -2.08, -2.07, -2.06, -2.05, -2.04,\n       -2.03, -2.02, -2.01, -2.  , -1.99, -1.98, -1.97, -1.96, -1.95,\n       -1.94, -1.93, -1.92, -1.91, -1.9 , -1.89, -1.88, -1.87, -1.86,\n       -1.85, -1.84, -1.83, -1.82, -1.81, -1.8 , -1.79, -1.78, -1.77,\n       -1.76, -1.75, -1.74, -1.73, -1.72, -1.71, -1.7 , -1.69, -1.68,\n       -1.67, -1.66, -1.65, -1.64, -1.63, -1.62, -1.61, -1.6 , -1.59,\n       -1.58, -1.57, -1.56, -1.55, -1.54, -1.53, -1.52, -1.51, -1.5 ,\n       -1.49, -1.48, -1.47, -1.46, -1.45, -1.44, -1.43, -1.42, -1.41,\n       -1.4 , -1.39, -1.38, -1.37, -1.36, -1.35, -1.34, -1.33, -1.32,\n       -1.31, -1.3 , -1.29, -1.28, -1.27, -1.26, -1.25, -1.24, -1.23,\n       -1.22, -1.21, -1.2 , -1.19, -1.18, -1.17, -1.16, -1.15, -1.14,\n       -1.13, -1.12, -1.11, -1.1 , -1.09, -1.08, -1.07, -1.06, -1.05,\n       -1.04, -1.03, -1.02, -1.01, -1.  , -0.99, -0.98, -0.97, -0.96,\n       -0.95, -0.94, -0.93, -0.92, -0.91, -0.9 , -0.89, -0.88, -0.87,\n       -0.86, -0.85, -0.84, -0.83, -0.82, -0.81, -0.8 , -0.79, -0.78,\n       -0.77, -0.76, -0.75, -0.74, -0.73, -0.72, -0.71, -0.7 , -0.69,\n       -0.68, -0.67, -0.66, -0.65, -0.64, -0.63, -0.62, -0.61, -0.6 ,\n       -0.59, -0.58, -0.57, -0.56, -0.55, -0.54, -0.53, -0.52, -0.51,\n       -0.5 , -0.49, -0.48, -0.47, -0.46, -0.45, -0.44, -0.43, -0.42,\n       -0.41, -0.4 , -0.39, -0.38, -0.37, -0.36, -0.35, -0.34, -0.33,\n       -0.32, -0.31, -0.3 , -0.29, -0.28, -0.27, -0.26, -0.25, -0.24,\n       -0.23, -0.22, -0.21, -0.2 , -0.19, -0.18, -0.17, -0.16, -0.15,\n       -0.14, -0.13, -0.12, -0.11, -0.1 , -0.09, -0.08, -0.07, -0.06,\n       -0.05, -0.04, -0.03, -0.02, -0.01, -0.  ,  0.01,  0.02,  0.03,\n        0.04,  0.05,  0.06,  0.07,  0.08,  0.09,  0.1 ,  0.11,  0.12,\n        0.13,  0.14,  0.15,  0.16,  0.17,  0.18,  0.19,  0.2 ,  0.21,\n        0.22,  0.23,  0.24,  0.25,  0.26,  0.27,  0.28,  0.29,  0.3 ,\n        0.31,  0.32,  0.33,  0.34,  0.35,  0.36,  0.37,  0.38,  0.39,\n        0.4 ,  0.41,  0.42,  0.43,  0.44,  0.45,  0.46,  0.47,  0.48,\n        0.49,  0.5 ,  0.51,  0.52,  0.53,  0.54,  0.55,  0.56,  0.57,\n        0.58,  0.59,  0.6 ,  0.61,  0.62,  0.63,  0.64,  0.65,  0.66,\n        0.67,  0.68,  0.69,  0.7 ,  0.71,  0.72,  0.73,  0.74,  0.75,\n        0.76,  0.77,  0.78,  0.79,  0.8 ,  0.81,  0.82,  0.83,  0.84,\n        0.85,  0.86,  0.87,  0.88,  0.89,  0.9 ,  0.91,  0.92,  0.93,\n        0.94,  0.95,  0.96,  0.97,  0.98,  0.99,  1.  ,  1.01,  1.02,\n        1.03,  1.04,  1.05,  1.06,  1.07,  1.08,  1.09,  1.1 ,  1.11,\n        1.12,  1.13,  1.14,  1.15,  1.16,  1.17,  1.18,  1.19,  1.2 ,\n        1.21,  1.22,  1.23,  1.24,  1.25,  1.26,  1.27,  1.28,  1.29,\n        1.3 ,  1.31,  1.32,  1.33,  1.34,  1.35,  1.36,  1.37,  1.38,\n        1.39,  1.4 ,  1.41,  1.42,  1.43,  1.44,  1.45,  1.46,  1.47,\n        1.48,  1.49,  1.5 ,  1.51,  1.52,  1.53,  1.54,  1.55,  1.56,\n        1.57,  1.58,  1.59,  1.6 ,  1.61,  1.62,  1.63,  1.64,  1.65,\n        1.66,  1.67,  1.68,  1.69,  1.7 ,  1.71,  1.72,  1.73,  1.74,\n        1.75,  1.76,  1.77,  1.78,  1.79,  1.8 ,  1.81,  1.82,  1.83,\n        1.84,  1.85,  1.86,  1.87,  1.88,  1.89,  1.9 ,  1.91,  1.92,\n        1.93,  1.94,  1.95,  1.96,  1.97,  1.98,  1.99,  2.  ,  2.01,\n        2.02,  2.03,  2.04,  2.05,  2.06,  2.07,  2.08,  2.09,  2.1 ,\n        2.11,  2.12,  2.13,  2.14,  2.15,  2.16,  2.17,  2.18,  2.19,\n        2.2 ,  2.21,  2.22,  2.23,  2.24,  2.25,  2.26,  2.27,  2.28,\n        2.29,  2.3 ,  2.31,  2.32,  2.33,  2.34,  2.35,  2.36,  2.37,\n        2.38,  2.39,  2.4 ,  2.41,  2.42,  2.43,  2.44,  2.45,  2.46,\n        2.47,  2.48,  2.49,  2.5 ,  2.51,  2.52,  2.53,  2.54,  2.55,\n        2.56,  2.57,  2.58,  2.59,  2.6 ,  2.61,  2.62,  2.63,  2.64,\n        2.65,  2.66,  2.67,  2.68,  2.69,  2.7 ,  2.71,  2.72,  2.73,\n        2.74,  2.75,  2.76,  2.77,  2.78,  2.79,  2.8 ,  2.81,  2.82,\n        2.83,  2.84,  2.85,  2.86,  2.87,  2.88,  2.89,  2.9 ,  2.91,\n        2.92,  2.93,  2.94,  2.95,  2.96,  2.97,  2.98,  2.99,  3.  ,\n        3.01,  3.02,  3.03,  3.04,  3.05,  3.06,  3.07,  3.08,  3.09,\n        3.1 ,  3.11,  3.12,  3.13,  3.14,  3.15,  3.16,  3.17,  3.18,\n        3.19,  3.2 ,  3.21,  3.22,  3.23,  3.24,  3.25,  3.26,  3.27,\n        3.28,  3.29,  3.3 ,  3.31,  3.32,  3.33,  3.34,  3.35,  3.36,\n        3.37,  3.38,  3.39,  3.4 ,  3.41,  3.42,  3.43,  3.44,  3.45,\n        3.46,  3.47,  3.48,  3.49,  3.5 ,  3.51,  3.52,  3.53,  3.54,\n        3.55,  3.56,  3.57,  3.58,  3.59,  3.6 ,  3.61,  3.62,  3.63,\n        3.64,  3.65,  3.66,  3.67,  3.68,  3.69,  3.7 ,  3.71,  3.72,\n        3.73,  3.74,  3.75,  3.76,  3.77,  3.78,  3.79,  3.8 ,  3.81,\n        3.82,  3.83,  3.84,  3.85,  3.86,  3.87,  3.88,  3.89,  3.9 ,\n        3.91,  3.92,  3.93,  3.94,  3.95,  3.96,  3.97,  3.98,  3.99,\n        4.  ,  4.01,  4.02,  4.03,  4.04,  4.05,  4.06,  4.07,  4.08,\n        4.09,  4.1 ,  4.11,  4.12,  4.13,  4.14,  4.15,  4.16,  4.17,\n        4.18,  4.19,  4.2 ,  4.21,  4.22,  4.23,  4.24,  4.25,  4.26,\n        4.27,  4.28,  4.29,  4.3 ,  4.31,  4.32,  4.33,  4.34,  4.35,\n        4.36,  4.37,  4.38,  4.39,  4.4 ,  4.41,  4.42,  4.43,  4.44,\n        4.45,  4.46,  4.47,  4.48,  4.49,  4.5 ,  4.51,  4.52,  4.53,\n        4.54,  4.55,  4.56,  4.57,  4.58,  4.59,  4.6 ,  4.61,  4.62,\n        4.63,  4.64,  4.65,  4.66,  4.67,  4.68,  4.69,  4.7 ,  4.71,\n        4.72,  4.73,  4.74,  4.75,  4.76,  4.77,  4.78,  4.79,  4.8 ,\n        4.81,  4.82,  4.83,  4.84,  4.85,  4.86,  4.87,  4.88,  4.89,\n        4.9 ,  4.91,  4.92,  4.93,  4.94,  4.95,  4.96,  4.97,  4.98,\n        4.99])\nmeshgrid : 행, 열 기준으로 각각 배열\nxs, ys = np.meshgrid(points, points)\nys\narray([[-5.  , -5.  , -5.  , ..., -5.  , -5.  , -5.  ],\n       [-4.99, -4.99, -4.99, ..., -4.99, -4.99, -4.99],\n       [-4.98, -4.98, -4.98, ..., -4.98, -4.98, -4.98],\n       ...,\n       [ 4.97,  4.97,  4.97, ...,  4.97,  4.97,  4.97],\n       [ 4.98,  4.98,  4.98, ...,  4.98,  4.98,  4.98],\n       [ 4.99,  4.99,  4.99, ...,  4.99,  4.99,  4.99]])\nxs\narray([[-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],\n       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],\n       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],\n       ...,\n       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],\n       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99],\n       [-5.  , -4.99, -4.98, ...,  4.97,  4.98,  4.99]])\nz = np.sqrt(xs **2 +ys**2)\nz\narray([[7.0711, 7.064 , 7.0569, ..., 7.0499, 7.0569, 7.064 ],\n       [7.064 , 7.0569, 7.0499, ..., 7.0428, 7.0499, 7.0569],\n       [7.0569, 7.0499, 7.0428, ..., 7.0357, 7.0428, 7.0499],\n       ...,\n       [7.0499, 7.0428, 7.0357, ..., 7.0286, 7.0357, 7.0428],\n       [7.0569, 7.0499, 7.0428, ..., 7.0357, 7.0428, 7.0499],\n       [7.064 , 7.0569, 7.0499, ..., 7.0428, 7.0499, 7.0569]])\nimport matplotlib.pyplot as plt\nplt.imshow(z, cmap=plt.cm.gray); plt.colorbar()\nplt.title(\"Image plot of $\\sqrt{x^2 +y^2}$ for a grid of values\")\nText(0.5, 1.0, 'Image plot of $\\\\sqrt{x^2 +y^2}$ for a grid of values')\n\n\n\npng\n\n\nplt.draw()\n<Figure size 1000x600 with 0 Axes>\nplt.close('all')"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#expressing-conditional-logic-as-array-operations",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#expressing-conditional-logic-as-array-operations",
    "title": "advanced_python CH4",
    "section": "10 Expressing Conditional Logic as Array Operations",
    "text": "10 Expressing Conditional Logic as Array Operations\nxarr = np.array([1.1, 1.2, 1.3, 1.4, 1.5])\nyarr = np.array([2.1, 2.2, 2.3, 2.4, 2.5])\ncond = np.array([True, False, True, True, False])\nresult = [(x if c else y)\n         for x,y,c in zip(xarr, yarr, cond)]\nresult\n[1.1, 2.2, 1.3, 1.4, 2.5]\nwhere : 조건에 따라 두개의 배열 중에서 값 선택\nresult = np.where(cond, xarr, yarr)\nresult\narray([1.1, 2.2, 1.3, 1.4, 2.5])\n조건 : arr>0\narr = np.random.randn(4,4)\narr\narr>0\nnp.where(arr > 0,2,-2)\narray([[-2, -2, -2, -2],\n       [ 2,  2, -2,  2],\n       [ 2,  2,  2, -2],\n       [ 2, -2,  2,  2]])\nnp.where(arr > 0,2,arr)\narray([[-0.5031, -0.6223, -0.9212, -0.7262],\n       [ 2.    ,  2.    , -1.1577,  2.    ],\n       [ 2.    ,  2.    ,  2.    , -0.9975],\n       [ 2.    , -0.1316,  2.    ,  2.    ]])"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#mathematical-and-statistical-methods",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#mathematical-and-statistical-methods",
    "title": "advanced_python CH4",
    "section": "11 Mathematical and Statistical Methods",
    "text": "11 Mathematical and Statistical Methods\narr = np.random.randn(5,4)\narr\narray([[ 2.1695, -0.1149,  2.0037,  0.0296],\n       [ 0.7953,  0.1181, -0.7485,  0.585 ],\n       [ 0.1527, -1.5657, -0.5625, -0.0327],\n       [-0.929 , -0.4826, -0.0363,  1.0954],\n       [ 0.9809, -0.5895,  1.5817, -0.5287]])\narr.mean()\n0.19607051119998253\nnp.mean(arr)\n0.19607051119998253\narr.sum()\n3.9214102239996507\nnp.sum(arr)\n3.9214102239996507\narr.mean(axis=1)\narray([ 1.022 ,  0.1875, -0.502 , -0.0881,  0.3611])\narr.sum(axis=0)\narray([ 3.1693, -2.6345,  2.2381,  1.1486])\ncumsum : 배열의 누적합 계산\narr = np.array([0,1,2,3,4,5,6,7])\narr.cumsum()\narray([ 0,  1,  3,  6, 10, 15, 21, 28])\narr = np.array([[0,1,2], [3,4,5], [6,7,8]])\narr\narray([[0, 1, 2],\n       [3, 4, 5],\n       [6, 7, 8]])\narr.cumsum(axis=0)\narray([[ 0,  1,  2],\n       [ 3,  5,  7],\n       [ 9, 12, 15]])\ncumprod : 누적곱 계산\narr.cumprod(axis=1)\narray([[  0,   0,   0],\n       [  3,  12,  60],\n       [  6,  42, 336]])"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#methoods-for-boolean-arrays",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#methoods-for-boolean-arrays",
    "title": "advanced_python CH4",
    "section": "12 Methoods for Boolean Arrays",
    "text": "12 Methoods for Boolean Arrays\narr = np.random.randn(100)\n(arr > 0).sum()\n42\nany :True가 하나 이상이면 True\nbools = np.array([False,False,True,True])\nbools.any()\nTrue\nall : 모두 True이면 True\nbools.all()\nFalse"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#sorting",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#sorting",
    "title": "advanced_python CH4",
    "section": "13 Sorting",
    "text": "13 Sorting\narr = np.random.randn(6)\narr\narray([ 0.6095, -0.4938,  1.24  , -0.1357,  1.43  , -0.8469])\narr.sort()\narr\narray([-0.8469, -0.4938, -0.1357,  0.6095,  1.24  ,  1.43  ])\narr = np.random.randn(5,3)\narr\narray([[ 0.6033,  1.2636, -0.2555],\n       [-0.4457,  0.4684, -0.9616],\n       [-1.8245,  0.6254,  1.0229],\n       [ 1.1074,  0.0909, -0.3501],\n       [ 0.218 , -0.8948, -1.7415]])\nsort(1) :행기준 정렬\narr.sort(1)\narr\narray([[-0.2555,  0.6033,  1.2636],\n       [-0.9616, -0.4457,  0.4684],\n       [-1.8245,  0.6254,  1.0229],\n       [-0.3501,  0.0909,  1.1074],\n       [-1.7415, -0.8948,  0.218 ]])\n5% 분위수에 해당하는 값 출력\nlarge_arr = np.random.randn(1000)\nlarge_arr.sort()\nlarge_arr[int(0.05 * len(large_arr))]\n-1.5311513550102103"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#unique-other-set-logic",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#unique-other-set-logic",
    "title": "advanced_python CH4",
    "section": "14 Unique & Other Set Logic",
    "text": "14 Unique & Other Set Logic\nnames = np.array(['Bob','Joe','Will','Bob','Will','Joe','Joe'])\nnames\narray(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'], dtype='<U4')\nnp.unique(names)\narray(['Bob', 'Joe', 'Will'], dtype='<U4')\nints = np.array([3,3,3,2,2,1,1,4,4])\nnp.unique(ints)\narray([1, 2, 3, 4])\nset : unique 기능\nsorted(set(names))\n['Bob', 'Joe', 'Will']\nin1d : 첫 번째 배열에 대해 각 요소가 두 번째 배열에 포함되는지를 검사하고, 결과를 boolean 배열로 반환\nvalues = np.array([6,0,0,3,2,5,6])\nnp.in1d(values, [2,3,6])\narray([ True, False, False,  True,  True, False,  True])"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#file-input-output-with-arrays",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#file-input-output-with-arrays",
    "title": "advanced_python CH4",
    "section": "15 File Input & Output with Arrays",
    "text": "15 File Input & Output with Arrays\narr = np.arange(10)\nnp.save('some_array', arr)\nnp.load('some_array.npy')\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nnp.savez('array_archive.npz', a=arr, b=arr)\narch = np.load('array_archive.npz')\narch['b']\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nnp.savez_compressed('arrays_compressed.npz', a=arr, b=arr)\n!rm some_array.npy\n!rm array_archive.npz\n!rm arrays_compressed.npz\n'rm'은(는) 내부 또는 외부 명령, 실행할 수 있는 프로그램, 또는\n배치 파일이 아닙니다.\n'rm'은(는) 내부 또는 외부 명령, 실행할 수 있는 프로그램, 또는\n배치 파일이 아닙니다.\n'rm'은(는) 내부 또는 외부 명령, 실행할 수 있는 프로그램, 또는\n배치 파일이 아닙니다."
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#linear-algebra",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#linear-algebra",
    "title": "advanced_python CH4",
    "section": "16 Linear Algebra",
    "text": "16 Linear Algebra\nx = np.array([[1.,2.,3.], [4., 5., 6.]])\ny = np.array([[6., 23.], [-1, 7],[8,9]])\nx\narray([[1., 2., 3.],\n       [4., 5., 6.]])\ny\narray([[ 6., 23.],\n       [-1.,  7.],\n       [ 8.,  9.]])\nx.dot(y)\narray([[ 28.,  64.],\n       [ 67., 181.]])\nnp.dot(x, np.ones(3))\narray([ 6., 15.])\n@ : 행렬곱셈\nx @ np.ones(3)\narray([ 6., 15.])\ninv : 역행렬\nfrom numpy.linalg import inv, qr\nX = np.random.randn(5,5)\nmat = X.T.dot(X)\ninv(mat)\narray([[  933.1189,   871.8258, -1417.6902, -1460.4005,  1782.1391],\n       [  871.8258,   815.3929, -1325.9965, -1365.9242,  1666.9347],\n       [-1417.6902, -1325.9965,  2158.4424,  2222.0191, -2711.6822],\n       [-1460.4005, -1365.9242,  2222.0191,  2289.0575, -2793.422 ],\n       [ 1782.1391,  1666.9347, -2711.6822, -2793.422 ,  3409.5128]])\nmat.dot(inv(mat))\narray([[ 1., -0.,  0.,  0., -0.],\n       [ 0.,  1.,  0., -0., -0.],\n       [ 0.,  0.,  1., -0.,  0.],\n       [ 0., -0., -0.,  1.,  0.],\n       [ 0.,  0., -0., -0.,  1.]])\nqr : QR분해 - q(직교행렬), r(상삼각행렬)\nq, r = qr(mat)\nq\narray([[-0.6328, -0.5603, -0.2526,  0.3533,  0.3115],\n       [ 0.7629, -0.5331, -0.1675,  0.1443,  0.2913],\n       [ 0.0084, -0.0493, -0.8433, -0.2484, -0.4739],\n       [-0.0826, -0.632 ,  0.4316, -0.4112, -0.4882],\n       [-0.1033, -0.0035, -0.1032, -0.7897,  0.5959]])\nr\narray([[-1.6914,  4.38  ,  0.1757,  0.4075, -0.7838],\n       [ 0.    , -2.6436,  0.1939, -3.072 , -1.0702],\n       [ 0.    ,  0.    , -0.8138,  1.5414,  0.6155],\n       [ 0.    ,  0.    ,  0.    , -2.6445, -2.1669],\n       [ 0.    ,  0.    ,  0.    ,  0.    ,  0.0002]])"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#pseudorandom-number-generation",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#pseudorandom-number-generation",
    "title": "advanced_python CH4",
    "section": "17 Pseudorandom Number Generation",
    "text": "17 Pseudorandom Number Generation\nnormal : 정규분포\nsamples = np.random.normal(size=(4,4))\nsamples\narray([[ 0.5732,  0.1933,  0.4429,  1.2796],\n       [ 0.575 ,  0.4339, -0.7658, -1.237 ],\n       [-0.5367,  1.8545, -0.92  , -0.1082],\n       [ 0.1525,  0.9435, -1.0953, -0.144 ]])\nfrom random import normalvariate\nN = 1000000\n%timeit samples = [normalvariate(0,1) for _ in range(N)]\n%timeit np.random.normal(size=N)\n1.14 s ± 168 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n33.6 ms ± 3.1 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\nnp.random.seed(1234)\nnp.random.RandomState : 난수 생성기 객체 생성\nrng = np.random.RandomState(1234)\nrng.randn(10)\narray([ 0.4714, -1.191 ,  1.4327, -0.3127, -0.7206,  0.8872,  0.8596,\n       -0.6365,  0.0157, -2.2427])"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#example-random-walks",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#example-random-walks",
    "title": "advanced_python CH4",
    "section": "18 Example : Random Walks",
    "text": "18 Example : Random Walks\nimport random\n\nrandom.seed(42)\nposition = 0      # 초기 위치\nwalk = [position]\nsteps = 1000      # 전체 스텝 수\nstep_list = np.empty(steps, dtype=int)\nfor i in range(steps):\n    # 0또는1을 랜덤하게 선택하여 1이면 1을, 0이면 -1을 step 변수에 할당 \n    # 스텝 마다 움직이는 방향 랜덤\n    step = 1 if random.randint(0,1) else -1\n    position += step # 현재위치에 step 값을 더하여 다음 위치를 계산\n    walk.append(position)\n    step_list[i] = i\nplt.figure()\n<Figure size 1000x600 with 0 Axes>\n\n\n\n\n<Figure size 1000x600 with 0 Axes>\nplt.plot(walk[:1000])\n[<matplotlib.lines.Line2D at 0x211ae859310>]\n\n\n\npng\n\n\n가장 높은 포지션에 도달했을 때는 몇번째 step인가, 가장 높은 포지션\nnp.argmax : 배열에서 가장 큰 인덱스 위치\nnp.max : 배열에서 가장 큰 값\nnp.argmax(walk), np.max(walk)\n(997, 29)\n지금 이사람은 앞으로 몇번 전진했을까요?\n# 전진만한 값의 총합\nnp.sum(np.array(walk)>0)\n219\n# 처음으로 원점으로부터 10만큼 떨어진 위치는 무엇?\n(np.abs(walk) >= 10).argmax()\n14\n# 전진한 값의 총합\nimport random\n\nrandom.seed(42)\nposition = 0\nwalk = [position]\nnsteps = 1000\nstep_list =[]\nfor i in range(nsteps):\n    step = 1 if random.randint(0,1) else -1\n    position += step\n    walk.append(position)\n    step_list.append(step)\n\nnp.sum(np.array(step_list)==1)\n514\n주사위 (1~6)의 눈금을 가지는 주사위를 던져서 5이상이면 앞으로 한칸, 그렇지 않으면 뒤로 한칸 가는 random walk 작성\ncumsum은 array를 input으로 받아서 누적합을 계산해준다\nnsteps = 1000\ndraws = np.random.randint(1,7,size = nsteps)\n#draws[:100]\nsteps = np.where(draws >= 5,1,-1)\nwalk = steps.cumsum()\nwalk\narray([  -1,    0,    1,    2,    1,    0,   -1,   -2,   -3,   -4,   -3,\n         -2,   -3,   -4,   -5,   -6,   -5,   -4,   -5,   -6,   -7,   -8,\n         -9,   -8,   -7,   -8,   -9,  -10,  -11,  -12,  -13,  -14,  -15,\n        -16,  -17,  -18,  -17,  -18,  -19,  -20,  -21,  -22,  -23,  -24,\n        -23,  -24,  -25,  -24,  -25,  -24,  -23,  -24,  -23,  -22,  -21,\n        -22,  -21,  -22,  -21,  -22,  -21,  -20,  -21,  -22,  -23,  -24,\n        -23,  -24,  -23,  -24,  -25,  -26,  -27,  -26,  -27,  -26,  -25,\n        -24,  -25,  -24,  -23,  -24,  -25,  -24,  -23,  -24,  -25,  -26,\n        -27,  -28,  -27,  -28,  -29,  -30,  -31,  -32,  -33,  -34,  -35,\n        -36,  -37,  -36,  -35,  -36,  -37,  -36,  -37,  -36,  -35,  -36,\n        -37,  -38,  -39,  -40,  -39,  -38,  -39,  -38,  -39,  -40,  -41,\n        -40,  -41,  -40,  -41,  -42,  -41,  -42,  -41,  -42,  -43,  -44,\n        -45,  -46,  -47,  -48,  -49,  -50,  -51,  -52,  -53,  -52,  -53,\n        -54,  -55,  -56,  -57,  -56,  -55,  -56,  -57,  -56,  -55,  -54,\n        -55,  -56,  -57,  -56,  -57,  -56,  -57,  -58,  -57,  -58,  -59,\n        -60,  -61,  -62,  -63,  -64,  -65,  -66,  -67,  -66,  -65,  -64,\n        -63,  -64,  -65,  -64,  -65,  -66,  -67,  -68,  -69,  -68,  -67,\n        -68,  -69,  -70,  -69,  -68,  -67,  -68,  -69,  -68,  -69,  -70,\n        -71,  -72,  -71,  -72,  -73,  -74,  -75,  -76,  -77,  -78,  -77,\n        -78,  -79,  -78,  -79,  -80,  -81,  -82,  -83,  -84,  -85,  -86,\n        -85,  -86,  -85,  -86,  -87,  -88,  -87,  -88,  -87,  -88,  -89,\n        -90,  -91,  -92,  -93,  -92,  -93,  -94,  -95,  -94,  -95,  -94,\n        -95,  -96,  -97,  -98,  -99,  -98,  -99, -100,  -99,  -98,  -97,\n        -98,  -97,  -98,  -99, -100, -101, -102, -101, -102, -103, -104,\n       -103, -104, -103, -102, -103, -104, -105, -106, -107, -106, -105,\n       -104, -105, -104, -103, -102, -103, -104, -103, -104, -103, -104,\n       -105, -106, -107, -106, -105, -106, -107, -108, -107, -108, -109,\n       -110, -109, -110, -111, -112, -113, -114, -113, -114, -115, -116,\n       -117, -118, -119, -118, -119, -120, -119, -120, -119, -118, -119,\n       -120, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128,\n       -127, -128, -129, -130, -129, -130, -131, -130, -131, -130, -129,\n       -130, -131, -132, -133, -132, -133, -134, -133, -134, -135, -134,\n       -133, -132, -133, -134, -133, -134, -133, -134, -135, -134, -133,\n       -134, -133, -132, -131, -130, -131, -132, -133, -134, -133, -132,\n       -133, -134, -135, -134, -135, -136, -137, -138, -139, -138, -139,\n       -140, -141, -140, -141, -142, -143, -144, -145, -146, -147, -146,\n       -145, -146, -145, -146, -147, -148, -147, -146, -147, -148, -149,\n       -150, -149, -150, -149, -150, -151, -150, -151, -152, -153, -154,\n       -155, -154, -155, -156, -155, -156, -157, -158, -157, -158, -159,\n       -158, -159, -160, -161, -162, -163, -162, -163, -162, -161, -160,\n       -161, -162, -161, -162, -163, -162, -163, -164, -163, -162, -163,\n       -162, -163, -164, -163, -164, -165, -166, -167, -168, -169, -170,\n       -171, -170, -171, -172, -173, -174, -175, -176, -175, -176, -177,\n       -176, -175, -176, -175, -176, -175, -176, -177, -176, -175, -176,\n       -175, -176, -177, -176, -175, -176, -177, -178, -179, -180, -181,\n       -180, -179, -178, -179, -178, -179, -180, -179, -178, -179, -180,\n       -181, -182, -181, -180, -181, -180, -181, -180, -181, -182, -183,\n       -184, -183, -184, -185, -186, -187, -188, -189, -190, -191, -192,\n       -193, -194, -195, -194, -195, -196, -195, -196, -197, -196, -197,\n       -196, -197, -198, -199, -200, -199, -200, -201, -200, -199, -200,\n       -201, -202, -203, -204, -205, -204, -203, -204, -205, -204, -205,\n       -204, -205, -204, -205, -206, -207, -208, -209, -210, -209, -208,\n       -207, -208, -207, -208, -209, -210, -211, -212, -213, -214, -213,\n       -214, -213, -212, -213, -212, -213, -212, -211, -212, -211, -212,\n       -213, -214, -215, -214, -215, -214, -215, -214, -215, -216, -217,\n       -216, -217, -216, -215, -214, -213, -212, -213, -214, -215, -216,\n       -217, -218, -219, -220, -219, -220, -221, -222, -223, -224, -225,\n       -224, -223, -224, -225, -226, -227, -228, -229, -230, -231, -230,\n       -231, -230, -231, -232, -233, -234, -235, -234, -233, -232, -231,\n       -232, -233, -234, -235, -234, -235, -234, -233, -234, -235, -234,\n       -235, -236, -237, -236, -237, -238, -237, -238, -239, -240, -239,\n       -240, -239, -240, -241, -242, -243, -244, -243, -244, -243, -242,\n       -243, -244, -245, -246, -245, -244, -243, -242, -243, -244, -243,\n       -244, -245, -246, -247, -248, -249, -250, -251, -252, -253, -254,\n       -253, -254, -253, -254, -255, -256, -255, -256, -257, -256, -257,\n       -258, -259, -260, -261, -262, -263, -262, -261, -262, -263, -264,\n       -265, -266, -267, -268, -269, -270, -269, -270, -269, -270, -269,\n       -270, -271, -270, -271, -272, -271, -272, -271, -272, -273, -272,\n       -273, -272, -271, -272, -271, -272, -273, -272, -273, -274, -275,\n       -274, -275, -274, -275, -276, -275, -276, -275, -274, -275, -274,\n       -275, -276, -277, -278, -279, -280, -281, -280, -281, -282, -283,\n       -284, -283, -284, -285, -286, -287, -288, -289, -290, -289, -290,\n       -291, -292, -291, -292, -291, -290, -291, -292, -291, -292, -293,\n       -292, -293, -292, -293, -294, -293, -292, -293, -294, -295, -294,\n       -295, -296, -297, -298, -299, -300, -301, -302, -303, -304, -305,\n       -304, -305, -306, -307, -308, -307, -308, -307, -306, -307, -308,\n       -307, -308, -309, -308, -307, -306, -305, -304, -305, -304, -305,\n       -304, -305, -306, -307, -306, -307, -308, -309, -310, -309, -310,\n       -311, -312, -313, -314, -313, -314, -313, -314, -313, -312, -311,\n       -310, -309, -310, -311, -312, -313, -314, -313, -314, -315, -316,\n       -317, -318, -319, -320, -321, -322, -323, -324, -325, -326, -327,\n       -328, -329, -330, -331, -332, -331, -332, -333, -332, -331, -332,\n       -333, -334, -335, -334, -333, -332, -333, -334, -335, -336, -335,\n       -334, -333, -334, -333, -332, -333, -334, -335, -334, -335, -336,\n       -337, -338, -337, -336, -337, -336, -335, -336, -335, -336, -335,\n       -334, -335, -336, -337, -338, -339, -340, -341, -340, -341, -340,\n       -341, -340, -341, -342, -343, -344, -343, -342, -341, -342, -343,\n       -344, -345, -344, -343, -344, -345, -344, -343, -344, -345, -346,\n       -345, -346, -345, -346, -347, -346, -347, -348, -349, -350, -351,\n       -352, -353, -352, -353, -352, -351, -352, -353, -354, -353, -354,\n       -355, -356, -355, -356, -357, -358, -359, -358, -359, -358])\nwalk.min(), walk.max()\n(-359, 2)\n(np.abs(walk) >= 10).argmax()\n27\nnsteps = 1000\ndraws = np.random.randint(0,2,size = nsteps)\nsteps = np.where(draws > 0,1,-1)\nwalk = steps.cumsum()\nwalk\narray([-1, -2, -3, -4, -3, -4, -5, -4, -5, -4, -3, -2, -1,  0,  1,  2,  1,\n        0, -1,  0,  1,  0, -1, -2, -3, -2, -3, -2, -3, -2, -1, -2, -1,  0,\n       -1,  0, -1,  0, -1,  0,  1,  0, -1, -2, -3, -2, -1, -2, -1,  0,  1,\n        2,  1,  2,  3,  4,  5,  6,  5,  4,  3,  2,  3,  4,  3,  2,  3,  2,\n        3,  4,  3,  2,  3,  4,  5,  4,  5,  6,  5,  4,  5,  4,  5,  6,  7,\n        8,  7,  6,  7,  8,  7,  8,  9, 10, 11, 12, 13, 12, 11, 10, 11, 12,\n       13, 14, 15, 16, 15, 16, 15, 14, 15, 14, 15, 14, 15, 16, 15, 16, 17,\n       18, 19, 18, 19, 20, 19, 18, 19, 18, 17, 16, 17, 18, 17, 18, 19, 18,\n       19, 20, 21, 20, 21, 22, 23, 22, 23, 22, 23, 22, 23, 22, 21, 20, 19,\n       18, 19, 20, 19, 18, 19, 18, 17, 16, 17, 18, 17, 18, 19, 18, 17, 16,\n       17, 18, 17, 16, 17, 18, 17, 16, 17, 16, 17, 18, 17, 18, 17, 16, 17,\n       18, 17, 18, 19, 18, 19, 18, 19, 18, 19, 20, 19, 20, 19, 20, 19, 18,\n       17, 18, 19, 20, 19, 18, 17, 18, 17, 18, 19, 20, 19, 20, 21, 22, 21,\n       22, 21, 20, 19, 18, 19, 18, 19, 18, 19, 18, 17, 18, 17, 16, 17, 16,\n       17, 18, 19, 18, 19, 18, 19, 18, 17, 18, 17, 18, 19, 20, 19, 20, 19,\n       20, 19, 18, 19, 18, 17, 16, 17, 16, 15, 16, 15, 16, 17, 18, 19, 18,\n       19, 18, 19, 18, 19, 20, 21, 22, 21, 22, 21, 20, 19, 20, 19, 18, 17,\n       18, 19, 18, 17, 16, 15, 16, 15, 14, 13, 12, 13, 12, 13, 14, 13, 14,\n       15, 16, 17, 18, 19, 18, 17, 16, 17, 18, 19, 20, 19, 18, 17, 16, 17,\n       18, 17, 16, 17, 16, 17, 18, 17, 18, 17, 18, 19, 18, 17, 16, 15, 14,\n       15, 14, 13, 14, 15, 16, 15, 14, 13, 12, 13, 12, 13, 14, 13, 12, 13,\n       14, 13, 12, 13, 14, 15, 16, 17, 16, 15, 14, 15, 14, 15, 14, 13, 12,\n       11, 12, 13, 12, 11, 10, 11, 10,  9,  8,  9, 10, 11, 12, 11, 12, 11,\n       12, 11, 12, 11, 10,  9,  8,  9, 10, 11, 10, 11, 12, 13, 14, 13, 14,\n       15, 14, 15, 16, 17, 18, 19, 18, 17, 18, 19, 18, 17, 16, 17, 18, 19,\n       18, 17, 18, 17, 18, 19, 18, 17, 16, 17, 18, 17, 16, 15, 14, 15, 14,\n       15, 14, 13, 14, 15, 14, 13, 14, 13, 14, 15, 16, 15, 16, 17, 16, 15,\n       14, 13, 12, 13, 12, 11, 10,  9, 10,  9, 10,  9,  8,  7,  6,  5,  6,\n        5,  6,  7,  8,  7,  8,  9, 10, 11, 12, 13, 12, 11, 12, 11, 10,  9,\n        8,  7,  8,  7,  8,  7,  6,  7,  6,  7,  8,  7,  6,  5,  4,  5,  4,\n        5,  6,  7,  6,  7,  8,  9,  8,  9, 10,  9,  8,  7,  6,  7,  6,  7,\n        8,  9, 10, 11, 10,  9, 10,  9, 10,  9,  8,  7,  8,  7,  8,  7,  8,\n        9, 10, 11, 10, 11, 12, 13, 12, 13, 12, 11, 12, 13, 12, 13, 12, 11,\n       12, 13, 12, 13, 12, 11, 10,  9, 10,  9, 10,  9, 10,  9, 10, 11, 10,\n       11, 12, 13, 14, 15, 14, 13, 14, 15, 16, 15, 14, 15, 16, 15, 14, 13,\n       12, 13, 12, 13, 12, 11, 10,  9,  8,  7,  6,  7,  6,  7,  6,  7,  8,\n        9, 10,  9, 10,  9,  8,  9,  8,  7,  8,  9,  8,  7,  8,  9, 10, 11,\n       12, 11, 12, 13, 14, 13, 14, 13, 14, 15, 16, 17, 18, 17, 18, 17, 18,\n       19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 27, 26, 27, 28, 29, 30, 29,\n       28, 29, 28, 29, 30, 31, 32, 31, 32, 31, 32, 31, 30, 31, 32, 33, 34,\n       35, 34, 35, 36, 35, 36, 35, 36, 35, 36, 37, 38, 39, 40, 41, 42, 43,\n       44, 45, 46, 47, 46, 45, 44, 45, 44, 43, 42, 41, 42, 41, 40, 41, 42,\n       43, 42, 41, 42, 41, 40, 39, 38, 39, 40, 41, 42, 43, 42, 41, 40, 41,\n       40, 39, 40, 41, 40, 39, 40, 39, 40, 39, 40, 41, 40, 39, 40, 39, 40,\n       41, 42, 43, 42, 43, 44, 45, 44, 45, 44, 45, 46, 47, 48, 49, 50, 49,\n       50, 51, 52, 53, 54, 53, 54, 55, 56, 55, 54, 55, 54, 55, 56, 57, 58,\n       59, 58, 59, 60, 59, 58, 57, 58, 59, 58, 57, 58, 59, 58, 57, 58, 57,\n       56, 55, 56, 57, 58, 59, 58, 57, 56, 55, 54, 53, 54, 53, 52, 51, 50,\n       51, 52, 53, 54, 53, 52, 53, 54, 53, 52, 51, 52, 53, 54, 53, 54, 53,\n       52, 51, 52, 51, 52, 53, 52, 53, 52, 51, 52, 53, 54, 55, 56, 55, 54,\n       55, 54, 53, 52, 53, 54, 55, 56, 55, 56, 55, 54, 55, 54, 53, 54, 53,\n       52, 51, 50, 49, 48, 49, 48, 47, 46, 47, 48, 49, 50, 49, 48, 49, 50,\n       51, 52, 51, 50, 49, 48, 47, 48, 47, 48, 49, 48, 47, 48, 49, 50, 49,\n       50, 49, 50, 49, 50, 51, 52, 53, 52, 53, 54, 53, 52, 53, 52, 53, 52,\n       53, 52, 51, 50, 51, 50, 51, 52, 51, 50, 49, 50, 49, 50, 51, 50, 51,\n       52, 53, 52, 53, 54, 55, 54, 55, 54, 53, 52, 51, 50, 51, 50, 49, 50,\n       51, 50, 49, 50, 51, 50, 51, 50, 51, 52, 53, 52, 53, 52, 53, 52, 51,\n       50, 49, 48, 47, 46, 47, 48, 49, 48, 49, 48, 49, 48, 49, 48, 47, 46,\n       45, 44, 45, 46, 47, 46, 45, 44, 45, 46, 45, 44, 45, 46])\nwalk.min(), walk.max()\n(-5, 60)\n(np.abs(walk) >= 10).argmax()\n93"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#simulating-many-random-walks-at-once",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#simulating-many-random-walks-at-once",
    "title": "advanced_python CH4",
    "section": "19 Simulating Many Random Walks at Once",
    "text": "19 Simulating Many Random Walks at Once\nnwalks = 5000\nnsteps = 1000\ndraws = np.random.randint(0,2, size = (nwalks, nsteps)) # 0 or 1\nsteps = np.where(draws >0, 1, -1)\nwalks = steps.cumsum(1)\nwalks\narray([[  1,   2,   3, ...,   8,   7,   6],\n       [ -1,   0,   1, ..., -34, -35, -36],\n       [ -1,  -2,  -1, ...,  66,  67,  66],\n       ...,\n       [ -1,  -2,  -3, ..., -34, -35, -34],\n       [  1,   2,   1, ...,  74,  75,  74],\n       [ -1,  -2,  -3, ..., -32, -31, -32]])\nwalks.max()\n112\nwalks.min()\n-111\nhits30 = (np.abs(walks) >= 30).any(1)\nhits30.sum()\n3410\ncrossing_times = (np.abs(walks[hits30]) >= 30).argmax(1)\ncrossing_times.mean()\n496.2932551319648\nsteps = np.random.normal(loc=0, scale=0.25,\n                        size = (nwalks, nsteps))\nsteps\narray([[ 0.0719,  0.1141, -0.0422, ...,  0.6224,  0.0603, -0.1633],\n       [ 0.3211, -0.1576,  0.016 , ..., -0.2379,  0.2592, -0.0399],\n       [ 0.1593,  0.4357,  0.147 , ...,  0.0683, -0.1233,  0.0522],\n       ...,\n       [ 0.177 ,  0.4305,  0.1017, ..., -0.3649, -0.2256,  0.1905],\n       [-0.0539,  0.2377,  0.0203, ..., -0.2376,  0.052 ,  0.3039],\n       [ 0.349 ,  0.3813,  0.0644, ...,  0.1646,  0.3622,  0.1421]])"
  },
  {
    "objectID": "posts/Advanced_Python_ch4/챕터4 공부.html#quiz-3-1",
    "href": "posts/Advanced_Python_ch4/챕터4 공부.html#quiz-3-1",
    "title": "advanced_python CH4",
    "section": "20 Quiz 3",
    "text": "20 Quiz 3\nrng = np.random.RandomState(1234)\narr = rng.standard_normal(100)\narr\narray([ 0.4714, -1.191 ,  1.4327, -0.3127, -0.7206,  0.8872,  0.8596,\n       -0.6365,  0.0157, -2.2427,  1.15  ,  0.9919,  0.9533, -2.0213,\n       -0.3341,  0.0021,  0.4055,  0.2891,  1.3212, -1.5469, -0.2026,\n       -0.656 ,  0.1934,  0.5534,  1.3182, -0.4693,  0.6756, -1.817 ,\n       -0.1831,  1.059 , -0.3978,  0.3374,  1.0476,  1.0459,  0.8637,\n       -0.1221,  0.1247, -0.3228,  0.8417,  2.391 ,  0.0762, -0.5664,\n        0.0361, -2.075 ,  0.2478, -0.8972, -0.1368,  0.0183,  0.7554,\n        0.2153,  0.841 , -1.4458, -1.402 , -0.1009, -0.5482, -0.1446,\n        0.354 , -0.0355,  0.5657,  1.5457, -0.9742, -0.0703,  0.308 ,\n       -0.2085,  1.0338, -2.4005,  2.0306, -1.1426,  0.2119,  0.7047,\n       -0.7854,  0.4621,  0.7042,  0.5235, -0.9263,  2.0078,  0.227 ,\n       -1.1527,  0.632 ,  0.0395,  0.4644, -3.5635,  1.3211,  0.1526,\n        0.1645, -0.4301,  0.7674,  0.9849,  0.2708,  1.392 ,  0.0798,\n       -0.4   , -1.0279, -0.5847,  0.8166, -0.0819, -0.3448,  0.5283,\n       -1.069 , -0.5119])\n# 0보다 큰 수의 개수\n(arr>0).sum()\n57\n\n20.1 0보다 큰 모든 수의 합\nnp.sum(arr[arr>0])\n39.714368245810974\narr[arr>0].sum()\n39.714368245810974"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Profile",
    "section": "",
    "text": "Name\nSeongtaek Jo\n\n\nBirth\n1999.01.15\n\n\nPhone\n+82 10-9823-3115\n\n\nEmail\ntjdxor3115@naver.com\n\n\ncertificate\nADsP (데이터분석 준전문가)\n\n\nstarted from the Gwangju"
  },
  {
    "objectID": "work.html",
    "href": "work.html",
    "title": "Work",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nData_Mining_Kaggle\n\n\n\n\n\n\n\ncode\n\n\ndata_mining\n\n\njupyter\n\n\nkaggle\n\n\n\n\n\n\n\n\n\n\n\nMay 2, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Mining_Kaggle\n\n\n\n\n\n\n\ncode\n\n\ndata_mining\n\n\njupyter\n\n\nkaggle\n\n\n\n\n\n\n\n\n\n\n\nMay 2, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Mining_Kaggle\n\n\n\n\n\n\n\ncode\n\n\ndata_mining\n\n\njupyter\n\n\nkaggle\n\n\n\n\n\n\n\n\n\n\n\nMay 2, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Mining_Kaggle\n\n\n\n\n\n\n\ncode\n\n\ndata_mining\n\n\njupyter\n\n\nkaggle\n\n\n\n\n\n\n\n\n\n\n\nMay 2, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Mining_Kaggle\n\n\n\n\n\n\n\ncode\n\n\ndata_mining\n\n\njupyter\n\n\nkaggle\n\n\n\n\n\n\n\n\n\n\n\nMay 2, 2023\n\n\nSeongtaek\n\n\n\n\n\n\n  \n\n\n\n\nData_Mining_Penguin\n\n\n\n\n\n\n\ncode\n\n\ndata_mining\n\n\njupyter\n\n\n\n\n\n\n\n\n\n\n\nApr 27, 2023\n\n\nSeongtaek\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html",
    "href": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html",
    "title": "Data_Mining_Penguin",
    "section": "",
    "text": "Penguin Data"
  },
  {
    "objectID": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#load-data",
    "href": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#load-data",
    "title": "Data_Mining_Penguin",
    "section": "1 Load data",
    "text": "1 Load data\n\n예제로 사용할 펭귄 데이터를 불러옵니다.\nseaborn에 내장되어 있습니다.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\npenguins = sns.load_dataset(\"penguins\")\npenguins.head()\n\n\n\n\n\n\n\n\n\nspecies\n\n\nisland\n\n\nbill_length_mm\n\n\nbill_depth_mm\n\n\nflipper_length_mm\n\n\nbody_mass_g\n\n\nsex\n\n\n\n\n\n\n0\n\n\nAdelie\n\n\nTorgersen\n\n\n39.1\n\n\n18.7\n\n\n181.0\n\n\n3750.0\n\n\nMale\n\n\n\n\n1\n\n\nAdelie\n\n\nTorgersen\n\n\n39.5\n\n\n17.4\n\n\n186.0\n\n\n3800.0\n\n\nFemale\n\n\n\n\n2\n\n\nAdelie\n\n\nTorgersen\n\n\n40.3\n\n\n18.0\n\n\n195.0\n\n\n3250.0\n\n\nFemale\n\n\n\n\n3\n\n\nAdelie\n\n\nTorgersen\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n\n\n4\n\n\nAdelie\n\n\nTorgersen\n\n\n36.7\n\n\n19.3\n\n\n193.0\n\n\n3450.0\n\n\nFemale"
  },
  {
    "objectID": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#figure-and-axes",
    "href": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#figure-and-axes",
    "title": "Data_Mining_Penguin",
    "section": "2 Figure and Axes",
    "text": "2 Figure and Axes\n\nmatplotlib으로 도화지figure를 깔고 축공간axes를 만듭니다.\n1 x 2 축공간을 구성합니다.\n\n### 도화지 생성\nfig, axes = plt.subplots(ncols=2, figsize=(8,4))\n\nfig.tight_layout()\n\n\n\npng"
  },
  {
    "objectID": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#plot-with-matplotlib",
    "href": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#plot-with-matplotlib",
    "title": "Data_Mining_Penguin",
    "section": "3 plot with matplotlib",
    "text": "3 plot with matplotlib\n\nmatplotlib 기능을 이용해서 산점도를 그립니다.\n\nx축은 부리 길이 bill length\ny축은 부리 위 아래 두께 bill depth\n색상은 종species로 합니다.\nAdelie, Chinstrap, Gentoo이 있습니다.\n\n두 축공간 중 왼쪽에만 그립니다.\n컬러를 다르게 주기 위해 f-string 포맷을 사용했습니다. f-string 포맷에 대한 설명은 https://blockdmask.tistory.com/429를 참고하세요\n\n### 도화지 생성\nfig, axes = plt.subplots(ncols=2,figsize=(8,4))\n\n### 모든 펭귄 종류\nspecies_u = penguins[\"species\"].unique()\n\n### 첫 번째 subplot 그리기\nfor i, s in enumerate(species_u):\n    axes[0].scatter(penguins[\"bill_length_mm\"].loc[penguins[\"species\"]==s],\n                    penguins[\"bill_depth_mm\"].loc[penguins[\"species\"]==s],\n                    c=f\"C{i}\", label=s, alpha=0.3)\n\n### 범례 추가\naxes[0].legend(species_u, title=\"species\", fontsize=8)\n\n### x,y 레이블 지정\naxes[0].set_xlabel(\"Bill Length (mm)\")\naxes[0].set_ylabel(\"Bill Depth (mm)\")\n\n### plt.show()\nfig.tight_layout()\n\n\n\npng\n\n\n\n조금 더 간단히 그리는 방법\n\nmatplotlib는 기본적으로 Categorical 변수를 color로 바로 사용하지 못함\n\n\n### 펭귄 종류를 고유의 숫자코드로 변환\npenguins[\"species_codes\"] = pd.Categorical(penguins[\"species\"]).codes\n\n### 도화지 생성\nfig, axes = plt.subplots(ncols=2,figsize=(8,4))\n\n### 첫 번재 subplot 그리기 \na = axes[0].scatter(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", c=\"species_codes\", alpha=0.3) # 크기:s\na\n\n### 범례 추가\naxes[0].legend(*a.legend_elements(), title=\"Species\", fontsize=8) # 범례위치 : loc='lower right', 'upper center', etc..\n\n### x,y 레이블 지정\naxes[0].set_xlabel(\"Bill Length (mm)\")\naxes[0].set_ylabel(\"Bill Depth (mm)\")\n<__array_function__ internals>:180: UserWarning: Warning: converting a masked element to nan.\nC:\\Users\\seong taek\\anaconda3\\lib\\site-packages\\matplotlib\\colors.py:1311: UserWarning: Warning: converting a masked element to nan.\n  data = np.asarray(value)\nC:\\Users\\seong taek\\anaconda3\\lib\\site-packages\\matplotlib\\ticker.py:521: UserWarning: Warning: converting a masked element to nan.\n  if self._useLocale else fmt % arg)\n\n\n\n\n\nText(0, 0.5, 'Bill Depth (mm)')\n\n\n\npng"
  },
  {
    "objectID": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#plot-with-seaborn",
    "href": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#plot-with-seaborn",
    "title": "Data_Mining_Penguin",
    "section": "4 Plot with seaborn",
    "text": "4 Plot with seaborn\n\n두 번째 plot 그리기\n\n### 도화지 생성\nfig, axes = plt.subplots(ncols=2,figsize=(8,4))\n\n### 모든 펭귄 종류\nspecies_u = penguins[\"species\"].unique()\n\n### 첫 번째 subplot 그리기\nfor i, s in enumerate(species_u):\n    axes[0].scatter(penguins[\"bill_length_mm\"].loc[penguins[\"species\"]==s],\n                    penguins[\"bill_depth_mm\"].loc[penguins[\"species\"]==s],\n                    c=f\"C{i}\", label=s, alpha=0.3)\n\n### 범례 추가    \naxes[0].legend(species_u, title=\"species\")\n\n### x,y 레이블 지정\naxes[0].set_xlabel(\"Bill Length (mm)\")\naxes[0].set_ylabel(\"Bill Depth (mm)\")\n\n\n### 두 번째 subplot 그리기\nsns.scatterplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"species\", data=penguins, alpha=0.3, ax=axes[1])\naxes[1].set_xlabel(\"Bill Length (mm)\")\naxes[1].set_ylabel(\"Bill Depth (mm)\")\n\nfig.tight_layout()\n\n\n\npng\n\n\n\n단 세 줄로 거의 동일한 그림이 나왔습니다.\n\nscatter plot의 점 크기만 살짝 작습니다.\nlabel의 투명도만 살짝 다릅니다.\n\nseaborn 명령 scatterplot()을 그대로 사용했습니다.\nx축과 y축 label도 바꾸었습니다.\n\nax=axes[1] 인자에서 볼 수 있듯, 존재하는 axes에 그림만 얹었습니다.\nmatplotlib 틀 + seaborn 그림 이므로, matplotlib 명령이 모두 통합니다."
  },
  {
    "objectID": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#matplotlib-seaborn-seaborn-matplotlib",
    "href": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#matplotlib-seaborn-seaborn-matplotlib",
    "title": "Data_Mining_Penguin",
    "section": "5 matplotlib + seaborn & seaborn + matplotlib",
    "text": "5 matplotlib + seaborn & seaborn + matplotlib\n\nmatplotlib과 seaborn이 자유롭게 섞일 수 있습니다.\n\nmatplotlib 산점도 위에 seaborn 추세선을 얹을 수 있고,\nseaborn 산점도 위에 matplotlib 중심점을 얹을 수 있습니다.\n\n파이썬 코드는 다음과 같습니다.\n\n### 도화지 생성\nfig, axes = plt.subplots(ncols=2, figsize=(8, 4))\n\n### 모든 펭귄 종류\nspecies_u = penguins[\"species\"].unique()\n\n### 첫 번째 subplot 그리기 + 추세선\nfor i, s in enumerate(species_u):\n    axes[0].scatter(penguins[\"bill_length_mm\"].loc[penguins[\"species\"]==s],\n                   penguins[\"bill_depth_mm\"].loc[penguins[\"species\"]==s],\n                   c=f\"C{i}\", label=s, alpha=0.3\n                  )                  \n    sns.regplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", data=penguins.loc[penguins[\"species\"]==s], \n                scatter=False, ax=axes[0])\n    \naxes[0].legend(species_u, title=\"species\")\naxes[0].set_xlabel(\"Bill Length (mm)\")\naxes[0].set_ylabel(\"Bill Depth (mm)\")\n\n### 두 번째 subplot 그리기\nsns.scatterplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"species\", data=penguins, alpha=0.3, ax=axes[1])\naxes[1].set_xlabel(\"Bill Length (mm)\")\naxes[1].set_ylabel(\"Bill Depth (mm)\")\n\n\n### 중심점 marker\nfor i, s in enumerate(species_u):\n    axes[1].scatter(penguins[\"bill_length_mm\"].loc[penguins[\"species\"]==s].mean(),\n                   penguins[\"bill_depth_mm\"].loc[penguins[\"species\"]==s].mean(),\n                   c=f\"C{i}\", alpha=1, marker=\"x\", s=100\n                  )\n\nfig.tight_layout()\n\n\n\npng"
  },
  {
    "objectID": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#seaborn-seaborn-matplotlib",
    "href": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#seaborn-seaborn-matplotlib",
    "title": "Data_Mining_Penguin",
    "section": "6 seaborn + seaborn + matplotlib",
    "text": "6 seaborn + seaborn + matplotlib\n\n안 될 이유가 없습니다.\nseaborn scatterplot + seaborn kdeplot + matplotlib text입니다\n\n### 도화지 생성\nfig, ax = plt.subplots(figsize=(6,5))\n\n### plot 0: scatter plot\nsns.scatterplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", color=\"k\", data=penguins, alpha=0.3, ax=ax, legend=False)\n\n### plot 1: kde plot (밀도 그래프)\nsns.kdeplot(x=\"bill_length_mm\", y=\"bill_depth_mm\", hue=\"species\", data=penguins, alpha=0.5, ax=ax, legend=False)\n\n### text:\nspecies_u = penguins[\"species\"].unique()\nfor i, s in enumerate(species_u):\n    ax.text(penguins[\"bill_length_mm\"].loc[penguins[\"species\"]==s].mean(),\n            penguins[\"bill_depth_mm\"].loc[penguins[\"species\"]==s].mean(),\n            s = s, fontdict={\"fontsize\":14, \"fontweight\":\"bold\",\"color\":\"k\"}\n            )\n\nax.set_xlabel(\"Bill Length (mm)\")\nax.set_ylabel(\"Bill Depth (mm)\")\n\nfig.tight_layout()\n\n\n\npng"
  },
  {
    "objectID": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#quiz",
    "href": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#quiz",
    "title": "Data_Mining_Penguin",
    "section": "7 Quiz",
    "text": "7 Quiz\nBill length를 10단위로 나눈 후, Bill length에 따른 Bill depth의 boxplot을 그리시오\n### bill length를 10단위로 만든 후, 새로운 컬럼 추가\npenguins['bill_length_10'] = (penguins['bill_length_mm'] // 10) * 10\npenguins\n\n\n\n\n\n\n\n\n\nspecies\n\n\nisland\n\n\nbill_length_mm\n\n\nbill_depth_mm\n\n\nflipper_length_mm\n\n\nbody_mass_g\n\n\nsex\n\n\nspecies_codes\n\n\nbill_length_10\n\n\n\n\n\n\n0\n\n\nAdelie\n\n\nTorgersen\n\n\n39.1\n\n\n18.7\n\n\n181.0\n\n\n3750.0\n\n\nMale\n\n\n0\n\n\n30.0\n\n\n\n\n1\n\n\nAdelie\n\n\nTorgersen\n\n\n39.5\n\n\n17.4\n\n\n186.0\n\n\n3800.0\n\n\nFemale\n\n\n0\n\n\n30.0\n\n\n\n\n2\n\n\nAdelie\n\n\nTorgersen\n\n\n40.3\n\n\n18.0\n\n\n195.0\n\n\n3250.0\n\n\nFemale\n\n\n0\n\n\n40.0\n\n\n\n\n3\n\n\nAdelie\n\n\nTorgersen\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n0\n\n\nNaN\n\n\n\n\n4\n\n\nAdelie\n\n\nTorgersen\n\n\n36.7\n\n\n19.3\n\n\n193.0\n\n\n3450.0\n\n\nFemale\n\n\n0\n\n\n30.0\n\n\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n\n\n339\n\n\nGentoo\n\n\nBiscoe\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n2\n\n\nNaN\n\n\n\n\n340\n\n\nGentoo\n\n\nBiscoe\n\n\n46.8\n\n\n14.3\n\n\n215.0\n\n\n4850.0\n\n\nFemale\n\n\n2\n\n\n40.0\n\n\n\n\n341\n\n\nGentoo\n\n\nBiscoe\n\n\n50.4\n\n\n15.7\n\n\n222.0\n\n\n5750.0\n\n\nMale\n\n\n2\n\n\n50.0\n\n\n\n\n342\n\n\nGentoo\n\n\nBiscoe\n\n\n45.2\n\n\n14.8\n\n\n212.0\n\n\n5200.0\n\n\nFemale\n\n\n2\n\n\n40.0\n\n\n\n\n343\n\n\nGentoo\n\n\nBiscoe\n\n\n49.9\n\n\n16.1\n\n\n213.0\n\n\n5400.0\n\n\nMale\n\n\n2\n\n\n40.0\n\n\n\n\n\n\n344 rows × 9 columns\n\n\n### 박스 plot\nsns.boxenplot(x = 'bill_length_10', y = 'bill_depth_mm', data=penguins)\n\n### 점 표현\nsns.stripplot(x = 'bill_length_10', y = 'bill_depth_mm', data=penguins, color='black', size=4)\n\nsns.set_style('whitegrid')\nplt.show()\n\n\n\npng\n\n\n\n7.1 sns.set_style\n\ndarkgrid: 어두운 배경에 격자 라인이 그려지는 스타일\nwhitegrid: 밝은 배경에 격자 라인이 그려지는 스타일\ndark: 어두운 배경에 격자 라인이 없는 스타일\nwhite: 밝은 배경에 격자 라인이 없는 스타일\nticks: 격자 라인 대신 축의 눈금 표시가 있는 스타일\n\n\n\n7.2 pd.cut 이용\n### bill length를 구간별로 만든 후, 새로운 컬럼 추가\npenguins['bill_length_group'] = pd.cut(penguins['bill_length_mm'],\n                                      bins=[0,40,50,60],\n                                      labels=['0~40', '40~50', '50~60'])\npenguins\n\n\n\n\n\n\n\n\n\nspecies\n\n\nisland\n\n\nbill_length_mm\n\n\nbill_depth_mm\n\n\nflipper_length_mm\n\n\nbody_mass_g\n\n\nsex\n\n\nspecies_codes\n\n\nbill_length_10\n\n\nbill_length_group\n\n\n\n\n\n\n0\n\n\nAdelie\n\n\nTorgersen\n\n\n39.1\n\n\n18.7\n\n\n181.0\n\n\n3750.0\n\n\nMale\n\n\n0\n\n\n30.0\n\n\n0~40\n\n\n\n\n1\n\n\nAdelie\n\n\nTorgersen\n\n\n39.5\n\n\n17.4\n\n\n186.0\n\n\n3800.0\n\n\nFemale\n\n\n0\n\n\n30.0\n\n\n0~40\n\n\n\n\n2\n\n\nAdelie\n\n\nTorgersen\n\n\n40.3\n\n\n18.0\n\n\n195.0\n\n\n3250.0\n\n\nFemale\n\n\n0\n\n\n40.0\n\n\n40~50\n\n\n\n\n3\n\n\nAdelie\n\n\nTorgersen\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n0\n\n\nNaN\n\n\nNaN\n\n\n\n\n4\n\n\nAdelie\n\n\nTorgersen\n\n\n36.7\n\n\n19.3\n\n\n193.0\n\n\n3450.0\n\n\nFemale\n\n\n0\n\n\n30.0\n\n\n0~40\n\n\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n\n\n339\n\n\nGentoo\n\n\nBiscoe\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n2\n\n\nNaN\n\n\nNaN\n\n\n\n\n340\n\n\nGentoo\n\n\nBiscoe\n\n\n46.8\n\n\n14.3\n\n\n215.0\n\n\n4850.0\n\n\nFemale\n\n\n2\n\n\n40.0\n\n\n40~50\n\n\n\n\n341\n\n\nGentoo\n\n\nBiscoe\n\n\n50.4\n\n\n15.7\n\n\n222.0\n\n\n5750.0\n\n\nMale\n\n\n2\n\n\n50.0\n\n\n50~60\n\n\n\n\n342\n\n\nGentoo\n\n\nBiscoe\n\n\n45.2\n\n\n14.8\n\n\n212.0\n\n\n5200.0\n\n\nFemale\n\n\n2\n\n\n40.0\n\n\n40~50\n\n\n\n\n343\n\n\nGentoo\n\n\nBiscoe\n\n\n49.9\n\n\n16.1\n\n\n213.0\n\n\n5400.0\n\n\nMale\n\n\n2\n\n\n40.0\n\n\n40~50\n\n\n\n\n\n\n344 rows × 10 columns\n\n\nsns.boxenplot(x = 'bill_length_group', y = 'bill_depth_mm', data=penguins)\nsns.stripplot(x = 'bill_length_group', y = 'bill_depth_mm', data=penguins, color='black', size=4)\n\nsns.set_style('whitegrid')\nsns.despine()\nplt.show()\n\n\n\npng\n\n\nsns.scatterplot(x='bill_length_mm', y='bill_depth_mm', data=penguins, alpha=0.3)\n\nplt.show()\n\n\n\npng\n\n\n\n열 기준 : species\n색상 : species별\n한 행의 subplot 개수\nmap : x축, y축 지정\nsns.despine : 상단, 우측 축 제거\n\ng = sns.FacetGrid(penguins, col='species',hue='species',col_wrap=3)\ng.map(sns.scatterplot, 'bill_length_mm', 'bill_depth_mm')\n\nsns.set_style('whitegrid')\nsns.despine()\n\nplt.show()\n\n\n\npng"
  },
  {
    "objectID": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#section",
    "href": "posts_work/Data_Mining_penguin/4월 25일 펭귄.html#section",
    "title": "Data_Mining_Penguin",
    "section": "8 ",
    "text": "8"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html",
    "href": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html",
    "title": "Data_Mining_Kaggle",
    "section": "",
    "text": "Exercise 1 - Your First Map"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#introduction",
    "href": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#introduction",
    "title": "Data_Mining_Kaggle",
    "section": "1 Introduction",
    "text": "1 Introduction\nKiva.org is an online crowdfunding platform extending financial services to poor people around the world. Kiva lenders have provided over $1 billion dollars in loans to over 2 million people.\n\n\n\nKiva reaches some of the most remote places in the world through their global network of “Field Partners”. These partners are local organizations working in communities to vet borrowers, provide services, and administer loans.\nIn this exercise, you’ll investigate Kiva loans in the Philippines. Can you identify regions that might be outside of Kiva’s current network, in order to identify opportunities for recruiting new Field Partners?\nTo get started, run the code cell below to set up our feedback system.\nThis notebook is an exercise in the Geospatial Analysis course. You can reference the tutorial at this link.\n\nimport geopandas as gpd\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#get-the-data",
    "href": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#get-the-data",
    "title": "Data_Mining_Kaggle",
    "section": "2 Get the data",
    "text": "2 Get the data\n\n다음 셀을 사용하여 loans_filepath에 있는 모양 파일을 로드하여 GeoDataFrame world_loans를 만듭니다.\n\nloans_filepath = \"C:/Users\\seong taek/Desktop/archive/kiva_loans/kiva_loans/kiva_loans.shp\"\n\n### Your code here: Load the data\nworld_loans = gpd.read_file(loans_filepath)\n\n### Uncomment to view the first five rows of the data\nworld_loans.head()\n\n\n\n\n\n\n\n\n\nPartner ID\n\n\nField Part\n\n\nsector\n\n\nLoan Theme\n\n\ncountry\n\n\namount\n\n\ngeometry\n\n\n\n\n\n\n0\n\n\n9\n\n\nKREDIT Microfinance Institution\n\n\nGeneral Financial Inclusion\n\n\nHigher Education\n\n\nCambodia\n\n\n450\n\n\nPOINT (102.89751 13.66726)\n\n\n\n\n1\n\n\n9\n\n\nKREDIT Microfinance Institution\n\n\nGeneral Financial Inclusion\n\n\nVulnerable Populations\n\n\nCambodia\n\n\n20275\n\n\nPOINT (102.98962 13.02870)\n\n\n\n\n2\n\n\n9\n\n\nKREDIT Microfinance Institution\n\n\nGeneral Financial Inclusion\n\n\nHigher Education\n\n\nCambodia\n\n\n9150\n\n\nPOINT (102.98962 13.02870)\n\n\n\n\n3\n\n\n9\n\n\nKREDIT Microfinance Institution\n\n\nGeneral Financial Inclusion\n\n\nVulnerable Populations\n\n\nCambodia\n\n\n604950\n\n\nPOINT (105.31312 12.09829)\n\n\n\n\n4\n\n\n9\n\n\nKREDIT Microfinance Institution\n\n\nGeneral Financial Inclusion\n\n\nSanitation\n\n\nCambodia\n\n\n275\n\n\nPOINT (105.31312 12.09829)\n\n\n\n\n\n\n\n2.1 world_loans 데이터셋 시각화\nworld_loans.plot()\n<Axes: >\n\n\n\npng"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#plot-the-data.",
    "href": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#plot-the-data.",
    "title": "Data_Mining_Kaggle",
    "section": "3 Plot the data.",
    "text": "3 Plot the data.\n\n변경하지 않고 다음 코드 셀을 실행하여 국가 경계가 포함된 GeoDataFrame 월드를 로드합니다\n\n### This dataset is provided in GeoPandas\nworld_filepath = gpd.datasets.get_path('naturalearth_lowres')\nworld = gpd.read_file(world_filepath)\nworld.head()\n\n\n\n\n\n\n\n\n\npop_est\n\n\ncontinent\n\n\nname\n\n\niso_a3\n\n\ngdp_md_est\n\n\ngeometry\n\n\n\n\n\n\n0\n\n\n889953.0\n\n\nOceania\n\n\nFiji\n\n\nFJI\n\n\n5496\n\n\nMULTIPOLYGON (((180.00000 -16.06713, 180.00000…\n\n\n\n\n1\n\n\n58005463.0\n\n\nAfrica\n\n\nTanzania\n\n\nTZA\n\n\n63177\n\n\nPOLYGON ((33.90371 -0.95000, 34.07262 -1.05982…\n\n\n\n\n2\n\n\n603253.0\n\n\nAfrica\n\n\nW. Sahara\n\n\nESH\n\n\n907\n\n\nPOLYGON ((-8.66559 27.65643, -8.66512 27.58948…\n\n\n\n\n3\n\n\n37589262.0\n\n\nNorth America\n\n\nCanada\n\n\nCAN\n\n\n1736425\n\n\nMULTIPOLYGON (((-122.84000 49.00000, -122.9742…\n\n\n\n\n4\n\n\n328239523.0\n\n\nNorth America\n\n\nUnited States of America\n\n\nUSA\n\n\n21433226\n\n\nMULTIPOLYGON (((-122.84000 49.00000, -120.0000…\n\n\n\n\n\n\n\n3.1 world 데이터셋 시각화\nworld.plot()\n<Axes: >\n\n\n\npng\n\n\n\n\n3.2 World and World_loans GeoDataFrames를 사용하여 전 세계 Kiva 대출 위치 시각화하기\n### Your code here\nworld_data = world.plot()\nworld_loans.plot(ax=world_data, color='red', markersize=0.1)\n<Axes: >\n\n\n\npng"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#select-loans-based-in-the-philippines.",
    "href": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#select-loans-based-in-the-philippines.",
    "title": "Data_Mining_Kaggle",
    "section": "4 Select loans based in the Philippines.",
    "text": "4 Select loans based in the Philippines.\n\n다음으로, 당신은 필리핀에 기반을 둔 대출에 초점을 맞출 것입니다. 다음 코드 셀을 사용하여 필리핀에 기반을 둔 대출이 있는 world_loans의 모든 행을 포함하는 GeoDataFrame PHL_loans를 생성합니다\n\n# Your code here\nPHL_loans = world_loans.loc[world_loans['country'] =='Philippines']\nPHL_loans.head()\n\n\n\n\n\n\n\n\n\nPartner ID\n\n\nField Part\n\n\nsector\n\n\nLoan Theme\n\n\ncountry\n\n\namount\n\n\ngeometry\n\n\n\n\n\n\n2859\n\n\n123\n\n\nAlalay sa Kaunlaran (ASKI)\n\n\nGeneral Financial Inclusion\n\n\nGeneral\n\n\nPhilippines\n\n\n400\n\n\nPOINT (121.73961 17.64228)\n\n\n\n\n2860\n\n\n123\n\n\nAlalay sa Kaunlaran (ASKI)\n\n\nGeneral Financial Inclusion\n\n\nGeneral\n\n\nPhilippines\n\n\n400\n\n\nPOINT (121.74169 17.63235)\n\n\n\n\n2861\n\n\n123\n\n\nAlalay sa Kaunlaran (ASKI)\n\n\nGeneral Financial Inclusion\n\n\nGeneral\n\n\nPhilippines\n\n\n400\n\n\nPOINT (121.46667 16.60000)\n\n\n\n\n2862\n\n\n123\n\n\nAlalay sa Kaunlaran (ASKI)\n\n\nGeneral Financial Inclusion\n\n\nGeneral\n\n\nPhilippines\n\n\n6050\n\n\nPOINT (121.73333 17.83333)\n\n\n\n\n2863\n\n\n123\n\n\nAlalay sa Kaunlaran (ASKI)\n\n\nGeneral Financial Inclusion\n\n\nGeneral\n\n\nPhilippines\n\n\n625\n\n\nPOINT (121.51800 16.72368)"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#understand-loans-in-the-philippines.",
    "href": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#understand-loans-in-the-philippines.",
    "title": "Data_Mining_Kaggle",
    "section": "5 Understand loans in the Philippines.",
    "text": "5 Understand loans in the Philippines.\n\n변경 없이 다음 코드 셀을 실행하여 필리핀의 모든 섬에 대한 경계가 포함된 GeoDataFrame “PHL”을 로드합니다\n\n# Load a KML file containing island boundaries\ngpd.io.file.fiona.drvsupport.supported_drivers['KML'] = 'rw'\nPHL = gpd.read_file(\"C:/Users\\seong taek/Desktop/archive/Philippines_AL258.kml\", driver='KML')\nPHL.head()\n\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\ngeometry\n\n\n\n\n\n\n0\n\n\nAutonomous Region in Muslim Mindanao\n\n\n\n\nMULTIPOLYGON (((119.46690 4.58718, 119.46653 4…\n\n\n\n\n1\n\n\nBicol Region\n\n\n\n\nMULTIPOLYGON (((124.04577 11.57862, 124.04594 …\n\n\n\n\n2\n\n\nCagayan Valley\n\n\n\n\nMULTIPOLYGON (((122.51581 17.04436, 122.51568 …\n\n\n\n\n3\n\n\nCalabarzon\n\n\n\n\nMULTIPOLYGON (((120.49202 14.05403, 120.49201 …\n\n\n\n\n4\n\n\nCaraga\n\n\n\n\nMULTIPOLYGON (((126.45401 8.24400, 126.45407 8…\n\n\n\n\n\n\n\n5.1 PHL’ 및 ‘PHL_loans’ GeoDataFrames를 사용하여 필리핀의 대출을 시각화할 수 있습니다.\n# Your code here\nPHL = PHL.plot()\nPHL_loans.plot(ax=PHL, color='red', markersize=0.2)\n<Axes: >\n\n\n\npng\n\n\n새로운 Field Partners를 모집하는 데 유용한 섬을 찾을 수 있습니까? 현재 키바의 손이 닿지 않는 곳에 보이는 섬이 있습니까?\nthis map 은 질문에 대답하는 데 유용할 수 있습니다."
  },
  {
    "objectID": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#keep-going",
    "href": "posts_work/Data_Mining_exercise1/exercise1-your-first-map.html#keep-going",
    "title": "Data_Mining_Kaggle",
    "section": "6 Keep going",
    "text": "6 Keep going\nContinue to learn about coordinate reference systems.\n\nHave questions or comments? Visit the course discussion forum to chat with other learners."
  },
  {
    "objectID": "posts_work/Data_Mining_exercise2/exercise2-coordinate-reference-systems.html",
    "href": "posts_work/Data_Mining_exercise2/exercise2-coordinate-reference-systems.html",
    "title": "Data_Mining_Kaggle",
    "section": "",
    "text": "Exercise 2 - Coordinate Reference Systems\nThis notebook is an exercise in the Geospatial Analysis course. You can reference the tutorial at this link."
  },
  {
    "objectID": "posts_work/Data_Mining_exercise2/exercise2-coordinate-reference-systems.html#introduction",
    "href": "posts_work/Data_Mining_exercise2/exercise2-coordinate-reference-systems.html#introduction",
    "title": "Data_Mining_Kaggle",
    "section": "1 Introduction",
    "text": "1 Introduction\nYou are a bird conservation expert and want to understand migration patterns of purple martins. In your research, you discover that these birds typically spend the summer breeding season in the eastern United States, and then migrate to South America for the winter. But since this bird is under threat of endangerment, you’d like to take a closer look at the locations that these birds are more likely to visit.\n\n\n\nThere are several protected areas in South America, which operate under special regulations to ensure that species that migrate (or live) there have the best opportunity to thrive. You’d like to know if purple martins tend to visit these areas. To answer this question, you’ll use some recently collected data that tracks the year-round location of eleven different birds.\nBefore you get started, run the code cell below to set everything up.\nimport pandas as pd\nimport geopandas as gpd\nfrom shapely.geometry import LineString\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise2/exercise2-coordinate-reference-systems.html#exercises",
    "href": "posts_work/Data_Mining_exercise2/exercise2-coordinate-reference-systems.html#exercises",
    "title": "Data_Mining_Kaggle",
    "section": "2 Exercises",
    "text": "2 Exercises\n\n2.1 Load the data.\n다음 코드 셀을 (변경 없이) 실행하여 GPS 데이터를 Panda DataFrame birds_df에 로드합니다.\n# Load the data and print the first 5 rows\nbirds_df = pd.read_csv(\"C:/Users\\seong taek/Desktop/archive/purple_martin.csv\", parse_dates=['timestamp']) #  날짜/시간 객체로 읽기\nprint(\"There are {} different birds in the dataset.\".format(birds_df[\"tag-local-identifier\"].nunique()))\n\nbirds_df.head()\nThere are 11 different birds in the dataset.\n\n\n\n\n\n\n\n\n\ntimestamp\n\n\nlocation-long\n\n\nlocation-lat\n\n\ntag-local-identifier\n\n\n\n\n\n\n0\n\n\n2014-08-15 05:56:00\n\n\n-88.146014\n\n\n17.513049\n\n\n30448\n\n\n\n\n1\n\n\n2014-09-01 05:59:00\n\n\n-85.243501\n\n\n13.095782\n\n\n30448\n\n\n\n\n2\n\n\n2014-10-30 23:58:00\n\n\n-62.906089\n\n\n-7.852436\n\n\n30448\n\n\n\n\n3\n\n\n2014-11-15 04:59:00\n\n\n-61.776826\n\n\n-11.723898\n\n\n30448\n\n\n\n\n4\n\n\n2014-11-30 09:59:00\n\n\n-61.241538\n\n\n-11.612237\n\n\n30448\n\n\n\n\n\n\n데이터 세트에는 11마리의 새가 있으며, 각 새는 “태그-로컬-식별자” 열에서 고유한 값으로 식별됩니다. 각각의 새들은 일년 중 다른 시기에 수집된 여러 개의 측정치를 가지고 있습니다.\n다음 코드 셀을 사용하여 GeoDataFrame 새를 만듭니다.\n- birds는 birds_df의 모든 열과 (경도, 위도) 위치를 가진 Point 객체를 포함하는 “기하학” 열을 가져야 합니다 - 새의 CRS를 {init}: ‘epsg:4326’}(으)로 설정합니다..\n# Your code here: Create the GeoDataFrame\ngeometry = [Point(xy) for xy in zip(birds_df[\"location-long\"], birds_df[\"location-lat\"])]\nbirds = gpd.GeoDataFrame(birds_df, crs=\"EPSG:4326\", geometry=geometry)\n\n# Your code here: Set the CRS to {'init': 'epsg:4326'}\nbirds.crs = {'init': 'epsg:4326'}\nC:\\Users\\seong taek\\anaconda3\\lib\\site-packages\\pyproj\\crs\\crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n  in_crs_string = _prepare_from_proj_string(in_crs_string)\nbirds.head()\n\n\n\n\n\n\n\n\n\ntimestamp\n\n\nlocation-long\n\n\nlocation-lat\n\n\ntag-local-identifier\n\n\ngeometry\n\n\n\n\n\n\n0\n\n\n2014-08-15 05:56:00\n\n\n-88.146014\n\n\n17.513049\n\n\n30448\n\n\nPOINT (-88.14601 17.51305)\n\n\n\n\n1\n\n\n2014-09-01 05:59:00\n\n\n-85.243501\n\n\n13.095782\n\n\n30448\n\n\nPOINT (-85.24350 13.09578)\n\n\n\n\n2\n\n\n2014-10-30 23:58:00\n\n\n-62.906089\n\n\n-7.852436\n\n\n30448\n\n\nPOINT (-62.90609 -7.85244)\n\n\n\n\n3\n\n\n2014-11-15 04:59:00\n\n\n-61.776826\n\n\n-11.723898\n\n\n30448\n\n\nPOINT (-61.77683 -11.72390)\n\n\n\n\n4\n\n\n2014-11-30 09:59:00\n\n\n-61.241538\n\n\n-11.612237\n\n\n30448\n\n\nPOINT (-61.24154 -11.61224)\n\n\n\n\n\n\n\n\n2.2 Plot the data.\n다음으로 GeoPandas의 ‘naturalearth_lowres’ 데이터 세트를 로드하고 미주(북남미 모두)의 모든 국가 경계를 포함하는 GeoDataFrame으로 미주를 설정합니다. 변경하지 않고 다음 코드 셀을 실행합니다.\n# Load a GeoDataFrame with country boundaries in North/South America, print the first 5 rows\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\namericas = world.loc[world['continent'].isin(['North America', 'South America'])]\namericas.head()\n\n\n\n\n\n\n\n\n\npop_est\n\n\ncontinent\n\n\nname\n\n\niso_a3\n\n\ngdp_md_est\n\n\ngeometry\n\n\n\n\n\n\n3\n\n\n37589262.0\n\n\nNorth America\n\n\nCanada\n\n\nCAN\n\n\n1736425\n\n\nMULTIPOLYGON (((-122.84000 49.00000, -122.9742…\n\n\n\n\n4\n\n\n328239523.0\n\n\nNorth America\n\n\nUnited States of America\n\n\nUSA\n\n\n21433226\n\n\nMULTIPOLYGON (((-122.84000 49.00000, -120.0000…\n\n\n\n\n9\n\n\n44938712.0\n\n\nSouth America\n\n\nArgentina\n\n\nARG\n\n\n445445\n\n\nMULTIPOLYGON (((-68.63401 -52.63637, -68.25000…\n\n\n\n\n10\n\n\n18952038.0\n\n\nSouth America\n\n\nChile\n\n\nCHL\n\n\n282318\n\n\nMULTIPOLYGON (((-68.63401 -52.63637, -68.63335…\n\n\n\n\n16\n\n\n11263077.0\n\n\nNorth America\n\n\nHaiti\n\n\nHTI\n\n\n14332\n\n\nPOLYGON ((-71.71236 19.71446, -71.62487 19.169…\n\n\n\n\n\n\n\n다음 코드 셀을 사용하여 (1) Americas GeoDataFrame의 국가 경계와 (2) birds_gdf GeoDataFrame의 모든 점을 모두 표시하는 단일 플롯을 만듭니다.\n여기서는 특별한 스타일에 대해 걱정하지 말고 모든 데이터가 올바르게 로드되었는지 신속하게 확인하기 위해 예비 플롯을 작성하면 됩니다. 특히 새를 구별하기 위해 포인트를 컬러 코딩하는 것에 대해 걱정할 필요가 없으며, 시작 포인트와 끝점을 구분할 필요가 없습니다. 우리는 연습의 다음 부분에서 그것을 할 것입니다.\n\n### Your code here\n\n# figure 객체와 axis 객체를 생성합니다.\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# americas GeoDataFrame의 경계를 표시합니다.\namericas.plot(ax=ax, color='white', edgecolor='black')\n\n# birds GeoDataFrame의 점을 표시합니다.\nbirds.plot(ax=ax, markersize=10, color='red')\n\n# 그래프를 출력합니다.\nplt.show()\n\n\n\npng\n\n\n\n\n2.3 Where does each bird start and end its journey? (Part 1)\n이제, 우리는 각각의 새들의 경로를 더 자세히 볼 준비가 되었습니다. 다음 코드 셀을 실행하여 두 개의 GeoDataFrames를 만듭니다: - path_gdf에는 각 새의 경로를 표시하는 LineString 개체가 포함되어 있습니다. - LineString() 메서드를 사용하여 점 객체 목록에서 LineString 객체를 만듭니다. - start_gdf는 각 새의 시작점을 포함합니다.\n# GeoDataFrame showing path for each bird\npath_df = birds.groupby(\"tag-local-identifier\")['geometry'].apply(list).apply(lambda x: LineString(x)).reset_index()\npath_gdf = gpd.GeoDataFrame(path_df, geometry=path_df.geometry)\npath_gdf.crs = {'init' :'epsg:4326'}\n\n# GeoDataFrame showing starting point for each bird\nstart_df = birds.groupby(\"tag-local-identifier\")['geometry'].apply(list).apply(lambda x: x[0]).reset_index()\nstart_gdf = gpd.GeoDataFrame(start_df, geometry=start_df.geometry)\nstart_gdf.crs = {'init' :'epsg:4326'}\n\n# Show first five rows of GeoDataFrame\nstart_gdf.head()\nC:\\Users\\seong taek\\anaconda3\\lib\\site-packages\\pyproj\\crs\\crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n  in_crs_string = _prepare_from_proj_string(in_crs_string)\nC:\\Users\\seong taek\\anaconda3\\lib\\site-packages\\pyproj\\crs\\crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n  in_crs_string = _prepare_from_proj_string(in_crs_string)\n\n\n\n\n\n\n\n\n\ntag-local-identifier\n\n\ngeometry\n\n\n\n\n\n\n0\n\n\n30048\n\n\nPOINT (-90.12992 20.73242)\n\n\n\n\n1\n\n\n30054\n\n\nPOINT (-93.60861 46.50563)\n\n\n\n\n2\n\n\n30198\n\n\nPOINT (-80.31036 25.92545)\n\n\n\n\n3\n\n\n30263\n\n\nPOINT (-76.78146 42.99209)\n\n\n\n\n4\n\n\n30275\n\n\nPOINT (-76.78213 42.99207)\n\n\n\n\n\n\n다음 코드 셀을 사용하여 각 새의 최종 위치를 포함하는 GeoDataFrame end_gdf를 만듭니다.\n- 형식은 start_gdf의 형식과 동일해야 하며 두 개의 열(“태그-로컬 식별자”) 및 (“기하학”)열에 점 객체가 포함되어 있어야 합니다. - end_gdf의 CRS를 {init}: ‘epsg:4326’}(으)로 설정합니다.\n# Your code here\nend_df = birds.groupby(\"tag-local-identifier\")['geometry'].apply(list).apply(lambda x: x[-1]).reset_index()\nend_gdf = gpd.GeoDataFrame(end_df, geometry=end_df.geometry)\nend_gdf.columns = ['tag-local-identifier', 'geometry']\n\nend_gdf\n\n\n\n\n\n\n\n\n\ntag-local-identifier\n\n\ngeometry\n\n\n\n\n\n\n0\n\n\n30048\n\n\nPOINT (-47.53632 -4.43758)\n\n\n\n\n1\n\n\n30054\n\n\nPOINT (-62.47914 -5.03840)\n\n\n\n\n2\n\n\n30198\n\n\nPOINT (-57.46417 -2.77617)\n\n\n\n\n3\n\n\n30263\n\n\nPOINT (-50.19230 -5.70504)\n\n\n\n\n4\n\n\n30275\n\n\nPOINT (-57.70404 -16.72336)\n\n\n\n\n5\n\n\n30300\n\n\nPOINT (-50.22547 -9.84450)\n\n\n\n\n6\n\n\n30304\n\n\nPOINT (-52.55503 -5.85648)\n\n\n\n\n7\n\n\n30380\n\n\nPOINT (-63.98744 -2.93250)\n\n\n\n\n8\n\n\n30384\n\n\nPOINT (-51.85126 -2.90570)\n\n\n\n\n9\n\n\n30445\n\n\nPOINT (-53.97454 -2.35599)\n\n\n\n\n10\n\n\n30448\n\n\nPOINT (-59.50059 -3.91805)\n\n\n\n\n\n\n\n\n2.4 Where does each bird start and end its journey? (Part 2)\n위 질문(path_gdf, start_gdf 및 end_gdf)의 GeoDataFrames를 사용하여 모든 새의 경로를 단일 맵에 시각화합니다. 또한 미주 지역 데이터 프레임을 사용할 수도 있습니다.\n### Your code here\n\n# americas GeoDataFrame을 사용하여 미주 지역 지도를 만듭니다\nax = americas.plot(figsize=(12,8), color='white', edgecolor='black')\n\n# path_gdf, start_gdf, end_gdf GeoDataFrame을 사용하여 모든 새의 이동 경로, 출발점 및 도착점을 지도에 추가합니다\npath_gdf.plot(ax=ax, color='red', linewidth=0.5)\nstart_gdf.plot(ax=ax, color='blue', markersize=10)\nend_gdf.plot(ax=ax, color='green', markersize=10)\n\n# 제목, 범례 추가\nax.set_title(\"Migration of Purple Martins in Americas\")\nax.legend(['Bird Path', 'Starting Point', 'Ending Point'])\n\n# 출력\nplt.show()\n\n\n\npng\n\n\n\n\n2.5 Where are the protected areas in South America? (Part 1)\n\n모든 새들이 결국 남아메리카 어딘가에 도착하는 것처럼 보입니다. 하지만 그들은 보호구역으로 갈 것입니까?\n다음 코드 셀에서는 남미의 모든 보호 영역의 위치를 포함하는 GeoDataFrame protected_areas를 만듭니다. 해당 셰이프 파일은 filepath protected_filepath에 있습니다\n\n# Path of the shapefile to load\nprotected_filepath = \"C:/Users\\seong taek/Desktop/archive/SAPA_Aug2019-shapefile/SAPA_Aug2019-shapefile/SAPA_Aug2019-shapefile-polygons.shp\"\n\n# Your code here\nprotected_areas = gpd.read_file(protected_filepath)\nprotected_areas.head()\n\n\n\n\n\n\n\n\n\nWDPAID\n\n\nWDPA_PID\n\n\nPA_DEF\n\n\nNAME\n\n\nORIG_NAME\n\n\nDESIG\n\n\nDESIG_ENG\n\n\nDESIG_TYPE\n\n\nIUCN_CAT\n\n\nINT_CRIT\n\n\n…\n\n\nGOV_TYPE\n\n\nOWN_TYPE\n\n\nMANG_AUTH\n\n\nMANG_PLAN\n\n\nVERIF\n\n\nMETADATAID\n\n\nSUB_LOC\n\n\nPARENT_ISO\n\n\nISO3\n\n\ngeometry\n\n\n\n\n\n\n0\n\n\n14067.0\n\n\n14067\n\n\n1\n\n\nHet Spaans Lagoen\n\n\nHet Spaans Lagoen\n\n\nRamsar Site, Wetland of International Importance\n\n\nRamsar Site, Wetland of International Importance\n\n\nInternational\n\n\nNot Reported\n\n\nNot Reported\n\n\n…\n\n\nNot Reported\n\n\nNot Reported\n\n\nNot Reported\n\n\nManagement plan is not implemented and not ava…\n\n\nState Verified\n\n\n1856\n\n\nNot Reported\n\n\nNLD\n\n\nABW\n\n\nPOLYGON ((-69.97523 12.47379, -69.97523 12.473…\n\n\n\n\n1\n\n\n14003.0\n\n\n14003\n\n\n1\n\n\nBubali Pond Bird Sanctuary\n\n\nBubali Pond Bird Sanctuary\n\n\nBird Sanctuary\n\n\nBird Sanctuary\n\n\nNational\n\n\nNot Reported\n\n\nNot Applicable\n\n\n…\n\n\nNot Reported\n\n\nNot Reported\n\n\nNot Reported\n\n\nNot Reported\n\n\nState Verified\n\n\n1899\n\n\nNot Reported\n\n\nNLD\n\n\nABW\n\n\nPOLYGON ((-70.04734 12.56329, -70.04615 12.563…\n\n\n\n\n2\n\n\n555624439.0\n\n\n555624439\n\n\n1\n\n\nArikok National Park\n\n\nArikok National Park\n\n\nNational Park\n\n\nNational Park\n\n\nNational\n\n\nNot Reported\n\n\nNot Applicable\n\n\n…\n\n\nNon-profit organisations\n\n\nNon-profit organisations\n\n\nFundacion Parke Nacional Arikok\n\n\nNot Reported\n\n\nState Verified\n\n\n1899\n\n\nNot Reported\n\n\nNLD\n\n\nABW\n\n\nMULTIPOLYGON (((-69.96302 12.48384, -69.96295 …\n\n\n\n\n3\n\n\n303894.0\n\n\n303894\n\n\n1\n\n\nMadidi\n\n\nMadidi\n\n\nArea Natural de Manejo Integrado\n\n\nNatural Integrated Management Area\n\n\nNational\n\n\nNot Reported\n\n\nNot Applicable\n\n\n…\n\n\nFederal or national ministry or agency\n\n\nNot Reported\n\n\nNot Reported\n\n\nNot Reported\n\n\nState Verified\n\n\n1860\n\n\nBO-L\n\n\nBOL\n\n\nBOL\n\n\nPOLYGON ((-68.59060 -14.43388, -68.59062 -14.4…\n\n\n\n\n4\n\n\n303893.0\n\n\n303893\n\n\n1\n\n\nApolobamba\n\n\nApolobamba\n\n\nArea Natural de Manejo Integado Nacional\n\n\nNational Natural Integrated Management Area\n\n\nNational\n\n\nNot Reported\n\n\nNot Applicable\n\n\n…\n\n\nFederal or national ministry or agency\n\n\nNot Reported\n\n\nNot Reported\n\n\nNot Reported\n\n\nState Verified\n\n\n1860\n\n\nBO-L\n\n\nBOL\n\n\nBOL\n\n\nPOLYGON ((-69.20949 -14.73334, -69.20130 -14.7…\n\n\n\n\n\n\n5 rows × 29 columns\n\n\n\n\n2.6 Where are the protected areas in South America? (Part 2)\nprotected_areas GeoDataFrame을 사용하여 남미의 보호지역 위치를 표시하는 플롯을 만듭니다. (일부 보호지역은 육지에, 다른 보호지역은 해양에 있음을 알 수 있습니다.)\n# Country boundaries in South America\nsouth_america = americas.loc[americas['continent']=='South America']\n\n### Your code here: plot protected areas in South America\n\n# 보호지역 데이터를 지도에 그리기\nax = south_america.plot(color='white', edgecolor='black')\nprotected_areas.plot(ax=ax, alpha=0.5, color='green')\n\n# 플롯 출력하기\nplt.show()\n\n\n\npng\n\n\n\n\n2.7 What percentage of South America is protected?\n\n여러분은 남아메리카의 몇 퍼센트가 보호되고 있는지를 결정하는 데 관심이 있습니다. 그래서 여러분은 남아메리카의 어느 정도가 새들에게 적합한지를 알 수 있습니다\n첫 번째 단계로 남아메리카의 모든 보호 지역(해양 지역 제외)의 총 면적을 계산합니다. 이렇게 하려면 “REP_AREA” 및 “REP_M_AREA” 열을 사용합니다. 여기에는 각각 총 면적과 총 해양 면적이 평방 킬로미터로 포함됩니다.\n아래 코드 셀을 변경하지 않고 실행합니다.\n\nP_Area = sum(protected_areas['REP_AREA']-protected_areas['REP_M_AREA'])\nprint(\"South America has {} square kilometers of protected areas.\".format(P_Area))\nSouth America has 5396761.9116883585 square kilometers of protected areas.\n그런 다음 계산을 마치려면 south_america GeoDataFrame을 사용합니다.\nsouth_america.head()\n\n\n\n\n\n\n\n\n\npop_est\n\n\ncontinent\n\n\nname\n\n\niso_a3\n\n\ngdp_md_est\n\n\ngeometry\n\n\n\n\n\n\n9\n\n\n44938712.0\n\n\nSouth America\n\n\nArgentina\n\n\nARG\n\n\n445445\n\n\nMULTIPOLYGON (((-68.63401 -52.63637, -68.25000…\n\n\n\n\n10\n\n\n18952038.0\n\n\nSouth America\n\n\nChile\n\n\nCHL\n\n\n282318\n\n\nMULTIPOLYGON (((-68.63401 -52.63637, -68.63335…\n\n\n\n\n20\n\n\n3398.0\n\n\nSouth America\n\n\nFalkland Is.\n\n\nFLK\n\n\n282\n\n\nPOLYGON ((-61.20000 -51.85000, -60.00000 -51.2…\n\n\n\n\n28\n\n\n3461734.0\n\n\nSouth America\n\n\nUruguay\n\n\nURY\n\n\n56045\n\n\nPOLYGON ((-57.62513 -30.21629, -56.97603 -30.1…\n\n\n\n\n29\n\n\n211049527.0\n\n\nSouth America\n\n\nBrazil\n\n\nBRA\n\n\n1839758\n\n\nPOLYGON ((-53.37366 -33.76838, -53.65054 -33.2…\n\n\n\n\n\n\n다음 단계를 수행하여 남미의 총 면적을 계산합니다: - 각 폴리곤의 면적 속성(CRS로 EPSG 3035 사용)을 사용하여 각 국가의 면적을 계산하고 결과를 합산합니다. 계산된 면적은 제곱미터 단위가 될 것입니다. - 제곱킬로미터의 단위를 갖도록 답변을 변환합니다\n### Your code here: Calculate the total area of South America (in square kilometers)\n\n# CRS를 EPSG 3035로 설정합니다.\nsouth_america = south_america.to_crs(epsg=3035)\n\n# 남미의 면적을 계산합니다.\nsouth_america_area = south_america.area/10**6  # 제곱미터에서 제곱킬로미터로 변환\n\n# 결과를 합산합니다.\ntotal_area = south_america_area.sum()\n\nprint(\"남미의 총 면적은 {:.2f} 제곱킬로미터입니다.\".format(total_area))\n남미의 총 면적은 17759005.82 제곱킬로미터입니다.\n아래 코드 셀을 실행하여 보호되는 남미의 백분율을 계산합니다.\n# What percentage of South America is protected?\npercentage_protected = P_Area/total_area\nprint('Approximately {}% of South America is protected.'.format(round(percentage_protected*100, 2)))\nApproximately 30.39% of South America is protected.\n\n\n2.8 Where are the birds in South America?\n그렇다면, 그 새들은 보호 구역에 있을까요?\n모든 새들과 남아메리카에서 발견된 모든 위치를 보여주는 플롯을 만듭니다. 또한 남미의 모든 보호 지역의 위치를 표시합니다\n순수하게 해양 영역(육지 구성 요소가 없음)인 보호 영역을 제외하려면 “MARINE” 열을 사용하면 됩니다 - To exclude protected areas that are purely marine areas (with no land component), you can use the “MARINE” column (and plot only the rows in protected_areas[protected_areas[‘MARINE’]!=‘2’], instead of every row in the protected_areas GeoDataFrame).\n### Your code here\n\n# 플롯 만들기\nfig, ax = plt.subplots(figsize=(12,8))\n\n# 보호구역 (protected_areas[protected_areas['MARINE']!='2'])\nprotected_areas[protected_areas['MARINE']!='2'].plot(ax=ax, color='green', alpha=0.2)\n\n# 새 위치\nbirds.plot(ax=ax, markersize=10, color='blue', alpha=0.5)\n\n# 제목\nax.set_title(\"Bird locations and protected areas in South America\")\nax.set_xlabel(\"Longitude\")\nax.set_ylabel(\"Latitude\")\n\n# 그래프 출력\nplt.show()\n\n\n\npng"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise2/exercise2-coordinate-reference-systems.html#keep-going",
    "href": "posts_work/Data_Mining_exercise2/exercise2-coordinate-reference-systems.html#keep-going",
    "title": "Data_Mining_Kaggle",
    "section": "3 Keep going",
    "text": "3 Keep going\nCreate stunning interactive maps with your geospatial data.\n\nHave questions or comments? Visit the course discussion forum to chat with other learners."
  },
  {
    "objectID": "posts_work/Data_Mining_exercise4/exercise4-manipulating-geospatial-data.html",
    "href": "posts_work/Data_Mining_exercise4/exercise4-manipulating-geospatial-data.html",
    "title": "Data_Mining_Kaggle",
    "section": "",
    "text": "Exercise 4 - Manipulating Geospatial Data\nThis notebook is an exercise in the Geospatial Analysis course. You can reference the tutorial at this link."
  },
  {
    "objectID": "posts_work/Data_Mining_exercise4/exercise4-manipulating-geospatial-data.html#introduction",
    "href": "posts_work/Data_Mining_exercise4/exercise4-manipulating-geospatial-data.html#introduction",
    "title": "Data_Mining_Kaggle",
    "section": "1 Introduction",
    "text": "1 Introduction\nYou are a Starbucks big data analyst (that’s a real job!) looking to find the next store into a Starbucks Reserve Roastery. These roasteries are much larger than a typical Starbucks store and have several additional features, including various food and wine options, along with upscale lounge areas. You’ll investigate the demographics of various counties in the state of California, to determine potentially suitable locations.\n\n\n\nBefore you get started, run the code cell below to set everything up.\n\n당신은 스타벅스의 빅데이터 분석가입니다. (그것은 진정한 직업입니다!) 스타벅스 리저브 로스터리에서 다음 매장을 찾고 있습니다. 이 로스터리는 일반적인 스타벅스 매장보다 훨씬 크고 고급 라운지 공간과 함께 다양한 음식과 와인 옵션을 포함한 몇 가지 추가 기능을 갖추고 있습니다. 캘리포니아 주의 다양한 카운티의 인구 통계를 조사하여 잠재적으로 적합한 위치를 결정합니다.\n시작하기 전에 아래의 코드 셀을 실행하여 모든 설정을 수행합니다\n\n#!pip install geopy\nimport math\nimport pandas as pd\nimport geopandas as gpd\nfrom geopy.geocoders import Nominatim\nimport folium \nfrom folium import Marker\nfrom folium.plugins import MarkerCluster\n이전 연습의 embed_map() 함수를 사용하여 지도를 시각화합니다.\ndef embed_map(m, file_name):\n    from IPython.display import IFrame\n    m.save(file_name)\n    return IFrame(file_name, width='100%', height='500px')"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise4/exercise4-manipulating-geospatial-data.html#exercises",
    "href": "posts_work/Data_Mining_exercise4/exercise4-manipulating-geospatial-data.html#exercises",
    "title": "Data_Mining_Kaggle",
    "section": "2 Exercises",
    "text": "2 Exercises\n\n2.1 누락된 위치를 지오코드합니다\n다음 코드 셀을 실행하여 캘리포니아 주에 있는 스타벅스 위치가 포함된 데이터 프레임 스타벅스를 만듭니다.\n# Load and preview Starbucks locations in California\nstarbucks = pd.read_csv(\"C:/Users\\seong taek/Desktop/archive/starbucks_locations.csv\")\nstarbucks.head()\n\n\n\n\n\n\n\n\n\nStore Number\n\n\nStore Name\n\n\nAddress\n\n\nCity\n\n\nLongitude\n\n\nLatitude\n\n\n\n\n\n\n0\n\n\n10429-100710\n\n\nPalmdale & Hwy 395\n\n\n14136 US Hwy 395 Adelanto CA\n\n\nAdelanto\n\n\n-117.40\n\n\n34.51\n\n\n\n\n1\n\n\n635-352\n\n\nKanan & Thousand Oaks\n\n\n5827 Kanan Road Agoura CA\n\n\nAgoura\n\n\n-118.76\n\n\n34.16\n\n\n\n\n2\n\n\n74510-27669\n\n\nVons-Agoura Hills #2001\n\n\n5671 Kanan Rd. Agoura Hills CA\n\n\nAgoura Hills\n\n\n-118.76\n\n\n34.15\n\n\n\n\n3\n\n\n29839-255026\n\n\nTarget Anaheim T-0677\n\n\n8148 E SANTA ANA CANYON ROAD AHAHEIM CA\n\n\nAHAHEIM\n\n\n-117.75\n\n\n33.87\n\n\n\n\n4\n\n\n23463-230284\n\n\nSafeway - Alameda 3281\n\n\n2600 5th Street Alameda CA\n\n\nAlameda\n\n\n-122.28\n\n\n37.79\n\n\n\n\n\n\n대부분의 상점은 알려진 위치(위도, 경도)를 가지고 있습니다. 하지만, 버클리 시의 모든 장소가 사라졌습니다\n# How many rows in each column have missing values?\nprint(starbucks.isnull().sum())\n\n# View rows with missing locations\nrows_with_missing = starbucks[starbucks[\"City\"]==\"Berkeley\"]\nrows_with_missing\nStore Number    0\nStore Name      0\nAddress         0\nCity            0\nLongitude       5\nLatitude        5\ndtype: int64\n\n\n\n\n\n\n\n\n\nStore Number\n\n\nStore Name\n\n\nAddress\n\n\nCity\n\n\nLongitude\n\n\nLatitude\n\n\n\n\n\n\n153\n\n\n5406-945\n\n\n2224 Shattuck - Berkeley\n\n\n2224 Shattuck Avenue Berkeley CA\n\n\nBerkeley\n\n\nNaN\n\n\nNaN\n\n\n\n\n154\n\n\n570-512\n\n\nSolano Ave\n\n\n1799 Solano Avenue Berkeley CA\n\n\nBerkeley\n\n\nNaN\n\n\nNaN\n\n\n\n\n155\n\n\n17877-164526\n\n\nSafeway - Berkeley #691\n\n\n1444 Shattuck Place Berkeley CA\n\n\nBerkeley\n\n\nNaN\n\n\nNaN\n\n\n\n\n156\n\n\n19864-202264\n\n\nTelegraph & Ashby\n\n\n3001 Telegraph Avenue Berkeley CA\n\n\nBerkeley\n\n\nNaN\n\n\nNaN\n\n\n\n\n157\n\n\n9217-9253\n\n\n2128 Oxford St.\n\n\n2128 Oxford Street Berkeley CA\n\n\nBerkeley\n\n\nNaN\n\n\nNaN\n\n\n\n\n\n\n아래 코드 셀을 사용하여 이러한 값을 Nominatim 지오코더로 채웁니다.\n튜토리얼에서 Nominatim()(geopy.geocoders에서)을 사용하여 값을 지오코딩했으며, 이는 본 과정 이외의 프로젝트에서 사용할 수 있는 것입니다.\n이 연습에서는 (learn tools.geospatic에서) 약간 다른 함수 Nominatim()을 사용합니다.도구). 이 기능은 노트북 상단에 가져온 것으로 GeoPandas의 기능과 동일하게 작동합니다.\n즉, 다음과 같은 경우에 한합니다:\n노트북 상단에 있는 가져오기 문을 변경하지 않습니다 당신은 아래의 코드 셀에서 지오코딩 함수를 지오코딩이라고 부릅니다, 코드가 의도한 대로 작동합니다!\n# Create the geocoder\ngeolocator = Nominatim(user_agent=\"kaggle_learn\")\n\n# Your code here\ndef my_geocoder(row):\n    point = geolocator.geocode(row).point\n    return pd.Series({'Latitude': point.latitude, 'Longitude': point.longitude})\n\nberkeley_locations = rows_with_missing.apply(lambda x: my_geocoder(x['Address']), axis=1)\nstarbucks.update(berkeley_locations)\n\nstarbucks\n\n\n\n\n\n\n\n\n\nStore Number\n\n\nStore Name\n\n\nAddress\n\n\nCity\n\n\nLongitude\n\n\nLatitude\n\n\n\n\n\n\n0\n\n\n10429-100710\n\n\nPalmdale & Hwy 395\n\n\n14136 US Hwy 395 Adelanto CA\n\n\nAdelanto\n\n\n-117.40\n\n\n34.51\n\n\n\n\n1\n\n\n635-352\n\n\nKanan & Thousand Oaks\n\n\n5827 Kanan Road Agoura CA\n\n\nAgoura\n\n\n-118.76\n\n\n34.16\n\n\n\n\n2\n\n\n74510-27669\n\n\nVons-Agoura Hills #2001\n\n\n5671 Kanan Rd. Agoura Hills CA\n\n\nAgoura Hills\n\n\n-118.76\n\n\n34.15\n\n\n\n\n3\n\n\n29839-255026\n\n\nTarget Anaheim T-0677\n\n\n8148 E SANTA ANA CANYON ROAD AHAHEIM CA\n\n\nAHAHEIM\n\n\n-117.75\n\n\n33.87\n\n\n\n\n4\n\n\n23463-230284\n\n\nSafeway - Alameda 3281\n\n\n2600 5th Street Alameda CA\n\n\nAlameda\n\n\n-122.28\n\n\n37.79\n\n\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n…\n\n\n\n\n2816\n\n\n14071-108147\n\n\nHwy 20 & Tharp - Yuba City\n\n\n1615 Colusa Hwy, Ste 100 Yuba City CA\n\n\nYuba City\n\n\n-121.64\n\n\n39.14\n\n\n\n\n2817\n\n\n9974-98559\n\n\nYucaipa & Hampton, Yucaipa\n\n\n31364 Yucaipa Blvd., A Yucaipa CA\n\n\nYucaipa\n\n\n-117.12\n\n\n34.03\n\n\n\n\n2818\n\n\n79654-108478\n\n\nVons - Yucaipa #1796\n\n\n33644 YUCAIPA BLVD YUCAIPA CA\n\n\nYUCAIPA\n\n\n-117.07\n\n\n34.04\n\n\n\n\n2819\n\n\n6438-245084\n\n\nYucaipa & 6th\n\n\n34050 Yucaipa Blvd., 200 Yucaipa CA\n\n\nYucaipa\n\n\n-117.06\n\n\n34.03\n\n\n\n\n2820\n\n\n6829-82142\n\n\nHighway 62 & Warren Vista\n\n\n57744 29 Palms Highway Yucca Valley CA\n\n\nYucca Valley\n\n\n-116.40\n\n\n34.13\n\n\n\n\n\n\n2821 rows × 6 columns\n\n\n\n\n2.2 2) Berkeley 위치를 봅니다.\n방금 찾은 위치를 살펴보겠습니다. OpenStreetMap 스타일로 Berkeley의 (위도, 경도) 위치를 시각화합니다.\n# Create a base map\nm_2 = folium.Map(location=[37.88,-122.26], zoom_start=13)\n\n# Your code here: Add a marker for each Berkeley location\nfor idx, row in starbucks[starbucks[\"City\"]=='Berkeley'].iterrows():\n    Marker([row['Latitude'], row['Longitude']]).add_to(m_2)\n\n# Show the map\nembed_map(m_2, 'q_2.html')\nm_2\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\nConsidering only the five locations in Berkeley, how many of the (latitude, longitude) locations seem potentially correct (are located in the correct city)?\n\n\n2.3 3) 데이터를 통합합니다.\n아래 코드를 실행하여 캘리포니아 주의 각 카운티에 대한 이름, 면적(제곱킬로미터) 및 고유 ID(“GEOID” 열)가 포함된 GeoDataFrame “CA_counties”를 로드합니다. 지오메트리 열에는 카운티 경계가 있는 폴리곤이 포함되어 있습니다.\nCA_counties = gpd.read_file(\"C:/Users\\seong taek/Desktop/archive/CA_county_boundaries/CA_county_boundaries/CA_county_boundaries.shp\")\nCA_counties.crs = {'init': 'epsg:4326'}\nCA_counties.head()\nC:\\Users\\seong taek\\anaconda3\\lib\\site-packages\\pyproj\\crs\\crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n  in_crs_string = _prepare_from_proj_string(in_crs_string)\n\n\n\n\n\n\n\n\n\nGEOID\n\n\nname\n\n\narea_sqkm\n\n\ngeometry\n\n\n\n\n\n\n0\n\n\n6091\n\n\nSierra County\n\n\n2491.995494\n\n\nPOLYGON ((-120.65560 39.69357, -120.65554 39.6…\n\n\n\n\n1\n\n\n6067\n\n\nSacramento County\n\n\n2575.258262\n\n\nPOLYGON ((-121.18858 38.71431, -121.18732 38.7…\n\n\n\n\n2\n\n\n6083\n\n\nSanta Barbara County\n\n\n9813.817958\n\n\nMULTIPOLYGON (((-120.58191 34.09856, -120.5822…\n\n\n\n\n3\n\n\n6009\n\n\nCalaveras County\n\n\n2685.626726\n\n\nPOLYGON ((-120.63095 38.34111, -120.63058 38.3…\n\n\n\n\n4\n\n\n6111\n\n\nVentura County\n\n\n5719.321379\n\n\nMULTIPOLYGON (((-119.63631 33.27304, -119.6360…\n\n\n\n\n\n\n다음으로 세 가지 데이터 프레임을 만듭니다:\n\nCA_pop에는 각 카운티의 인구 추정치가 포함되어 있습니다.\nCA_high_earner에는 연간 $150,000 이상의 소득을 가진 가구 수가 포함되어 있습니다.\nCA_median_age에는 각 카운티의 중위수 연령이 포함됩니다.\n\nCA_pop = pd.read_csv(\"C:/Users\\seong taek/Desktop/archive/CA_county_population.csv\", index_col=\"GEOID\")\nCA_high_earners = pd.read_csv(\"C:/Users\\seong taek/Desktop/archive/CA_county_high_earners.csv\", index_col=\"GEOID\")\nCA_median_age = pd.read_csv(\"C:/Users\\seong taek/Desktop/archive/CA_county_median_age.csv\", index_col=\"GEOID\")\n다음 코드 셀을 사용하여 CA_pop, CA_high_earners 및 CA_median_age와 함께 CA_counties GeoDataFrame에 join 합니다.\n결과 GeoDataFrame CA_stats의 이름을 지정하고 “GEOID”, “name”, “area_sqkm”, “geometry”, “population”, “high_earners” 및 “median_age”의 8개 열이 있는지 확인합니다.\n# Your code here\ncols_to_add = CA_pop.join([CA_high_earners, CA_median_age]).reset_index()\nCA_stats = CA_counties.merge(cols_to_add, on=\"GEOID\")\n\nCA_stats.head()\n\n\n\n\n\n\n\n\n\nGEOID\n\n\nname\n\n\narea_sqkm\n\n\ngeometry\n\n\npopulation\n\n\nhigh_earners\n\n\nmedian_age\n\n\n\n\n\n\n0\n\n\n6091\n\n\nSierra County\n\n\n2491.995494\n\n\nPOLYGON ((-120.65560 39.69357, -120.65554 39.6…\n\n\n2987\n\n\n111\n\n\n55.0\n\n\n\n\n1\n\n\n6067\n\n\nSacramento County\n\n\n2575.258262\n\n\nPOLYGON ((-121.18858 38.71431, -121.18732 38.7…\n\n\n1540975\n\n\n65768\n\n\n35.9\n\n\n\n\n2\n\n\n6083\n\n\nSanta Barbara County\n\n\n9813.817958\n\n\nMULTIPOLYGON (((-120.58191 34.09856, -120.5822…\n\n\n446527\n\n\n25231\n\n\n33.7\n\n\n\n\n3\n\n\n6009\n\n\nCalaveras County\n\n\n2685.626726\n\n\nPOLYGON ((-120.63095 38.34111, -120.63058 38.3…\n\n\n45602\n\n\n2046\n\n\n51.6\n\n\n\n\n4\n\n\n6111\n\n\nVentura County\n\n\n5719.321379\n\n\nMULTIPOLYGON (((-119.63631 33.27304, -119.6360…\n\n\n850967\n\n\n57121\n\n\n37.5\n\n\n\n\n\n\n이제 모든 데이터가 한 곳에 있으므로 열 조합을 사용하는 통계량을 계산하는 것이 훨씬 쉬워졌습니다. 다음 코드 셀을 실행하여 모집단 밀도가 있는 “밀도” 열을 만듭니다.\nCA_stats[\"density\"] = CA_stats[\"population\"] / CA_stats[\"area_sqkm\"]\n\n\n2.4 4) 어느 카운티가 유망해 보이나요?\n모든 정보를 단일 GeoDataFrame으로 통합하면 특정 기준을 충족하는 카운티를 훨씬 쉽게 선택할 수 있습니다.\n다음 코드 셀을 사용하여 CA_stats GeoDataFrame에서 행의 하위 집합(및 모든 열)을 포함하는 GeoDataFramesel_counties를 만듭니다. 특히 다음과 같은 국가를 선택해야 합니다:\n\n매년 15만 달러를 버는 최소 10만 가구가 있습니다,\n중위연령은 38.5세 미만이고\n거주자의 밀도는 최소 285(제곱킬로미터당)입니다.\n\n또한 선택된 카운티는 다음 기준 중 하나 이상을 충족해야 합니다:\n\n매년 15만 달러를 버는 최소 50만 가구가 있습니다,\n중위연령이 35.5세 미만인 경우\n거주자의 밀도는 적어도 1400(평방킬로미터당)입니다.\n\n# Your code here\n# Your code here\nsel_counties = CA_stats[((CA_stats.high_earners > 100000) &\n                         (CA_stats.median_age < 38.5) &\n                         (CA_stats.density > 285) &\n                         ((CA_stats.median_age < 35.5) |\n                         (CA_stats.density > 1400) |\n                         (CA_stats.high_earners > 500000)))]\n\nsel_counties.head()\n\n\n\n\n\n\n\n\n\nGEOID\n\n\nname\n\n\narea_sqkm\n\n\ngeometry\n\n\npopulation\n\n\nhigh_earners\n\n\nmedian_age\n\n\ndensity\n\n\n\n\n\n\n5\n\n\n6037\n\n\nLos Angeles County\n\n\n12305.376879\n\n\nMULTIPOLYGON (((-118.66761 33.47749, -118.6682…\n\n\n10105518\n\n\n501413\n\n\n36.0\n\n\n821.227834\n\n\n\n\n8\n\n\n6073\n\n\nSan Diego County\n\n\n11721.342229\n\n\nPOLYGON ((-117.43744 33.17953, -117.44955 33.1…\n\n\n3343364\n\n\n194676\n\n\n35.4\n\n\n285.237299\n\n\n\n\n10\n\n\n6075\n\n\nSan Francisco County\n\n\n600.588247\n\n\nMULTIPOLYGON (((-122.60025 37.80249, -122.6123…\n\n\n883305\n\n\n114989\n\n\n38.3\n\n\n1470.733077\n\n\n\n\n\n\n\n\n2.5 5) 당신은 몇 개의 상점을 확인했습니까?\n다음 스타벅스 리저브 로스터리 위치를 찾을 때는 선택한 카운티 내의 모든 매장을 고려해야 합니다. 그렇다면, 선택된 카운티 내에 몇 개의 상점이 있을까요?\n이 질문에 대한 답변을 준비하려면 다음 코드 셀을 실행하여 모든 스타벅스 위치와 함께 GeoDataFrame stabs_gdf를 만듭니다.\nstarbucks_gdf = gpd.GeoDataFrame(starbucks, geometry=gpd.points_from_xy(starbucks.Longitude, starbucks.Latitude))\nstarbucks_gdf.crs = {'init': 'epsg:4326'}\nC:\\Users\\seong taek\\anaconda3\\lib\\site-packages\\pyproj\\crs\\crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n  in_crs_string = _prepare_from_proj_string(in_crs_string)\n그렇다면, 당신이 선택한 county에는 몇 개의 가게가 있나요?\n# Fill in your answer\nlocations_of_interest = gpd.sjoin(starbucks_gdf, sel_counties)\nnum_stores = len(locations_of_interest)\nnum_stores\n1043\n\n\n2.6 6) 저장소 위치를 시각화합니다.\n이전 질문에서 식별한 상점의 위치를 보여주는 맵을 만듭니다.\n# Create a base map\nm_6 = folium.Map(location=[37,-120], zoom_start=6)\n\n# Your code here: show selected store locations\nmc = MarkerCluster()\n\nlocations_of_interest = gpd.sjoin(starbucks_gdf, sel_counties)\nfor idx, row in locations_of_interest.iterrows():\n    if not math.isnan(row['Longitude']) and not math.isnan(row['Latitude']):\n        mc.add_child(folium.Marker([row['Latitude'], row['Longitude']]))\nm_6.add_child(mc)\n\n# Show the map\nembed_map(m_6, 'q_6.html')\nm_6\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise4/exercise4-manipulating-geospatial-data.html#keep-going",
    "href": "posts_work/Data_Mining_exercise4/exercise4-manipulating-geospatial-data.html#keep-going",
    "title": "Data_Mining_Kaggle",
    "section": "3 Keep going",
    "text": "3 Keep going\nLearn about how proximity analysis can help you to understand the relationships between points on a map.\n\nHave questions or comments? Visit the course discussion forum to chat with other learners."
  },
  {
    "objectID": "posts_work/Data_Mining_exercise5/exercise5-proximity-analysis.html",
    "href": "posts_work/Data_Mining_exercise5/exercise5-proximity-analysis.html",
    "title": "Data_Mining_Kaggle",
    "section": "",
    "text": "Exercise 5 - Proximity Analysis\nThis notebook is an exercise in the Geospatial Analysis course. You can reference the tutorial at this link."
  },
  {
    "objectID": "posts_work/Data_Mining_exercise5/exercise5-proximity-analysis.html#introduction",
    "href": "posts_work/Data_Mining_exercise5/exercise5-proximity-analysis.html#introduction",
    "title": "Data_Mining_Kaggle",
    "section": "1 Introduction",
    "text": "1 Introduction\nYou are part of a crisis response team, and you want to identify how hospitals have been responding to crash collisions in New York City.\n\n\n\nBefore you get started, run the code cell below to set everything up.\n여러분은 위기 대응 팀의 일원이며, 뉴욕시에서 발생한 충돌 사고에 대해 병원이 어떻게 대응해 왔는지를 파악하려고 합니다. 시작하기 전에 아래의 코드 셀을 실행하여 모든 설정을 수행합니다.\nimport math\nimport geopandas as gpd\nimport pandas as pd\nfrom shapely.geometry import MultiPolygon\n\nimport folium\nfrom folium import Choropleth, Marker\nfrom folium.plugins import HeatMap, MarkerCluster\nembed_map() 함수를 사용하여 지도를 시각화합니다.\ndef embed_map(m, file_name):\n    from IPython.display import IFrame\n    m.save(file_name)\n    return IFrame(file_name, width='100%', height='500px')"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise5/exercise5-proximity-analysis.html#exercises",
    "href": "posts_work/Data_Mining_exercise5/exercise5-proximity-analysis.html#exercises",
    "title": "Data_Mining_Kaggle",
    "section": "2 Exercises",
    "text": "2 Exercises\n\n2.1 1) 충돌 데이터를 시각화합니다.\n아래 코드 셀을 실행하여 2013-2018년 주요 자동차 충돌을 추적하는 GeoDataFrame 충돌을 로드합니다.\ncollisions = gpd.read_file(\"C:/Users\\seong taek/Desktop/archive/NYPD_Motor_Vehicle_Collisions/NYPD_Motor_Vehicle_Collisions/NYPD_Motor_Vehicle_Collisions.shp\")\ncollisions.head()\n\n\n\n\n\n\n\n\n\nDATE\n\n\nTIME\n\n\nBOROUGH\n\n\nZIP CODE\n\n\nLATITUDE\n\n\nLONGITUDE\n\n\nLOCATION\n\n\nON STREET\n\n\nCROSS STRE\n\n\nOFF STREET\n\n\n…\n\n\nCONTRIBU_2\n\n\nCONTRIBU_3\n\n\nCONTRIBU_4\n\n\nUNIQUE KEY\n\n\nVEHICLE TY\n\n\nVEHICLE _1\n\n\nVEHICLE _2\n\n\nVEHICLE _3\n\n\nVEHICLE _4\n\n\ngeometry\n\n\n\n\n\n\n0\n\n\n07/30/2019\n\n\n0:00\n\n\nBRONX\n\n\n10464\n\n\n40.841100\n\n\n-73.784960\n\n\n(40.8411, -73.78496)\n\n\nNaN\n\n\nNaN\n\n\n121 PILOT STREET\n\n\n…\n\n\nUnspecified\n\n\nNaN\n\n\nNaN\n\n\n4180045\n\n\nSedan\n\n\nStation Wagon/Sport Utility Vehicle\n\n\nStation Wagon/Sport Utility Vehicle\n\n\nNaN\n\n\nNaN\n\n\nPOINT (1043750.211 245785.815)\n\n\n\n\n1\n\n\n07/30/2019\n\n\n0:10\n\n\nQUEENS\n\n\n11423\n\n\n40.710827\n\n\n-73.770660\n\n\n(40.710827, -73.77066)\n\n\nJAMAICA AVENUE\n\n\n188 STREET\n\n\nNaN\n\n\n…\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n4180007\n\n\nSedan\n\n\nSedan\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nPOINT (1047831.185 198333.171)\n\n\n\n\n2\n\n\n07/30/2019\n\n\n0:25\n\n\nNaN\n\n\nNaN\n\n\n40.880318\n\n\n-73.841286\n\n\n(40.880318, -73.841286)\n\n\nBOSTON ROAD\n\n\nNaN\n\n\nNaN\n\n\n…\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n4179575\n\n\nSedan\n\n\nStation Wagon/Sport Utility Vehicle\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nPOINT (1028139.293 260041.178)\n\n\n\n\n3\n\n\n07/30/2019\n\n\n0:35\n\n\nMANHATTAN\n\n\n10036\n\n\n40.756744\n\n\n-73.984590\n\n\n(40.756744, -73.98459)\n\n\nNaN\n\n\nNaN\n\n\n155 WEST 44 STREET\n\n\n…\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n4179544\n\n\nBox Truck\n\n\nStation Wagon/Sport Utility Vehicle\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nPOINT (988519.261 214979.320)\n\n\n\n\n4\n\n\n07/30/2019\n\n\n10:00\n\n\nBROOKLYN\n\n\n11223\n\n\n40.600090\n\n\n-73.965910\n\n\n(40.60009, -73.96591)\n\n\nAVENUE T\n\n\nOCEAN PARKWAY\n\n\nNaN\n\n\n…\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\n4180660\n\n\nStation Wagon/Sport Utility Vehicle\n\n\nBike\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nPOINT (993716.669 157907.212)\n\n\n\n\n\n\n5 rows × 30 columns\n\n\n충돌 데이터를 시각화하기 위해 대화형 맵을 만들려면 “LATITUITUITY” 및 “LONGITUITY” 열을 사용합니다. 어떤 종류의 지도가 가장 효과적이라고 생각합니까?\nm_1 = folium.Map(location=[40.7, -74], zoom_start=11) \n\n# Your code here: Visualize the collision data\nHeatMap(data=collisions[['LATITUDE', 'LONGITUDE']], radius=9).add_to(m_1)\n\n# Show the map\nembed_map(m_1, \"q_1.html\")\nm_1\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\n\n2.2 2) 병원 범위를 이해합니다.\n다음 코드 셀을 실행하여 병원 데이터를 로드합니다.\nhospitals = gpd.read_file(\"C:/Users\\seong taek/Desktop/archive/nyu_2451_34494/nyu_2451_34494/nyu_2451_34494.shp\")\nhospitals.head()\n\n\n\n\n\n\n\n\n\nid\n\n\nname\n\n\naddress\n\n\nzip\n\n\nfactype\n\n\nfacname\n\n\ncapacity\n\n\ncapname\n\n\nbcode\n\n\nxcoord\n\n\nycoord\n\n\nlatitude\n\n\nlongitude\n\n\ngeometry\n\n\n\n\n\n\n0\n\n\n317000001H1178\n\n\nBRONX-LEBANON HOSPITAL CENTER - CONCOURSE DIVI…\n\n\n1650 Grand Concourse\n\n\n10457\n\n\n3102\n\n\nHospital\n\n\n415\n\n\nBeds\n\n\n36005\n\n\n1008872.0\n\n\n246596.0\n\n\n40.843490\n\n\n-73.911010\n\n\nPOINT (1008872.000 246596.000)\n\n\n\n\n1\n\n\n317000001H1164\n\n\nBRONX-LEBANON HOSPITAL CENTER - FULTON DIVISION\n\n\n1276 Fulton Ave\n\n\n10456\n\n\n3102\n\n\nHospital\n\n\n164\n\n\nBeds\n\n\n36005\n\n\n1011044.0\n\n\n242204.0\n\n\n40.831429\n\n\n-73.903178\n\n\nPOINT (1011044.000 242204.000)\n\n\n\n\n2\n\n\n317000011H1175\n\n\nCALVARY HOSPITAL INC\n\n\n1740-70 Eastchester Rd\n\n\n10461\n\n\n3102\n\n\nHospital\n\n\n225\n\n\nBeds\n\n\n36005\n\n\n1027505.0\n\n\n248287.0\n\n\n40.848060\n\n\n-73.843656\n\n\nPOINT (1027505.000 248287.000)\n\n\n\n\n3\n\n\n317000002H1165\n\n\nJACOBI MEDICAL CENTER\n\n\n1400 Pelham Pkwy\n\n\n10461\n\n\n3102\n\n\nHospital\n\n\n457\n\n\nBeds\n\n\n36005\n\n\n1027042.0\n\n\n251065.0\n\n\n40.855687\n\n\n-73.845311\n\n\nPOINT (1027042.000 251065.000)\n\n\n\n\n4\n\n\n317000008H1172\n\n\nLINCOLN MEDICAL & MENTAL HEALTH CENTER\n\n\n234 E 149 St\n\n\n10451\n\n\n3102\n\n\nHospital\n\n\n362\n\n\nBeds\n\n\n36005\n\n\n1005154.0\n\n\n236853.0\n\n\n40.816758\n\n\n-73.924478\n\n\nPOINT (1005154.000 236853.000)\n\n\n\n\n\n\n“위도” 및 “경도” 열을 사용하여 병원 위치를 시각화합니다.\nm_2 = folium.Map(location=[40.7, -74], zoom_start=11) \n\n# Your code here: Visualize the hospital locations\nfor idx, row in hospitals.iterrows():\n    Marker([row['latitude'], row['longitude']], popup=row['name']).add_to(m_2)\n\n# Show the map\nembed_map(m_2, \"q_2.html\")\nm_2\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\n\n2.3 3) 가장 가까운 병원이 10킬로미터 이상 떨어진 때는 언제였습니까?\n가장 가까운 병원에서 10km 이상 떨어진 곳에서 발생한 충돌로 인한 모든 행을 포함하는 DataFrame outside_range를 만듭니다.\n병원과 충돌은 모두 EPSG 2263을 좌표계로 사용하고 EPSG 2263은 미터 단위를 사용합니다.\n# Your code here\ncoverage = gpd.GeoDataFrame(geometry=hospitals.geometry).buffer(10000)\nmy_union = coverage.geometry.unary_union\noutside_range = collisions.loc[~collisions[\"geometry\"].apply(lambda x: my_union.contains(x))]\n다음 코드 셀은 가장 가까운 병원에서 10킬로미터 이상 떨어진 곳에서 발생한 충돌의 비율을 계산합니다.\npercentage = round(100*len(outside_range)/len(collisions), 2)\nprint(\"Percentage of collisions more than 10 km away from the closest hospital: {}%\".format(percentage))\nPercentage of collisions more than 10 km away from the closest hospital: 15.12%\n\n\n2.4 4) 추천자를 만들어 보세요.\n먼 곳에서 충돌이 발생할 경우 부상자를 가장 가까운 병원으로 이송하는 것이 더욱 중요합니다.\n이를 고려하여 다음과 같은 추천인을 생성하기로 결정합니다:\n\n충돌 위치(EPSG 2263)를 입력으로 사용합니다,\n가장 가까운 병원을 찾습니다(EPSG 2263에서 거리 계산이 수행되는 곳)\n가장 가까운 병원의 이름을 반환합니다.\n\ndef best_hospital(collision_location):\n    # Your code here\n    idx_min = hospitals.geometry.distance(collision_location).idxmin()\n    my_hospital = hospitals.iloc[idx_min]\n    name = my_hospital[\"name\"]\n    return name\n# Test your function: this should suggest CALVARY HOSPITAL INC\nprint(best_hospital(outside_range.geometry.iloc[0]))\nCALVARY HOSPITAL INC\n\n\n2.5 5) 가장 수요가 많은 병원은 어디입니까?\nOutside_range DataFrame에서 충돌만 고려할 때 가장 권장되는 병원은 무엇입니까?\n4)에서 생성한 함수가 반환한 병원 이름과 정확히 일치하는 파이썬 문자열이어야 합니다.\n# Your code here\nhighest_demand = outside_range.geometry.apply(best_hospital).value_counts().idxmax()\nhighest_demand\n'JAMAICA HOSPITAL MEDICAL CENTER'\n\n\n2.6 6) 서울시는 어디에 새로운 병원을 지어야 합니까?\n가장 가까운 병원에서 10km 이상 떨어진 곳에서 발생한 충돌 외에도 병원 위치를 시각화하려면 다음 코드 셀을 (변경 없이) 실행합니다.\nm_6 = folium.Map(location=[40.7, -74], zoom_start=11) \n\ncoverage = gpd.GeoDataFrame(geometry=hospitals.geometry).buffer(10000)\nfolium.GeoJson(coverage.geometry.to_crs(epsg=4326)).add_to(m_6)\nHeatMap(data=outside_range[['LATITUDE', 'LONGITUDE']], radius=9).add_to(m_6)\nfolium.LatLngPopup().add_to(m_6)\n\nembed_map(m_6, 'm_6.html')\nm_6\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n지도의 아무 곳이나 클릭하면 위도와 경도의 해당 위치가 있는 팝업이 나타납니다.\n뉴욕시는 두 개의 새로운 병원의 위치를 결정하는 데 도움을 요청합니다. 그들은 특히 3) 단계에서 계산된 백분율을 10% 미만으로 만들기 위해 위치를 식별하는 데 도움을 받기를 원합니다. 지도를 사용하여(그리고 구역법이나 병원을 짓기 위해 어떤 잠재적인 건물을 제거해야 할지에 대한 걱정 없이), 도시가 이 목표를 달성하는 데 도움이 될 두 곳을 식별할 수 있습니까?\n병원 1에 대해 제안된 위도와 경도를 각각 ’lat_1’과 ’long_1’에 입력합니다. (병원 2도 마찬가지입니다.)\n그런 다음 새 병원의 효과를 확인하기 위해 나머지 셀을 그대로 실행합니다. 만약 두 개의 새로운 병원이 그 비율을 10% 미만으로 만든다면, 당신의 대답은 정확하다고 표시될 것입니다.\n# Your answer here: proposed location of hospital 1\nlat_1 = 37\nlong_1 = 126\n\n# Your answer here: proposed location of hospital 2\nlat_2 = 37\nlong_2 = 126\n\n\n# Do not modify the code below this line\ntry:\n    new_df = pd.DataFrame(\n        {'Latitude': [lat_1, lat_2],\n         'Longitude': [long_1, long_2]})\n    new_gdf = gpd.GeoDataFrame(new_df, geometry=gpd.points_from_xy(new_df.Longitude, new_df.Latitude))\n    new_gdf.crs = {'init' :'epsg:4326'}\n    new_gdf = new_gdf.to_crs(epsg=2263)\n    # get new percentage\n    new_coverage = gpd.GeoDataFrame(geometry=new_gdf.geometry).buffer(10000)\n    new_my_union = new_coverage.geometry.unary_union\n    new_outside_range = outside_range.loc[~outside_range[\"geometry\"].apply(lambda x: new_my_union.contains(x))]\n    new_percentage = round(100*len(new_outside_range)/len(collisions), 2)\n    print(\"(NEW) Percentage of collisions more than 10 km away from the closest hospital: {}%\".format(new_percentage))\n\n    # make the map\n    m = folium.Map(location=[40.7, -74], zoom_start=11) \n    folium.GeoJson(coverage.geometry.to_crs(epsg=4326)).add_to(m)\n    folium.GeoJson(new_coverage.geometry.to_crs(epsg=4326)).add_to(m)\n    for idx, row in new_gdf.iterrows():\n        Marker([row['Latitude'], row['Longitude']]).add_to(m)\n    HeatMap(data=new_outside_range[['LATITUDE', 'LONGITUDE']], radius=9).add_to(m)\n    folium.LatLngPopup().add_to(m)\n    display(embed_map(m, 'q_6.html'))\nexcept:\n    q_6.hint()\n\nm\nC:\\Users\\seong taek\\anaconda3\\lib\\site-packages\\pyproj\\crs\\crs.py:141: FutureWarning: '+init=<authority>:<code>' syntax is deprecated. '<authority>:<code>' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n  in_crs_string = _prepare_from_proj_string(in_crs_string)\n\n\n(NEW) Percentage of collisions more than 10 km away from the closest hospital: 15.12%\n\n\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise5/exercise5-proximity-analysis.html#congratulations",
    "href": "posts_work/Data_Mining_exercise5/exercise5-proximity-analysis.html#congratulations",
    "title": "Data_Mining_Kaggle",
    "section": "3 Congratulations!",
    "text": "3 Congratulations!\nYou have just completed the Geospatial Analysis micro-course! Great job!\n\nHave questions or comments? Visit the course discussion forum to chat with other learners."
  },
  {
    "objectID": "posts_work/Data_Mining_exercise3/exercise3-interactive-maps.html",
    "href": "posts_work/Data_Mining_exercise3/exercise3-interactive-maps.html",
    "title": "Data_Mining_Kaggle",
    "section": "",
    "text": "Exercise 3 - Interactive Maps\nThis notebook is an exercise in the Geospatial Analysis course. You can reference the tutorial at this link."
  },
  {
    "objectID": "posts_work/Data_Mining_exercise3/exercise3-interactive-maps.html#introduction",
    "href": "posts_work/Data_Mining_exercise3/exercise3-interactive-maps.html#introduction",
    "title": "Data_Mining_Kaggle",
    "section": "1 Introduction",
    "text": "1 Introduction\nYou are an urban safety planner in Japan, and you are analyzing which areas of Japan need extra earthquake reinforcement. Which areas are both high in population density and prone to earthquakes?\n\n\n\nBefore you get started, run the code cell below to set everything up.\n\n당신은 일본의 도시 안전 계획자이고, 당신은 일본의 어느 지역에서 추가적인 지진 보강이 필요한지 분석하고 있습니다. 인구 밀도가 높고 지진이 일어나기 쉬운 지역은 어디입니까?\n\nimport pandas as pd\nimport geopandas as gpd\n\n#!pip install folium\nimport folium\nfrom folium import Choropleth\nfrom folium.plugins import HeatMap\n\n대화형 맵을 표시하기 위한 함수 embed_map()을 정의합니다. 맵을 포함하는 변수와 맵이 저장될 HTML 파일의 이름이라는 두 가지 인수를 사용할 수 있습니다.\n이 기능을 사용하면 모든 웹 브라우저에서 지도를 볼 수 있습니다. 지도 보기.\n\ndef embed_map(m, file_name):\n    from IPython.display import IFrame\n    m.save(file_name)\n    return IFrame(file_name, width='100%', height='500px')"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise3/exercise3-interactive-maps.html#exercises",
    "href": "posts_work/Data_Mining_exercise3/exercise3-interactive-maps.html#exercises",
    "title": "Data_Mining_Kaggle",
    "section": "2 Exercises",
    "text": "2 Exercises\n\n2.1 지진은 판의 경계와 일치합니까?\n\n아래 코드 셀을 실행하여 전역 플레이트 경계를 표시하는 DataFrame plate_boundaries를 만듭니다. 좌표 열은 경계를 따라 위치(위도, 경도)의 목록입니다\n\nplate_boundaries = gpd.read_file(\"C:/Users\\seong taek/Desktop/archive/Plate_Boundaries/Plate_Boundaries/Plate_Boundaries.shp\")\nplate_boundaries['coordinates'] = plate_boundaries.apply(lambda x: [(b,a) for (a,b) in list(x.geometry.coords)], axis='columns')\nplate_boundaries.drop('geometry', axis=1, inplace=True)\n\nplate_boundaries.head()\n\n\n\n\n\n\n\n\n\nHAZ_PLATES\n\n\nHAZ_PLAT_1\n\n\nHAZ_PLAT_2\n\n\nShape_Leng\n\n\ncoordinates\n\n\n\n\n\n\n0\n\n\nTRENCH\n\n\nSERAM TROUGH (ACTIVE)\n\n\n6722\n\n\n5.843467\n\n\n[(-5.444200361999947, 133.6808931800001), (-5….\n\n\n\n\n1\n\n\nTRENCH\n\n\nWETAR THRUST\n\n\n6722\n\n\n1.829013\n\n\n[(-7.760600482999962, 125.47879802900002), (-7…\n\n\n\n\n2\n\n\nTRENCH\n\n\nTRENCH WEST OF LUZON (MANILA TRENCH) NORTHERN …\n\n\n6621\n\n\n6.743604\n\n\n[(19.817899819000047, 120.09999798800004), (19…\n\n\n\n\n3\n\n\nTRENCH\n\n\nBONIN TRENCH\n\n\n9821\n\n\n8.329381\n\n\n[(26.175899215000072, 143.20620700100005), (26…\n\n\n\n\n4\n\n\nTRENCH\n\n\nNEW GUINEA TRENCH\n\n\n8001\n\n\n11.998145\n\n\n[(0.41880004000006466, 132.8273013480001), (0….\n\n\n\n\n\n\n그런 다음 변경 없이 아래 코드 셀을 실행하여 과거 지진 데이터를 DataFrame earthquakes에 로드합니다\n# Load the data and print the first 5 rows\nearthquakes = pd.read_csv(\"C:/Users\\seong taek/Desktop/archive/earthquakes1970-2014.csv\", parse_dates=[\"DateTime\"])\nearthquakes.head()\n\n\n\n\n\n\n\n\n\nDateTime\n\n\nLatitude\n\n\nLongitude\n\n\nDepth\n\n\nMagnitude\n\n\nMagType\n\n\nNbStations\n\n\nGap\n\n\nDistance\n\n\nRMS\n\n\nSource\n\n\nEventID\n\n\n\n\n\n\n0\n\n\n1970-01-04 17:00:40.200\n\n\n24.139\n\n\n102.503\n\n\n31.0\n\n\n7.5\n\n\nMs\n\n\n90.0\n\n\nNaN\n\n\nNaN\n\n\n0.0\n\n\nNEI\n\n\n1.970010e+09\n\n\n\n\n1\n\n\n1970-01-06 05:35:51.800\n\n\n-9.628\n\n\n151.458\n\n\n8.0\n\n\n6.2\n\n\nMs\n\n\n85.0\n\n\nNaN\n\n\nNaN\n\n\n0.0\n\n\nNEI\n\n\n1.970011e+09\n\n\n\n\n2\n\n\n1970-01-08 17:12:39.100\n\n\n-34.741\n\n\n178.568\n\n\n179.0\n\n\n6.1\n\n\nMb\n\n\n59.0\n\n\nNaN\n\n\nNaN\n\n\n0.0\n\n\nNEI\n\n\n1.970011e+09\n\n\n\n\n3\n\n\n1970-01-10 12:07:08.600\n\n\n6.825\n\n\n126.737\n\n\n73.0\n\n\n6.1\n\n\nMb\n\n\n91.0\n\n\nNaN\n\n\nNaN\n\n\n0.0\n\n\nNEI\n\n\n1.970011e+09\n\n\n\n\n4\n\n\n1970-01-16 08:05:39.000\n\n\n60.280\n\n\n-152.660\n\n\n85.0\n\n\n6.0\n\n\nML\n\n\n0.0\n\n\nNaN\n\n\nNaN\n\n\nNaN\n\n\nAK\n\n\nNaN\n\n\n\n\n\n\n아래 코드 셀은 지도에서 플레이트 경계를 시각화합니다. 모든 지진 데이터를 사용하여 동일한 지도에 열 지도를 추가하고 지진이 판 경계와 일치하는지 여부를 확인할 수 있습니다\n# Create a base map with plate boundaries\nm_1 = folium.Map(location=[35,136], tiles='cartodbpositron', zoom_start=5)\nfor i in range(len(plate_boundaries)):\n    folium.PolyLine(locations=plate_boundaries.coordinates.iloc[i], weight=2, color='black').add_to(m_1)\n\n### Your code here: Add a heatmap to the map\n\n# 표시할 데이터로 HeatMap 레이어를 생성합니다.\ndata = [[row['Latitude'], row['Longitude']] for index, row in earthquakes.iterrows()]\nheatmap_layer = HeatMap(data=data, radius=20)\n\n# HeatMap 레이어를 지도에 추가합니다.\nheatmap_layer.add_to(m_1)\n\n# Show the map\nembed_map(m_1, 'q_1.html')\nm_1\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n그러면 위의 지도를 보면 지진은 판의 경계와 일치합니까?\n정답 : 일치한다\n\n\n2.2 일본에서 지진 깊이와 판 경계에 근접하는 것 사이에 관계가 있습니까?\n당신은 최근에 지진의 깊이가 우리에게 말해주는 것을 읽었습니다 important information 지구의 구조에 관하여. 여러분은 흥미로운 세계적인 패턴이 있는지 알고 싶어하고, 일본에서 깊이가 어떻게 다른지 알고 싶어합니다.\n# Create a base map with plate boundaries\nm_2 = folium.Map(location=[35,136], tiles='cartodbpositron', zoom_start=5)\nfor i in range(len(plate_boundaries)):\n    folium.PolyLine(locations=plate_boundaries.coordinates.iloc[i], weight=2, color='black').add_to(m_2)\n\n### Your code here: Add a map to visualize earthquake depth\nfor index, row in earthquakes.iterrows():\n    depth = row['Depth']  # Get the depth of the earthquake\n    if depth > 0:  # Exclude earthquakes with depth 0 (unknown depth)\n        color = 'red'  # Set color based on depth (you can modify this based on your preference)\n        radius = depth / 10  # Adjust the radius based on depth (you can modify this based on your preference)\n        folium.CircleMarker(location=[row['Latitude'], row['Longitude']],\n                            radius=radius,\n                            color=color,\n                            fill=True,\n                            fill_color=color).add_to(m_2)\n    \n# View the map\nembed_map(m_2, 'q_2.html')\nm_2\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n판 경계에 대한 근접성과 지진 깊이 사이의 관계를 감지할 수 있습니까? 이 패턴은 세계적으로 통용됩니까?\n정답 : 대체적으로 판 경계와 가까울수록 깊이가 얕고 멀어질수록 깊이가 깊다\n\n\n2.3 인구 밀도가 높은 현은 어디입니까?\n다음 코드 셀을 변경하지 않고 실행하여 일본 현의 지리적 경계가 포함된 GeoDataFrame “현”을 만듭니다.\n# GeoDataFrame with prefecture boundaries\nprefectures = gpd.read_file(\"C:/Users\\seong taek/Desktop/archive/japan-prefecture-boundaries/japan-prefecture-boundaries/japan-prefecture-boundaries.shp\")\nprefectures.set_index('prefecture', inplace=True)\nprefectures.head()\n\n\n\n\n\n\n\n\n\ngeometry\n\n\n\n\nprefecture\n\n\n\n\n\n\n\n\nAichi\n\n\nMULTIPOLYGON (((137.09523 34.65330, 137.09546 …\n\n\n\n\nAkita\n\n\nMULTIPOLYGON (((139.55725 39.20330, 139.55765 …\n\n\n\n\nAomori\n\n\nMULTIPOLYGON (((141.39860 40.92472, 141.39806 …\n\n\n\n\nChiba\n\n\nMULTIPOLYGON (((139.82488 34.98967, 139.82434 …\n\n\n\n\nEhime\n\n\nMULTIPOLYGON (((132.55859 32.91224, 132.55904 …\n\n\n\n\n\n\n다음 코드 셀은 각 일본 현에 대한 인구, 면적(제곱킬로미터) 및 인구 밀도(제곱킬로미터당)를 포함하는 데이터 프레임 통계를 만듭니다. 코드 셀을 변경하지 않고 실행합니다.\n# DataFrame containing population of each prefecture\npopulation = pd.read_csv(\"C:/Users\\seong taek/Desktop/archive/japan-prefecture-population.csv\")\npopulation.set_index('prefecture', inplace=True)\n\n# Calculate area (in square kilometers) of each prefecture\narea_sqkm = pd.Series(prefectures.geometry.to_crs(epsg=32654).area / 10**6, name='area_sqkm')\nstats = population.join(area_sqkm)\n\n# Add density (per square kilometer) of each prefecture\nstats['density'] = stats[\"population\"] / stats[\"area_sqkm\"]\nstats.head()\n\n\n\n\n\n\n\n\n\npopulation\n\n\narea_sqkm\n\n\ndensity\n\n\n\n\nprefecture\n\n\n\n\n\n\n\n\n\n\n\n\nTokyo\n\n\n12868000\n\n\n1800.614782\n\n\n7146.448049\n\n\n\n\nKanagawa\n\n\n8943000\n\n\n2383.038975\n\n\n3752.771186\n\n\n\n\nOsaka\n\n\n8801000\n\n\n1923.151529\n\n\n4576.342460\n\n\n\n\nAichi\n\n\n7418000\n\n\n5164.400005\n\n\n1436.372085\n\n\n\n\nSaitama\n\n\n7130000\n\n\n3794.036890\n\n\n1879.264806\n\n\n\n\n\n\n다음 코드 셀을 사용하여 모집단 밀도를 시각화하는 코로플레스 맵을 작성합니다.\n# Create a base map\nm_3 = folium.Map(location=[35,136], tiles='cartodbpositron', zoom_start=5)\n\n### Your code here: create a choropleth map to visualize population density\n\n# Create choropleth map\nChoropleth(geo_data=prefectures['geometry'],\n           data=stats['density'],\n           key_on=\"feature.id\",\n           fill_color='YlGnBu',\n           legend_name='Population density (per square kilometer)'\n          ).add_to(m_3)\n\n# View the map\nembed_map(m_3, 'q_3.html')\nm_3\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n다른 현들보다 상대적으로 밀도가 높은 현은 어디입니까? 그들은 전국적으로 퍼져 있습니까, 아니면 모두 대략 같은 지리적 지역에 위치하고 있습니까? (일본 지리에 익숙하지 않은 경우 이 지도가 질문에 대답하는 데 유용할 수 있습니다.) 지도\n정답 : 도쿄,오사카등 중심도시\n\n\n2.4 고밀도 현 중 규모가 큰 지진이 발생하기 쉬운 곳은 어디입니까?\n지진 보강의 혜택을 받을 수 있는 한 현을 제안하는 지도를 작성합니다. 지도는 밀도와 지진 규모를 모두 시각화해야 합니다.\n규모 7이상을 규모가 큰 지진으로 설정\n# Create a base map\nm_4 = folium.Map(location=[35,136], tiles='cartodbpositron', zoom_start=5)\n\n### Your code here: create a map\n\ndef color_producer(val):\n    if val <=7:\n        return 'forestgreen'\n    else:\n        return 'blue'\n    \nChoropleth(\n    geo_data=prefectures['geometry'].__geo_interface__,\n    data=stats['density'],\n    key_on=\"feature.id\",\n    fill_color='BuPu',\n    legend_name='Population density (per square kilometer)').add_to(m_4)\n\nfor i in range(0,len(earthquakes)):\n    folium.Circle(\n        location=[earthquakes.iloc[i]['Latitude'], earthquakes.iloc[i]['Longitude']],\n        popup=(\"{} ({})\").format(\n            earthquakes.iloc[i]['Magnitude'],\n            earthquakes.iloc[i]['DateTime'].year),\n        radius=earthquakes.iloc[i]['Magnitude']**5.5,\n        color=color_producer(earthquakes.iloc[i]['Magnitude'])).add_to(m_4)\n\n# View the map\nembed_map(m_4, 'q_4.html')\nm_4\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n추가 지진 보강을 위해 어느 현을 추천하십니까?\nIwate현 추천"
  },
  {
    "objectID": "posts_work/Data_Mining_exercise3/exercise3-interactive-maps.html#keep-going",
    "href": "posts_work/Data_Mining_exercise3/exercise3-interactive-maps.html#keep-going",
    "title": "Data_Mining_Kaggle",
    "section": "3 Keep going",
    "text": "3 Keep going\nLearn how to convert names of places to geographic coordinates with geocoding. You’ll also explore special ways to join information from multiple GeoDataFrames.\n\nHave questions or comments? Visit the course discussion forum to chat with other learners."
  },
  {
    "objectID": "posts/Advanced_Python_ch2/파이썬 심화 챕터2 공부.html",
    "href": "posts/Advanced_Python_ch2/파이썬 심화 챕터2 공부.html",
    "title": "advanced_python CH2",
    "section": "",
    "text": "Jupyter에서 실행하기\nBasic Grammar"
  },
  {
    "objectID": "posts/Advanced_Python_ch2/파이썬 심화 챕터2 공부.html#python-ch2.-기본-문법",
    "href": "posts/Advanced_Python_ch2/파이썬 심화 챕터2 공부.html#python-ch2.-기본-문법",
    "title": "advanced_python CH2",
    "section": "1 python CH2. 기본 문법",
    "text": "1 python CH2. 기본 문법\n\n1.1 수치 할당\nimport numpy as np\na = 5; b = 6; c = 7\nc\n7\n\n\n1.2 변수, 논리연산자\n# append() : 값 추가\na = [1,2,3]\nb=a\na.append(4)\nb\n[1, 2, 3, 4]\n\n\n1.3 타입 확인\na = 5; b = 'foo'\ntype(a), type(b)\n(int, str)\n# format() : print{} 안에 내용 추가 (순서대로 0,1,2..)\n# float : 소수\na = 4.5; b = 2\nprint('a is {0}, b is {1}'.format(type(a), type(b)))\na/b\na is <class 'float'>, b is <class 'int'>\n2.25\n# isinstance() : 타입 맞는지 확인\na = 5\nisinstance(a, int)\nTrue\n# 여러 타입 중 하나라도 맞으면 True\na = 5; b = 4.5\nisinstance(a, (int, float, str)), isinstance(b, (int, float))\n(True, True)\n\n\n1.4 속성, 메서드\na = 'foo'\n# upper() : 소문자 → 대문자\na.upper()\n'FOO'\n# getattr(객체, 속성) : 객체의 속성에 접근해줌\ngetattr(a, 'split')\n<function str.split(sep=None, maxsplit=-1)>\n\n\n1.5 Duck typing\n# 덕 타이핑: \"특정 기능을 지원하는가만 중요하다\"는 의미를 전달할 때 사용하는 표현\n# = 이터러블 객체\ndef isiterable(obj):\n    try:\n        iter(obj)\n        return True\n    except TypeError: # 이터러블 하지 않은 값\n        return False\nisiterable('a string')\nTrue\nisiterable([1,2,3])\nTrue\n# 정수는 이터러블 하지 않음\nisiterable(5) \nFalse\n\n\n1.6 Import\n\n1.6.0.0.1 some_module.py\n\n\n1.6.0.0.2 Pi = 3.14159\n\n\n1.6.0.0.3 def f(x): return x + 2\n\n\n1.6.0.0.4 def g(a,b):return a+b\n# some_module : 임의적으로 만든 py 파일\nimport some_module\nresult = some_module.f(5)\nresult\n7\npi = some_module.PI\npi\n3.14159\n# 모듈 중 몇개만 import\nfrom some_module import f,g,PI\nresult = g(5,PI)\nresult\n8.14159\n# as 로 이름 간략하게 바꿔서도 사용 가능\nimport some_module as sm\nfrom some_module import PI as pi, g as gf\nr1 = sm.f(pi)\nr2 = gf(6, pi)\nr1, r2\n(5.14159, 9.14159)\n\n\n\n1.7 이항 연산, 비교\n5 - 7, 12 + 21.5, 5 <= 2\n(-2, 33.5, False)\na = [1,2,3]\nb = a\nc = list(a)\na is b, a is not c\n(True, True)\na == c\nTrue\na = None\na is None\nTrue\na_list = ['foo', 2, [4,5]]\na_list[2] = (3,4)\na_list\n['foo', 2, (3, 4)]\n# 잘못된 예시 (수치형을 범주형으로 바꾸려한 경우)\na_tuple = (3, 5, (4,5))\na_tuple[1] = 'four'\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\nCell In[28], line 3\n      1 # 잘못된 예시 (수치형을 범주형으로 바꾸려한 경우)\n      2 a_tuple = (3, 5, (4,5))\n----> 3 a_tuple[1] = 'four'\n\n\nTypeError: 'tuple' object does not support item assignment\nival = 17239871\nival ** 6\n26254519291092456596965462913230729701102721\nfval = 7.243\nfval2 = 6.78e-5\n# // : 몫 (% : 나머지)\n3/2, type(3/2), 3//2, type(3//2)\n(1.5, float, 1, int)\na = 'one way of writing a string'\nb = 'another way'\na,b\n('one way of writing a string', 'another way')\n# 따옴표 3개 : 여러 줄을 한 줄로 출력\nc = '''\nThis is a longer string that\nspans multiple lines\n'''\nc\n'\\nThis is a longer string that\\nspans multiple lines\\n'\n# 띄어진 줄 개수\nc.count('\\n')\n3\n# 잘못된 예시 (문자 바꾸려한 경우)\na = 'this is a string'\na[10] = 'f'\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\nCell In[35], line 3\n      1 # 잘못된 예시 (문자 바꾸려한 경우)\n      2 a = 'this is a string'\n----> 3 a[10] = 'f'\n\n\nTypeError: 'str' object does not support item assignment\n# replace 이용해 변경\nb = a.replace('string', 'longer string')\na,b\n('this is a string', 'this is a longer string')\n# 수치형 → 범주형 변경\na = 5.6\ns = str(a)\nprint(s),\ntype(s)\n5.6\nstr\n# list 이용해 문자 하나씩 출력\ns = 'python'\nlist(s)\n['p', 'y', 't', 'h', 'o', 'n']\n# 3전 까지 출력, 3부터 출력\ns[:3], s[3:]\n('pyt', 'hon')\n# \\n로 줄 띄우기\nprint('12\\n34')\n12\n34\n# 이상한 예시\ns = '12\\\\34'\nprint(s)\n12\\34\n# 범주형도 더해진다\na = 'this is the first half'\nb = 'and this is the second half'\na + b\n'this is the first halfand this is the second half'\n# {0:.2f} : 소수점 둘째 자리로 반올림\n# {1:s} : 두번째 인수의 형식을 범주형으로 저장\n# {2:d} : 세번째 인수의 형식을 정확한 정수로 저장\ntemplate = '{0:.2f} {1:s} are worth US${2:d}'\ntemplate\n'{0:.2f} {1:s} are worth US${2:d}'\ntemplate.format(4.5560, 'Argentine Pesos', 1)\n'4.56 Argentine Pesos are worth US$1'\ntemplate.format(1263.23, 'won', 1)\n'1263.23 won are worth US$1'\n\n\n1.8 Booleans\n\n1.8.0.0.1 불리언 타입 - True, False 두가지 값\nTrue and True\nTrue\nFalse or True\nTrue\n\n\n\n1.9 Type casting\n\n1.9.0.0.1 원하는 타입으로 해석\ns = '3.14159'\nfval = float(s)\ntype(fval)\nfloat\nint(fval)\n3\nbool(fval)\nTrue\n# bool : 비어있는 값, 0 → False\nbool(0)\nFalse\na = None\na is None\nTrue\ndef add_and_maybe_multiply(a, b, c=None):\n    result = a + b\n    if c is not None:\n        result = result * c\n    return result\nadd_and_maybe_multiply(5,3)\n8\nadd_and_maybe_multiply(5,3,10)\n80\ntype(None)\nNoneType\n\n\n\n1.10 날짜, 시간 값\nfrom datetime import datetime, date, time\ndt = datetime(2011, 10, 29, 20, 30, 21)\ndt\n# 년, 월, 일, 시, 분, 초\ndatetime.datetime(2011, 10, 29, 20, 30, 21)\ndt.day\n29\ndt.minute\n30\n# 년, 월, 일\ndt.date()\ndatetime.date(2011, 10, 29)\n# 시, 분, 초\ndt.time()\ndatetime.time(20, 30, 21)\n# strftime : 날짜 문자열을 날짜 객체로 만들 때\ndt.strftime('%m/%d/%Y %H:%M'), dt.strftime('%Y/%m/%d %H:%M')\n('10/29/2011 20:30', '2011/10/29 20:30')\n# strptime : 날짜 객체열을 날짜 문자열로 출력 할 때 \ndatetime.strptime('20091031', '%Y%m%d')\ndatetime.datetime(2009, 10, 31, 0, 0)\ndt.replace(minute=0, second=0)\ndatetime.datetime(2011, 10, 29, 20, 0)\n# 날짜 끼리 연산 가능\ndt2 = datetime(2011, 11, 15, 22, 30)\ndelta = dt2 - dt\ndelta\ndatetime.timedelta(days=17, seconds=7179)\ntype(delta)\ndatetime.timedelta\ndt\ndt + delta\ndatetime.datetime(2011, 11, 15, 22, 30)\n\n\n1.11 Control Flow\nx = -5\n\nif x < 0:\n    print('It is negative')\nIt is negative\nx = 8\nif x < 0:\n    print('It is negative')\nelif x == 0:\n    print('Equal to zero')\nelif 0 < x < 5:\n    print('positive but smaller than 5')\nelse:\n    print('positive and larger than or equal to 5')\npositive and larger than or equal to 5\na = 5; b = 7; c = 8; d = 4\nif a < b or c > d:\n    print('Made it')\nMade it\n4>3>2>1, 3>5 or 2>1, 3>5>2>1\n(True, True, False)\n\n\n1.12 for loops 루프문\n# 잘못된 예시 (+= 는 int, NoneType 지원 안함)\nsequence = [1,2,None,4,None,5]\ntotal = 0\n\nfor value in sequence:\n    total += value\n    # total = total + value\n---------------------------------------------------------------------------\n\nTypeError                                 Traceback (most recent call last)\n\nCell In[72], line 6\n      3 total = 0\n      5 for value in sequence:\n----> 6     total += value\n\n\nTypeError: unsupported operand type(s) for +=: 'int' and 'NoneType'\nsequence = [1,2,None,4,None,5]\ntotal = 10\n\nfor value in sequence:\n    if value is None:\n        continue\n    total += value\ntotal\n22\nsequence = [1,2,0,4,6,5,2,1]\ntotal_until_5 = 0\nfor value in sequence:\n    if value == 5:\n        break\n    total_until_5 += value\ntotal_until_5\n13\nlist(range(4))\n[0, 1, 2, 3]\n# j가 i 보다 커지기 전까지 조합\nfor i in range(4):\n    for j in range(4):\n        if j > i:\n            break\n        print((j,i))\n(0, 0)\n(0, 1)\n(1, 1)\n(0, 2)\n(1, 2)\n(2, 2)\n(0, 3)\n(1, 3)\n(2, 3)\n(3, 3)\n# 전체 조합 출력\nfor i in range(4):\n    for j in range(4):\n        print((i,j))\n(0, 0)\n(0, 1)\n(0, 2)\n(0, 3)\n(1, 0)\n(1, 1)\n(1, 2)\n(1, 3)\n(2, 0)\n(2, 1)\n(2, 2)\n(2, 3)\n(3, 0)\n(3, 1)\n(3, 2)\n(3, 3)\nfor a, b, c in [[1,2,3],[4,5,6],[7,8,9]]:\n    print(a,b,c)\n1 2 3\n4 5 6\n7 8 9\nfor a in [[1,2,3],[4,5,6],[7,8,9]]:\n    print(a)\n[1, 2, 3]\n[4, 5, 6]\n[7, 8, 9]\n\n\n1.13 while loops\nx = 256\ntotal = 0\n\nwhile x > 0:\n    if total >500:\n        break\n    total += x\n    x = x // 2\n    print(total,x)\ntotal, x\n256 128\n384 64\n448 32\n480 16\n496 8\n504 4\n\n\n\n\n\n(504, 4)\ntotal,x\n(504, 4)\n\n\n1.14 pass\nx = 7\n\nif x < 0:\n    print('negative!')\nelif x == 0:\n    pass\nelse:\n    print('positive!')\npositive!\n\n\n1.15 range\nrange(10)\nrange(0, 10)\nlist(range(10))\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist(range(0, 20, 2))\n[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\nlist(range(5, 0, -1))\n[5, 4, 3, 2, 1]\nsum = 0\nfor i in range(100000):\n    if i % 3 == 0 or i % 5 == 0:\n        sum += i\n\nsum\n2333316668\nx = 5\nb = 'Non-negative' if x >= 0 else 'Negative'\nb\n'Non-negative'\nx = 5\n\na = 100 if x>=0 else -100\na\n100"
  }
]